{"ast":null,"code":"var echarts = require(\"../../echarts\");\n\necharts.registerProcessor(function (ecModel, api) {\n  ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n    // We calculate window and reset axis here but not in model\n    // init stage and not after action dispatch handler, because\n    // reset should be called after seriesData.restoreData.\n    dataZoomModel.eachTargetAxis(resetSingleAxis); // Caution: data zoom filtering is order sensitive when using\n    // percent range and no min/max/scale set on axis.\n    // For example, we have dataZoom definition:\n    // [\n    //      {xAxisIndex: 0, start: 30, end: 70},\n    //      {yAxisIndex: 0, start: 20, end: 80}\n    // ]\n    // In this case, [20, 80] of y-dataZoom should be based on data\n    // that have filtered by x-dataZoom using range of [30, 70],\n    // but should not be based on full raw data. Thus sliding\n    // x-dataZoom will change both ranges of xAxis and yAxis,\n    // while sliding y-dataZoom will only change the range of yAxis.\n    // So we should filter x-axis after reset x-axis immediately,\n    // and then reset y-axis and filter y-axis.\n\n    dataZoomModel.eachTargetAxis(filterSingleAxis);\n  });\n  ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n    // Fullfill all of the range props so that user\n    // is able to get them from chart.getOption().\n    var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n    var percentRange = axisProxy.getDataPercentWindow();\n    var valueRange = axisProxy.getDataValueWindow();\n    dataZoomModel.setRawRange({\n      start: percentRange[0],\n      end: percentRange[1],\n      startValue: valueRange[0],\n      endValue: valueRange[1]\n    }, true);\n  });\n});\n\nfunction resetSingleAxis(dimNames, axisIndex, dataZoomModel) {\n  dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);\n}\n\nfunction filterSingleAxis(dimNames, axisIndex, dataZoomModel) {\n  dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);\n}","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/dataZoom/dataZoomProcessor.js"],"names":["echarts","require","registerProcessor","ecModel","api","eachComponent","dataZoomModel","eachTargetAxis","resetSingleAxis","filterSingleAxis","axisProxy","findRepresentativeAxisProxy","percentRange","getDataPercentWindow","valueRange","getDataValueWindow","setRawRange","start","end","startValue","endValue","dimNames","axisIndex","getAxisProxy","name","reset","filterData"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AAEAD,OAAO,CAACE,iBAAR,CAA0B,UAAUC,OAAV,EAAmBC,GAAnB,EAAwB;AAChDD,EAAAA,OAAO,CAACE,aAAR,CAAsB,UAAtB,EAAkC,UAAUC,aAAV,EAAyB;AACzD;AACA;AACA;AACAA,IAAAA,aAAa,CAACC,cAAd,CAA6BC,eAA7B,EAJyD,CAIV;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,IAAAA,aAAa,CAACC,cAAd,CAA6BE,gBAA7B;AACD,GApBD;AAqBAN,EAAAA,OAAO,CAACE,aAAR,CAAsB,UAAtB,EAAkC,UAAUC,aAAV,EAAyB;AACzD;AACA;AACA,QAAII,SAAS,GAAGJ,aAAa,CAACK,2BAAd,EAAhB;AACA,QAAIC,YAAY,GAAGF,SAAS,CAACG,oBAAV,EAAnB;AACA,QAAIC,UAAU,GAAGJ,SAAS,CAACK,kBAAV,EAAjB;AACAT,IAAAA,aAAa,CAACU,WAAd,CAA0B;AACxBC,MAAAA,KAAK,EAAEL,YAAY,CAAC,CAAD,CADK;AAExBM,MAAAA,GAAG,EAAEN,YAAY,CAAC,CAAD,CAFO;AAGxBO,MAAAA,UAAU,EAAEL,UAAU,CAAC,CAAD,CAHE;AAIxBM,MAAAA,QAAQ,EAAEN,UAAU,CAAC,CAAD;AAJI,KAA1B,EAKG,IALH;AAMD,GAZD;AAaD,CAnCD;;AAqCA,SAASN,eAAT,CAAyBa,QAAzB,EAAmCC,SAAnC,EAA8ChB,aAA9C,EAA6D;AAC3DA,EAAAA,aAAa,CAACiB,YAAd,CAA2BF,QAAQ,CAACG,IAApC,EAA0CF,SAA1C,EAAqDG,KAArD,CAA2DnB,aAA3D;AACD;;AAED,SAASG,gBAAT,CAA0BY,QAA1B,EAAoCC,SAApC,EAA+ChB,aAA/C,EAA8D;AAC5DA,EAAAA,aAAa,CAACiB,YAAd,CAA2BF,QAAQ,CAACG,IAApC,EAA0CF,SAA1C,EAAqDI,UAArD,CAAgEpB,aAAhE;AACD","sourcesContent":["var echarts = require(\"../../echarts\");\n\necharts.registerProcessor(function (ecModel, api) {\n  ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n    // We calculate window and reset axis here but not in model\n    // init stage and not after action dispatch handler, because\n    // reset should be called after seriesData.restoreData.\n    dataZoomModel.eachTargetAxis(resetSingleAxis); // Caution: data zoom filtering is order sensitive when using\n    // percent range and no min/max/scale set on axis.\n    // For example, we have dataZoom definition:\n    // [\n    //      {xAxisIndex: 0, start: 30, end: 70},\n    //      {yAxisIndex: 0, start: 20, end: 80}\n    // ]\n    // In this case, [20, 80] of y-dataZoom should be based on data\n    // that have filtered by x-dataZoom using range of [30, 70],\n    // but should not be based on full raw data. Thus sliding\n    // x-dataZoom will change both ranges of xAxis and yAxis,\n    // while sliding y-dataZoom will only change the range of yAxis.\n    // So we should filter x-axis after reset x-axis immediately,\n    // and then reset y-axis and filter y-axis.\n\n    dataZoomModel.eachTargetAxis(filterSingleAxis);\n  });\n  ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n    // Fullfill all of the range props so that user\n    // is able to get them from chart.getOption().\n    var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n    var percentRange = axisProxy.getDataPercentWindow();\n    var valueRange = axisProxy.getDataValueWindow();\n    dataZoomModel.setRawRange({\n      start: percentRange[0],\n      end: percentRange[1],\n      startValue: valueRange[0],\n      endValue: valueRange[1]\n    }, true);\n  });\n});\n\nfunction resetSingleAxis(dimNames, axisIndex, dataZoomModel) {\n  dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);\n}\n\nfunction filterSingleAxis(dimNames, axisIndex, dataZoomModel) {\n  dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);\n}"]},"metadata":{},"sourceType":"script"}