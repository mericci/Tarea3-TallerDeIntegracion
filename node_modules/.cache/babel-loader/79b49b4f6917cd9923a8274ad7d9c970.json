{"ast":null,"code":"var List = require(\"../../data/List\");\n\nvar completeDimensions = require(\"../../data/helper/completeDimensions\");\n\nvar WhiskerBoxDraw = require(\"../helper/WhiskerBoxDraw\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar seriesModelMixin = {\n  /**\n   * @private\n   * @type {string}\n   */\n  _baseAxisDim: null,\n\n  /**\n   * @override\n   */\n  getInitialData: function (option, ecModel) {\n    // When both types of xAxis and yAxis are 'value', layout is\n    // needed to be specified by user. Otherwise, layout can be\n    // judged by which axis is category.\n    var categories;\n    var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));\n    var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));\n    var xAxisType = xAxisModel.get('type');\n    var yAxisType = yAxisModel.get('type');\n    var addOrdinal; // FIXME\n    // 考虑时间轴\n\n    if (xAxisType === 'category') {\n      option.layout = 'horizontal';\n      categories = xAxisModel.getCategories();\n      addOrdinal = true;\n    } else if (yAxisType === 'category') {\n      option.layout = 'vertical';\n      categories = yAxisModel.getCategories();\n      addOrdinal = true;\n    } else {\n      option.layout = option.layout || 'horizontal';\n    }\n\n    var coordDims = ['x', 'y'];\n    var baseAxisDimIndex = option.layout === 'horizontal' ? 0 : 1;\n    var baseAxisDim = this._baseAxisDim = coordDims[baseAxisDimIndex];\n    var otherAxisDim = coordDims[1 - baseAxisDimIndex];\n    var data = option.data;\n    addOrdinal && zrUtil.each(data, function (item, index) {\n      if (item.value && zrUtil.isArray(item.value)) {\n        item.value.unshift(index);\n      } else {\n        zrUtil.isArray(item) && item.unshift(index);\n      }\n    });\n    var defaultValueDimensions = this.defaultValueDimensions;\n    var dimensions = [{\n      name: baseAxisDim,\n      otherDims: {\n        tooltip: false\n      },\n      dimsDef: ['base']\n    }, {\n      name: otherAxisDim,\n      dimsDef: defaultValueDimensions.slice()\n    }];\n    dimensions = completeDimensions(dimensions, data, {\n      encodeDef: this.get('encode'),\n      dimsDef: this.get('dimensions'),\n      // Consider empty data entry.\n      dimCount: defaultValueDimensions.length + 1\n    });\n    var list = new List(dimensions, this);\n    list.initData(data, categories ? categories.slice() : null);\n    return list;\n  },\n\n  /**\n   * If horizontal, base axis is x, otherwise y.\n   * @override\n   */\n  getBaseAxis: function () {\n    var dim = this._baseAxisDim;\n    return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;\n  }\n};\nvar viewMixin = {\n  init: function () {\n    /**\n     * Old data.\n     * @private\n     * @type {module:echarts/chart/helper/WhiskerBoxDraw}\n     */\n    var whiskerBoxDraw = this._whiskerBoxDraw = new WhiskerBoxDraw(this.getStyleUpdater());\n    this.group.add(whiskerBoxDraw.group);\n  },\n  render: function (seriesModel, ecModel, api) {\n    this._whiskerBoxDraw.updateData(seriesModel.getData());\n  },\n  remove: function (ecModel) {\n    this._whiskerBoxDraw.remove();\n  }\n};\nexports.seriesModelMixin = seriesModelMixin;\nexports.viewMixin = viewMixin;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/helper/whiskerBoxCommon.js"],"names":["List","require","completeDimensions","WhiskerBoxDraw","zrUtil","seriesModelMixin","_baseAxisDim","getInitialData","option","ecModel","categories","xAxisModel","getComponent","get","yAxisModel","xAxisType","yAxisType","addOrdinal","layout","getCategories","coordDims","baseAxisDimIndex","baseAxisDim","otherAxisDim","data","each","item","index","value","isArray","unshift","defaultValueDimensions","dimensions","name","otherDims","tooltip","dimsDef","slice","encodeDef","dimCount","length","list","initData","getBaseAxis","dim","axis","viewMixin","init","whiskerBoxDraw","_whiskerBoxDraw","getStyleUpdater","group","add","render","seriesModel","api","updateData","getData","remove","exports"],"mappings":"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","sourcesContent":["var List = require(\"../../data/List\");\n\nvar completeDimensions = require(\"../../data/helper/completeDimensions\");\n\nvar WhiskerBoxDraw = require(\"../helper/WhiskerBoxDraw\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar seriesModelMixin = {\n  /**\n   * @private\n   * @type {string}\n   */\n  _baseAxisDim: null,\n\n  /**\n   * @override\n   */\n  getInitialData: function (option, ecModel) {\n    // When both types of xAxis and yAxis are 'value', layout is\n    // needed to be specified by user. Otherwise, layout can be\n    // judged by which axis is category.\n    var categories;\n    var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));\n    var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));\n    var xAxisType = xAxisModel.get('type');\n    var yAxisType = yAxisModel.get('type');\n    var addOrdinal; // FIXME\n    // 考虑时间轴\n\n    if (xAxisType === 'category') {\n      option.layout = 'horizontal';\n      categories = xAxisModel.getCategories();\n      addOrdinal = true;\n    } else if (yAxisType === 'category') {\n      option.layout = 'vertical';\n      categories = yAxisModel.getCategories();\n      addOrdinal = true;\n    } else {\n      option.layout = option.layout || 'horizontal';\n    }\n\n    var coordDims = ['x', 'y'];\n    var baseAxisDimIndex = option.layout === 'horizontal' ? 0 : 1;\n    var baseAxisDim = this._baseAxisDim = coordDims[baseAxisDimIndex];\n    var otherAxisDim = coordDims[1 - baseAxisDimIndex];\n    var data = option.data;\n    addOrdinal && zrUtil.each(data, function (item, index) {\n      if (item.value && zrUtil.isArray(item.value)) {\n        item.value.unshift(index);\n      } else {\n        zrUtil.isArray(item) && item.unshift(index);\n      }\n    });\n    var defaultValueDimensions = this.defaultValueDimensions;\n    var dimensions = [{\n      name: baseAxisDim,\n      otherDims: {\n        tooltip: false\n      },\n      dimsDef: ['base']\n    }, {\n      name: otherAxisDim,\n      dimsDef: defaultValueDimensions.slice()\n    }];\n    dimensions = completeDimensions(dimensions, data, {\n      encodeDef: this.get('encode'),\n      dimsDef: this.get('dimensions'),\n      // Consider empty data entry.\n      dimCount: defaultValueDimensions.length + 1\n    });\n    var list = new List(dimensions, this);\n    list.initData(data, categories ? categories.slice() : null);\n    return list;\n  },\n\n  /**\n   * If horizontal, base axis is x, otherwise y.\n   * @override\n   */\n  getBaseAxis: function () {\n    var dim = this._baseAxisDim;\n    return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;\n  }\n};\nvar viewMixin = {\n  init: function () {\n    /**\n     * Old data.\n     * @private\n     * @type {module:echarts/chart/helper/WhiskerBoxDraw}\n     */\n    var whiskerBoxDraw = this._whiskerBoxDraw = new WhiskerBoxDraw(this.getStyleUpdater());\n    this.group.add(whiskerBoxDraw.group);\n  },\n  render: function (seriesModel, ecModel, api) {\n    this._whiskerBoxDraw.updateData(seriesModel.getData());\n  },\n  remove: function (ecModel) {\n    this._whiskerBoxDraw.remove();\n  }\n};\nexports.seriesModelMixin = seriesModelMixin;\nexports.viewMixin = viewMixin;"]},"metadata":{},"sourceType":"script"}