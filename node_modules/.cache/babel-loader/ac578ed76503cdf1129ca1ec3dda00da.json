{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar Model = require(\"../model/Model\");\n\nvar List = require(\"./List\");\n\nvar linkList = require(\"./helper/linkList\");\n\nvar completeDimensions = require(\"./helper/completeDimensions\");\n/**\n * Tree data structure\n *\n * @module echarts/data/Tree\n */\n\n/**\n * @constructor module:echarts/data/Tree~TreeNode\n * @param {string} name\n * @param {module:echarts/data/Tree} hostTree\n */\n\n\nvar TreeNode = function (name, hostTree) {\n  /**\n   * @type {string}\n   */\n  this.name = name || '';\n  /**\n   * Depth of node\n   *\n   * @type {number}\n   * @readOnly\n   */\n\n  this.depth = 0;\n  /**\n   * Height of the subtree rooted at this node.\n   * @type {number}\n   * @readOnly\n   */\n\n  this.height = 0;\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n\n  this.parentNode = null;\n  /**\n   * Reference to list item.\n   * Do not persistent dataIndex outside,\n   * besause it may be changed by list.\n   * If dataIndex -1,\n   * this node is logical deleted (filtered) in list.\n   *\n   * @type {Object}\n   * @readOnly\n   */\n\n  this.dataIndex = -1;\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @readOnly\n   */\n\n  this.children = [];\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @pubilc\n   */\n\n  this.viewChildren = [];\n  /**\n   * @type {moduel:echarts/data/Tree}\n   * @readOnly\n   */\n\n  this.hostTree = hostTree;\n};\n\nTreeNode.prototype = {\n  constructor: TreeNode,\n\n  /**\n   * The node is removed.\n   * @return {boolean} is removed.\n   */\n  isRemoved: function () {\n    return this.dataIndex < 0;\n  },\n\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb If in preorder and return false,\n   *                      its subtree will not be visited.\n   * @param {Object} [context]\n   */\n  eachNode: function (options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  },\n\n  /**\n   * Update depth and height of this subtree.\n   *\n   * @param  {number} depth\n   */\n  updateDepthAndHeight: function (depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  },\n\n  /**\n   * @param  {string} id\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeById: function (id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\n   * @param {module:echarts/data/Tree~TreeNode} node\n   * @return {boolean}\n   */\n  contains: function (node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\n   * @param {boolean} includeSelf Default false.\n   * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]\n   */\n  getAncestors: function (includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  },\n\n  /**\n   * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3\n   * @return {number} Value.\n   */\n  getValue: function (dimension) {\n    var data = this.hostTree.data;\n    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n  },\n\n  /**\n   * @param {Object} layout\n   * @param {boolean=} [merge=false]\n   */\n  setLayout: function (layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  },\n\n  /**\n   * @return {Object} layout\n   */\n  getLayout: function () {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  },\n\n  /**\n   * @param {string} [path]\n   * @return {module:echarts/model/Model}\n   */\n  getModel: function (path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    var levelModel = this.getLevelModel();\n    var leavesModel;\n\n    if (!levelModel && (this.children.length === 0 || this.children.length !== 0 && this.isExpand === false)) {\n      leavesModel = this.getLeavesModel();\n    }\n\n    return itemModel.getModel(path, (levelModel || leavesModel || hostTree.hostModel).getModel(path));\n  },\n\n  /**\n   * @return {module:echarts/model/Model}\n   */\n  getLevelModel: function () {\n    return (this.hostTree.levelModels || [])[this.depth];\n  },\n\n  /**\n   * @return {module:echarts/model/Model}\n   */\n  getLeavesModel: function () {\n    return this.hostTree.leavesModel;\n  },\n\n  /**\n   * @example\n   *  setItemVisual('color', color);\n   *  setItemVisual({\n   *      'color': color\n   *  });\n   */\n  setVisual: function (key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  },\n\n  /**\n   * Get item visual\n   */\n  getVisual: function (key, ignoreParent) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);\n  },\n\n  /**\n   * @public\n   * @return {number}\n   */\n  getRawIndex: function () {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  },\n\n  /**\n   * @public\n   * @return {string}\n   */\n  getId: function () {\n    return this.hostTree.data.getId(this.dataIndex);\n  }\n};\n/**\n * @constructor\n * @alias module:echarts/data/Tree\n * @param {module:echarts/model/Model} hostModel\n * @param {Array.<Object>} levelOptions\n * @param {Object} leavesOption\n */\n\nfunction Tree(hostModel, levelOptions, leavesOption) {\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n  this.root;\n  /**\n   * @type {module:echarts/data/List}\n   * @readOnly\n   */\n\n  this.data;\n  /**\n   * Index of each item is the same as the raw index of coresponding list item.\n   * @private\n   * @type {Array.<module:echarts/data/Tree~TreeNode}\n   */\n\n  this._nodes = [];\n  /**\n   * @private\n   * @readOnly\n   * @type {module:echarts/model/Model}\n   */\n\n  this.hostModel = hostModel;\n  /**\n   * @private\n   * @readOnly\n   * @type {Array.<module:echarts/model/Model}\n   */\n\n  this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {\n    return new Model(levelDefine, hostModel, hostModel.ecModel);\n  });\n  this.leavesModel = new Model(leavesOption || {}, hostModel, hostModel.ecModel);\n}\n\nTree.prototype = {\n  constructor: Tree,\n  type: 'tree',\n\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb\n   * @param {Object}   [context]\n   */\n  eachNode: function (options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  },\n\n  /**\n   * @param {number} dataIndex\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByDataIndex: function (dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  },\n\n  /**\n   * @param {string} name\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByName: function (name) {\n    return this.root.getNodeByName(name);\n  },\n\n  /**\n   * Update item available by list,\n   * when list has been performed options like 'filterSelf' or 'map'.\n   */\n  update: function () {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  },\n\n  /**\n   * Clear all layouts\n   */\n  clearLayouts: function () {\n    this.data.clearItemLayouts();\n  }\n};\n/**\n * data node format:\n * {\n *     name: ...\n *     value: ...\n *     children: [\n *         {\n *             name: ...\n *             value: ...\n *             children: ...\n *         },\n *         ...\n *     ]\n * }\n *\n * @static\n * @param {Object} dataRoot Root node.\n * @param {module:echarts/model/Model} hostModel\n * @param {Object} treeOptions\n * @param {Array.<Object>} treeOptions.levels\n * @param {Array.<Object>} treeOptions.leaves\n * @return module:echarts/data/Tree\n */\n\nTree.createTree = function (dataRoot, hostModel, treeOptions) {\n  var tree = new Tree(hostModel, treeOptions.levels, treeOptions.leaves);\n  var listData = [];\n  var dimMax = 1;\n  buildHierarchy(dataRoot);\n\n  function buildHierarchy(dataNode, parentNode) {\n    var value = dataNode.value;\n    dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n    listData.push(dataNode);\n    var node = new TreeNode(dataNode.name, tree);\n    parentNode ? addChild(node, parentNode) : tree.root = node;\n\n    tree._nodes.push(node);\n\n    var children = dataNode.children;\n\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        buildHierarchy(children[i], node);\n      }\n    }\n  }\n\n  tree.root.updateDepthAndHeight(0);\n  var dimensions = completeDimensions([{\n    name: 'value'\n  }], listData, {\n    dimCount: dimMax\n  });\n  var list = new List(dimensions, hostModel);\n  list.initData(listData);\n  linkList({\n    mainData: list,\n    struct: tree,\n    structAttr: 'tree'\n  });\n  tree.update();\n  return tree;\n};\n/**\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n * so this function is not ready and not necessary to be public.\n *\n * @param {(module:echarts/data/Tree~TreeNode|Object)} child\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nvar _default = Tree;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/data/Tree.js"],"names":["zrUtil","require","Model","List","linkList","completeDimensions","TreeNode","name","hostTree","depth","height","parentNode","dataIndex","children","viewChildren","prototype","constructor","isRemoved","eachNode","options","cb","context","isString","order","attr","suppressVisitSub","call","i","length","updateDepthAndHeight","child","getNodeById","id","getId","len","res","contains","node","getAncestors","includeSelf","ancestors","push","reverse","getValue","dimension","data","get","getDimension","setLayout","layout","merge","setItemLayout","getLayout","getItemLayout","getModel","path","itemModel","getItemModel","levelModel","getLevelModel","leavesModel","isExpand","getLeavesModel","hostModel","levelModels","setVisual","key","value","setItemVisual","getVisual","ignoreParent","getItemVisual","getRawIndex","Tree","levelOptions","leavesOption","root","_nodes","map","levelDefine","ecModel","type","getNodeByDataIndex","rawIndex","getNodeByName","update","nodes","count","clearLayouts","clearItemLayouts","createTree","dataRoot","treeOptions","tree","levels","leaves","listData","dimMax","buildHierarchy","dataNode","Math","max","isArray","addChild","dimensions","dimCount","list","initData","mainData","struct","structAttr","_default","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIE,IAAI,GAAGF,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,mBAAD,CAAtB;;AAEA,IAAII,kBAAkB,GAAGJ,OAAO,CAAC,6BAAD,CAAhC;AAEA;;;;;;AAMA;;;;;;;AAKA,IAAIK,QAAQ,GAAG,UAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AACvC;;;AAGA,OAAKD,IAAL,GAAYA,IAAI,IAAI,EAApB;AACA;;;;;;;AAOA,OAAKE,KAAL,GAAa,CAAb;AACA;;;;;;AAMA,OAAKC,MAAL,GAAc,CAAd;AACA;;;;;AAKA,OAAKC,UAAL,GAAkB,IAAlB;AACA;;;;;;;;;;;AAWA,OAAKC,SAAL,GAAiB,CAAC,CAAlB;AACA;;;;;AAKA,OAAKC,QAAL,GAAgB,EAAhB;AACA;;;;;AAKA,OAAKC,YAAL,GAAoB,EAApB;AACA;;;;;AAKA,OAAKN,QAAL,GAAgBA,QAAhB;AACD,CAxDD;;AA0DAF,QAAQ,CAACS,SAAT,GAAqB;AACnBC,EAAAA,WAAW,EAAEV,QADM;;AAGnB;;;;AAIAW,EAAAA,SAAS,EAAE,YAAY;AACrB,WAAO,KAAKL,SAAL,GAAiB,CAAxB;AACD,GATkB;;AAWnB;;;;;;;;;;;;;;;;;;AAkBAM,EAAAA,QAAQ,EAAE,UAAUC,OAAV,EAAmBC,EAAnB,EAAuBC,OAAvB,EAAgC;AACxC,QAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AACjCE,MAAAA,OAAO,GAAGD,EAAV;AACAA,MAAAA,EAAE,GAAGD,OAAL;AACAA,MAAAA,OAAO,GAAG,IAAV;AACD;;AAEDA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,QAAInB,MAAM,CAACsB,QAAP,CAAgBH,OAAhB,CAAJ,EAA8B;AAC5BA,MAAAA,OAAO,GAAG;AACRI,QAAAA,KAAK,EAAEJ;AADC,OAAV;AAGD;;AAED,QAAII,KAAK,GAAGJ,OAAO,CAACI,KAAR,IAAiB,UAA7B;AACA,QAAIV,QAAQ,GAAG,KAAKM,OAAO,CAACK,IAAR,IAAgB,UAArB,CAAf;AACA,QAAIC,gBAAJ;AACAF,IAAAA,KAAK,KAAK,UAAV,KAAyBE,gBAAgB,GAAGL,EAAE,CAACM,IAAH,CAAQL,OAAR,EAAiB,IAAjB,CAA5C;;AAEA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgB,CAACF,gBAAD,IAAqBE,CAAC,GAAGd,QAAQ,CAACe,MAAlD,EAA0DD,CAAC,EAA3D,EAA+D;AAC7Dd,MAAAA,QAAQ,CAACc,CAAD,CAAR,CAAYT,QAAZ,CAAqBC,OAArB,EAA8BC,EAA9B,EAAkCC,OAAlC;AACD;;AAEDE,IAAAA,KAAK,KAAK,WAAV,IAAyBH,EAAE,CAACM,IAAH,CAAQL,OAAR,EAAiB,IAAjB,CAAzB;AACD,GAtDkB;;AAwDnB;;;;;AAKAQ,EAAAA,oBAAoB,EAAE,UAAUpB,KAAV,EAAiB;AACrC,QAAIC,MAAM,GAAG,CAAb;AACA,SAAKD,KAAL,GAAaA,KAAb;;AAEA,SAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKd,QAAL,CAAce,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,UAAIG,KAAK,GAAG,KAAKjB,QAAL,CAAcc,CAAd,CAAZ;AACAG,MAAAA,KAAK,CAACD,oBAAN,CAA2BpB,KAAK,GAAG,CAAnC;;AAEA,UAAIqB,KAAK,CAACpB,MAAN,GAAeA,MAAnB,EAA2B;AACzBA,QAAAA,MAAM,GAAGoB,KAAK,CAACpB,MAAf;AACD;AACF;;AAED,SAAKA,MAAL,GAAcA,MAAM,GAAG,CAAvB;AACD,GA3EkB;;AA6EnB;;;;AAIAqB,EAAAA,WAAW,EAAE,UAAUC,EAAV,EAAc;AACzB,QAAI,KAAKC,KAAL,OAAiBD,EAArB,EAAyB;AACvB,aAAO,IAAP;AACD;;AAED,SAAK,IAAIL,CAAC,GAAG,CAAR,EAAWd,QAAQ,GAAG,KAAKA,QAA3B,EAAqCqB,GAAG,GAAGrB,QAAQ,CAACe,MAAzD,EAAiED,CAAC,GAAGO,GAArE,EAA0EP,CAAC,EAA3E,EAA+E;AAC7E,UAAIQ,GAAG,GAAGtB,QAAQ,CAACc,CAAD,CAAR,CAAYI,WAAZ,CAAwBC,EAAxB,CAAV;;AAEA,UAAIG,GAAJ,EAAS;AACP,eAAOA,GAAP;AACD;AACF;AACF,GA7FkB;;AA+FnB;;;;AAIAC,EAAAA,QAAQ,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,SAAK,IAAIV,CAAC,GAAG,CAAR,EAAWd,QAAQ,GAAG,KAAKA,QAA3B,EAAqCqB,GAAG,GAAGrB,QAAQ,CAACe,MAAzD,EAAiED,CAAC,GAAGO,GAArE,EAA0EP,CAAC,EAA3E,EAA+E;AAC7E,UAAIQ,GAAG,GAAGtB,QAAQ,CAACc,CAAD,CAAR,CAAYS,QAAZ,CAAqBC,IAArB,CAAV;;AAEA,UAAIF,GAAJ,EAAS;AACP,eAAOA,GAAP;AACD;AACF;AACF,GA/GkB;;AAiHnB;;;;AAIAG,EAAAA,YAAY,EAAE,UAAUC,WAAV,EAAuB;AACnC,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIH,IAAI,GAAGE,WAAW,GAAG,IAAH,GAAU,KAAK5B,UAArC;;AAEA,WAAO0B,IAAP,EAAa;AACXG,MAAAA,SAAS,CAACC,IAAV,CAAeJ,IAAf;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAAC1B,UAAZ;AACD;;AAED6B,IAAAA,SAAS,CAACE,OAAV;AACA,WAAOF,SAAP;AACD,GAhIkB;;AAkInB;;;;AAIAG,EAAAA,QAAQ,EAAE,UAAUC,SAAV,EAAqB;AAC7B,QAAIC,IAAI,GAAG,KAAKrC,QAAL,CAAcqC,IAAzB;AACA,WAAOA,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,YAAL,CAAkBH,SAAS,IAAI,OAA/B,CAAT,EAAkD,KAAKhC,SAAvD,CAAP;AACD,GAzIkB;;AA2InB;;;;AAIAoC,EAAAA,SAAS,EAAE,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AAClC,SAAKtC,SAAL,IAAkB,CAAlB,IAAuB,KAAKJ,QAAL,CAAcqC,IAAd,CAAmBM,aAAnB,CAAiC,KAAKvC,SAAtC,EAAiDqC,MAAjD,EAAyDC,KAAzD,CAAvB;AACD,GAjJkB;;AAmJnB;;;AAGAE,EAAAA,SAAS,EAAE,YAAY;AACrB,WAAO,KAAK5C,QAAL,CAAcqC,IAAd,CAAmBQ,aAAnB,CAAiC,KAAKzC,SAAtC,CAAP;AACD,GAxJkB;;AA0JnB;;;;AAIA0C,EAAAA,QAAQ,EAAE,UAAUC,IAAV,EAAgB;AACxB,QAAI,KAAK3C,SAAL,GAAiB,CAArB,EAAwB;AACtB;AACD;;AAED,QAAIJ,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIgD,SAAS,GAAGhD,QAAQ,CAACqC,IAAT,CAAcY,YAAd,CAA2B,KAAK7C,SAAhC,CAAhB;AACA,QAAI8C,UAAU,GAAG,KAAKC,aAAL,EAAjB;AACA,QAAIC,WAAJ;;AAEA,QAAI,CAACF,UAAD,KAAgB,KAAK7C,QAAL,CAAce,MAAd,KAAyB,CAAzB,IAA8B,KAAKf,QAAL,CAAce,MAAd,KAAyB,CAAzB,IAA8B,KAAKiC,QAAL,KAAkB,KAA9F,CAAJ,EAA0G;AACxGD,MAAAA,WAAW,GAAG,KAAKE,cAAL,EAAd;AACD;;AAED,WAAON,SAAS,CAACF,QAAV,CAAmBC,IAAnB,EAAyB,CAACG,UAAU,IAAIE,WAAd,IAA6BpD,QAAQ,CAACuD,SAAvC,EAAkDT,QAAlD,CAA2DC,IAA3D,CAAzB,CAAP;AACD,GA7KkB;;AA+KnB;;;AAGAI,EAAAA,aAAa,EAAE,YAAY;AACzB,WAAO,CAAC,KAAKnD,QAAL,CAAcwD,WAAd,IAA6B,EAA9B,EAAkC,KAAKvD,KAAvC,CAAP;AACD,GApLkB;;AAsLnB;;;AAGAqD,EAAAA,cAAc,EAAE,YAAY;AAC1B,WAAO,KAAKtD,QAAL,CAAcoD,WAArB;AACD,GA3LkB;;AA6LnB;;;;;;;AAOAK,EAAAA,SAAS,EAAE,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AAC/B,SAAKvD,SAAL,IAAkB,CAAlB,IAAuB,KAAKJ,QAAL,CAAcqC,IAAd,CAAmBuB,aAAnB,CAAiC,KAAKxD,SAAtC,EAAiDsD,GAAjD,EAAsDC,KAAtD,CAAvB;AACD,GAtMkB;;AAwMnB;;;AAGAE,EAAAA,SAAS,EAAE,UAAUH,GAAV,EAAeI,YAAf,EAA6B;AACtC,WAAO,KAAK9D,QAAL,CAAcqC,IAAd,CAAmB0B,aAAnB,CAAiC,KAAK3D,SAAtC,EAAiDsD,GAAjD,EAAsDI,YAAtD,CAAP;AACD,GA7MkB;;AA+MnB;;;;AAIAE,EAAAA,WAAW,EAAE,YAAY;AACvB,WAAO,KAAKhE,QAAL,CAAcqC,IAAd,CAAmB2B,WAAnB,CAA+B,KAAK5D,SAApC,CAAP;AACD,GArNkB;;AAuNnB;;;;AAIAqB,EAAAA,KAAK,EAAE,YAAY;AACjB,WAAO,KAAKzB,QAAL,CAAcqC,IAAd,CAAmBZ,KAAnB,CAAyB,KAAKrB,SAA9B,CAAP;AACD;AA7NkB,CAArB;AA+NA;;;;;;;;AAQA,SAAS6D,IAAT,CAAcV,SAAd,EAAyBW,YAAzB,EAAuCC,YAAvC,EAAqD;AACnD;;;;AAIA,OAAKC,IAAL;AACA;;;;;AAKA,OAAK/B,IAAL;AACA;;;;;;AAMA,OAAKgC,MAAL,GAAc,EAAd;AACA;;;;;;AAMA,OAAKd,SAAL,GAAiBA,SAAjB;AACA;;;;;;AAMA,OAAKC,WAAL,GAAmBhE,MAAM,CAAC8E,GAAP,CAAWJ,YAAY,IAAI,EAA3B,EAA+B,UAAUK,WAAV,EAAuB;AACvE,WAAO,IAAI7E,KAAJ,CAAU6E,WAAV,EAAuBhB,SAAvB,EAAkCA,SAAS,CAACiB,OAA5C,CAAP;AACD,GAFkB,CAAnB;AAGA,OAAKpB,WAAL,GAAmB,IAAI1D,KAAJ,CAAUyE,YAAY,IAAI,EAA1B,EAA8BZ,SAA9B,EAAyCA,SAAS,CAACiB,OAAnD,CAAnB;AACD;;AAEDP,IAAI,CAAC1D,SAAL,GAAiB;AACfC,EAAAA,WAAW,EAAEyD,IADE;AAEfQ,EAAAA,IAAI,EAAE,MAFS;;AAIf;;;;;;;;;;;;;;;;;AAiBA/D,EAAAA,QAAQ,EAAE,UAAUC,OAAV,EAAmBC,EAAnB,EAAuBC,OAAvB,EAAgC;AACxC,SAAKuD,IAAL,CAAU1D,QAAV,CAAmBC,OAAnB,EAA4BC,EAA5B,EAAgCC,OAAhC;AACD,GAvBc;;AAyBf;;;;AAIA6D,EAAAA,kBAAkB,EAAE,UAAUtE,SAAV,EAAqB;AACvC,QAAIuE,QAAQ,GAAG,KAAKtC,IAAL,CAAU2B,WAAV,CAAsB5D,SAAtB,CAAf;AACA,WAAO,KAAKiE,MAAL,CAAYM,QAAZ,CAAP;AACD,GAhCc;;AAkCf;;;;AAIAC,EAAAA,aAAa,EAAE,UAAU7E,IAAV,EAAgB;AAC7B,WAAO,KAAKqE,IAAL,CAAUQ,aAAV,CAAwB7E,IAAxB,CAAP;AACD,GAxCc;;AA0Cf;;;;AAIA8E,EAAAA,MAAM,EAAE,YAAY;AAClB,QAAIxC,IAAI,GAAG,KAAKA,IAAhB;AACA,QAAIyC,KAAK,GAAG,KAAKT,MAAjB;;AAEA,SAAK,IAAIlD,CAAC,GAAG,CAAR,EAAWO,GAAG,GAAGoD,KAAK,CAAC1D,MAA5B,EAAoCD,CAAC,GAAGO,GAAxC,EAA6CP,CAAC,EAA9C,EAAkD;AAChD2D,MAAAA,KAAK,CAAC3D,CAAD,CAAL,CAASf,SAAT,GAAqB,CAAC,CAAtB;AACD;;AAED,SAAK,IAAIe,CAAC,GAAG,CAAR,EAAWO,GAAG,GAAGW,IAAI,CAAC0C,KAAL,EAAtB,EAAoC5D,CAAC,GAAGO,GAAxC,EAA6CP,CAAC,EAA9C,EAAkD;AAChD2D,MAAAA,KAAK,CAACzC,IAAI,CAAC2B,WAAL,CAAiB7C,CAAjB,CAAD,CAAL,CAA2Bf,SAA3B,GAAuCe,CAAvC;AACD;AACF,GAzDc;;AA2Df;;;AAGA6D,EAAAA,YAAY,EAAE,YAAY;AACxB,SAAK3C,IAAL,CAAU4C,gBAAV;AACD;AAhEc,CAAjB;AAkEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBAhB,IAAI,CAACiB,UAAL,GAAkB,UAAUC,QAAV,EAAoB5B,SAApB,EAA+B6B,WAA/B,EAA4C;AAC5D,MAAIC,IAAI,GAAG,IAAIpB,IAAJ,CAASV,SAAT,EAAoB6B,WAAW,CAACE,MAAhC,EAAwCF,WAAW,CAACG,MAApD,CAAX;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,MAAM,GAAG,CAAb;AACAC,EAAAA,cAAc,CAACP,QAAD,CAAd;;AAEA,WAASO,cAAT,CAAwBC,QAAxB,EAAkCxF,UAAlC,EAA8C;AAC5C,QAAIwD,KAAK,GAAGgC,QAAQ,CAAChC,KAArB;AACA8B,IAAAA,MAAM,GAAGG,IAAI,CAACC,GAAL,CAASJ,MAAT,EAAiBjG,MAAM,CAACsG,OAAP,CAAenC,KAAf,IAAwBA,KAAK,CAACvC,MAA9B,GAAuC,CAAxD,CAAT;AACAoE,IAAAA,QAAQ,CAACvD,IAAT,CAAc0D,QAAd;AACA,QAAI9D,IAAI,GAAG,IAAI/B,QAAJ,CAAa6F,QAAQ,CAAC5F,IAAtB,EAA4BsF,IAA5B,CAAX;AACAlF,IAAAA,UAAU,GAAG4F,QAAQ,CAAClE,IAAD,EAAO1B,UAAP,CAAX,GAAgCkF,IAAI,CAACjB,IAAL,GAAYvC,IAAtD;;AAEAwD,IAAAA,IAAI,CAAChB,MAAL,CAAYpC,IAAZ,CAAiBJ,IAAjB;;AAEA,QAAIxB,QAAQ,GAAGsF,QAAQ,CAACtF,QAAxB;;AAEA,QAAIA,QAAJ,EAAc;AACZ,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,QAAQ,CAACe,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCuE,QAAAA,cAAc,CAACrF,QAAQ,CAACc,CAAD,CAAT,EAAcU,IAAd,CAAd;AACD;AACF;AACF;;AAEDwD,EAAAA,IAAI,CAACjB,IAAL,CAAU/C,oBAAV,CAA+B,CAA/B;AACA,MAAI2E,UAAU,GAAGnG,kBAAkB,CAAC,CAAC;AACnCE,IAAAA,IAAI,EAAE;AAD6B,GAAD,CAAD,EAE/ByF,QAF+B,EAErB;AACZS,IAAAA,QAAQ,EAAER;AADE,GAFqB,CAAnC;AAKA,MAAIS,IAAI,GAAG,IAAIvG,IAAJ,CAASqG,UAAT,EAAqBzC,SAArB,CAAX;AACA2C,EAAAA,IAAI,CAACC,QAAL,CAAcX,QAAd;AACA5F,EAAAA,QAAQ,CAAC;AACPwG,IAAAA,QAAQ,EAAEF,IADH;AAEPG,IAAAA,MAAM,EAAEhB,IAFD;AAGPiB,IAAAA,UAAU,EAAE;AAHL,GAAD,CAAR;AAKAjB,EAAAA,IAAI,CAACR,MAAL;AACA,SAAOQ,IAAP;AACD,CAvCD;AAwCA;;;;;;;;AAQA,SAASU,QAAT,CAAkBzE,KAAlB,EAAyBO,IAAzB,EAA+B;AAC7B,MAAIxB,QAAQ,GAAGwB,IAAI,CAACxB,QAApB;;AAEA,MAAIiB,KAAK,CAACnB,UAAN,KAAqB0B,IAAzB,EAA+B;AAC7B;AACD;;AAEDxB,EAAAA,QAAQ,CAAC4B,IAAT,CAAcX,KAAd;AACAA,EAAAA,KAAK,CAACnB,UAAN,GAAmB0B,IAAnB;AACD;;AAED,IAAI0E,QAAQ,GAAGtC,IAAf;AACAuC,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar Model = require(\"../model/Model\");\n\nvar List = require(\"./List\");\n\nvar linkList = require(\"./helper/linkList\");\n\nvar completeDimensions = require(\"./helper/completeDimensions\");\n\n/**\n * Tree data structure\n *\n * @module echarts/data/Tree\n */\n\n/**\n * @constructor module:echarts/data/Tree~TreeNode\n * @param {string} name\n * @param {module:echarts/data/Tree} hostTree\n */\nvar TreeNode = function (name, hostTree) {\n  /**\n   * @type {string}\n   */\n  this.name = name || '';\n  /**\n   * Depth of node\n   *\n   * @type {number}\n   * @readOnly\n   */\n\n  this.depth = 0;\n  /**\n   * Height of the subtree rooted at this node.\n   * @type {number}\n   * @readOnly\n   */\n\n  this.height = 0;\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n\n  this.parentNode = null;\n  /**\n   * Reference to list item.\n   * Do not persistent dataIndex outside,\n   * besause it may be changed by list.\n   * If dataIndex -1,\n   * this node is logical deleted (filtered) in list.\n   *\n   * @type {Object}\n   * @readOnly\n   */\n\n  this.dataIndex = -1;\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @readOnly\n   */\n\n  this.children = [];\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @pubilc\n   */\n\n  this.viewChildren = [];\n  /**\n   * @type {moduel:echarts/data/Tree}\n   * @readOnly\n   */\n\n  this.hostTree = hostTree;\n};\n\nTreeNode.prototype = {\n  constructor: TreeNode,\n\n  /**\n   * The node is removed.\n   * @return {boolean} is removed.\n   */\n  isRemoved: function () {\n    return this.dataIndex < 0;\n  },\n\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb If in preorder and return false,\n   *                      its subtree will not be visited.\n   * @param {Object} [context]\n   */\n  eachNode: function (options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  },\n\n  /**\n   * Update depth and height of this subtree.\n   *\n   * @param  {number} depth\n   */\n  updateDepthAndHeight: function (depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  },\n\n  /**\n   * @param  {string} id\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeById: function (id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\n   * @param {module:echarts/data/Tree~TreeNode} node\n   * @return {boolean}\n   */\n  contains: function (node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\n   * @param {boolean} includeSelf Default false.\n   * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]\n   */\n  getAncestors: function (includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  },\n\n  /**\n   * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3\n   * @return {number} Value.\n   */\n  getValue: function (dimension) {\n    var data = this.hostTree.data;\n    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n  },\n\n  /**\n   * @param {Object} layout\n   * @param {boolean=} [merge=false]\n   */\n  setLayout: function (layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  },\n\n  /**\n   * @return {Object} layout\n   */\n  getLayout: function () {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  },\n\n  /**\n   * @param {string} [path]\n   * @return {module:echarts/model/Model}\n   */\n  getModel: function (path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    var levelModel = this.getLevelModel();\n    var leavesModel;\n\n    if (!levelModel && (this.children.length === 0 || this.children.length !== 0 && this.isExpand === false)) {\n      leavesModel = this.getLeavesModel();\n    }\n\n    return itemModel.getModel(path, (levelModel || leavesModel || hostTree.hostModel).getModel(path));\n  },\n\n  /**\n   * @return {module:echarts/model/Model}\n   */\n  getLevelModel: function () {\n    return (this.hostTree.levelModels || [])[this.depth];\n  },\n\n  /**\n   * @return {module:echarts/model/Model}\n   */\n  getLeavesModel: function () {\n    return this.hostTree.leavesModel;\n  },\n\n  /**\n   * @example\n   *  setItemVisual('color', color);\n   *  setItemVisual({\n   *      'color': color\n   *  });\n   */\n  setVisual: function (key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  },\n\n  /**\n   * Get item visual\n   */\n  getVisual: function (key, ignoreParent) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);\n  },\n\n  /**\n   * @public\n   * @return {number}\n   */\n  getRawIndex: function () {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  },\n\n  /**\n   * @public\n   * @return {string}\n   */\n  getId: function () {\n    return this.hostTree.data.getId(this.dataIndex);\n  }\n};\n/**\n * @constructor\n * @alias module:echarts/data/Tree\n * @param {module:echarts/model/Model} hostModel\n * @param {Array.<Object>} levelOptions\n * @param {Object} leavesOption\n */\n\nfunction Tree(hostModel, levelOptions, leavesOption) {\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n  this.root;\n  /**\n   * @type {module:echarts/data/List}\n   * @readOnly\n   */\n\n  this.data;\n  /**\n   * Index of each item is the same as the raw index of coresponding list item.\n   * @private\n   * @type {Array.<module:echarts/data/Tree~TreeNode}\n   */\n\n  this._nodes = [];\n  /**\n   * @private\n   * @readOnly\n   * @type {module:echarts/model/Model}\n   */\n\n  this.hostModel = hostModel;\n  /**\n   * @private\n   * @readOnly\n   * @type {Array.<module:echarts/model/Model}\n   */\n\n  this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {\n    return new Model(levelDefine, hostModel, hostModel.ecModel);\n  });\n  this.leavesModel = new Model(leavesOption || {}, hostModel, hostModel.ecModel);\n}\n\nTree.prototype = {\n  constructor: Tree,\n  type: 'tree',\n\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb\n   * @param {Object}   [context]\n   */\n  eachNode: function (options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  },\n\n  /**\n   * @param {number} dataIndex\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByDataIndex: function (dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  },\n\n  /**\n   * @param {string} name\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByName: function (name) {\n    return this.root.getNodeByName(name);\n  },\n\n  /**\n   * Update item available by list,\n   * when list has been performed options like 'filterSelf' or 'map'.\n   */\n  update: function () {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  },\n\n  /**\n   * Clear all layouts\n   */\n  clearLayouts: function () {\n    this.data.clearItemLayouts();\n  }\n};\n/**\n * data node format:\n * {\n *     name: ...\n *     value: ...\n *     children: [\n *         {\n *             name: ...\n *             value: ...\n *             children: ...\n *         },\n *         ...\n *     ]\n * }\n *\n * @static\n * @param {Object} dataRoot Root node.\n * @param {module:echarts/model/Model} hostModel\n * @param {Object} treeOptions\n * @param {Array.<Object>} treeOptions.levels\n * @param {Array.<Object>} treeOptions.leaves\n * @return module:echarts/data/Tree\n */\n\nTree.createTree = function (dataRoot, hostModel, treeOptions) {\n  var tree = new Tree(hostModel, treeOptions.levels, treeOptions.leaves);\n  var listData = [];\n  var dimMax = 1;\n  buildHierarchy(dataRoot);\n\n  function buildHierarchy(dataNode, parentNode) {\n    var value = dataNode.value;\n    dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n    listData.push(dataNode);\n    var node = new TreeNode(dataNode.name, tree);\n    parentNode ? addChild(node, parentNode) : tree.root = node;\n\n    tree._nodes.push(node);\n\n    var children = dataNode.children;\n\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        buildHierarchy(children[i], node);\n      }\n    }\n  }\n\n  tree.root.updateDepthAndHeight(0);\n  var dimensions = completeDimensions([{\n    name: 'value'\n  }], listData, {\n    dimCount: dimMax\n  });\n  var list = new List(dimensions, hostModel);\n  list.initData(listData);\n  linkList({\n    mainData: list,\n    struct: tree,\n    structAttr: 'tree'\n  });\n  tree.update();\n  return tree;\n};\n/**\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n * so this function is not ready and not necessary to be public.\n *\n * @param {(module:echarts/data/Tree~TreeNode|Object)} child\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nvar _default = Tree;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}