{"ast":null,"code":"var _jsxFileName = \"/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ExchangeDetail from './components/ExchangeDetail';\nimport io from 'socket.io-client';\nconst server = 'wss://le-18262636.bitzonte.com';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      stock_exchange: {},\n      exchanges: [],\n      is_loading: true,\n      prueba: [],\n      updates: {}\n    };\n  }\n\n  componentDidMount() {\n    const socket = io(server, {\n      path: '/stocks'\n    });\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', data => {\n      socket.emit('STOCKS');\n      socket.on('STOCKS', stocks_info => {\n        const exchange_info = Object.entries(data).map(([key, value]) => {\n          return value;\n        });\n        exchange_info.map(exchange => {\n          exchange.listed_companies.map(comp => {\n            stocks_info.map(stock => {\n              if (comp === stock.company_name) {\n                this.setState({\n                  stock_exchange: {\n                    [stock.ticker]: exchange.name,\n                    ...this.state.stock_exchange\n                  }\n                });\n              }\n            });\n          });\n        });\n        this.setState({\n          exchanges: Object.entries(data).map(([key, value]) => {\n            return {\n              name: value.name,\n              exchange_ticker: value.exchange_ticker,\n              stocks: value.listed_companies.map(company => {\n                var tick = '';\n                stocks_info.map(stock => {\n                  if (company === stock.company_name) {\n                    tick = stock.ticker;\n                  }\n                });\n                return {\n                  company: company,\n                  update: [],\n                  update_time: [],\n                  buy: [],\n                  sell: [],\n                  ticker: tick\n                };\n              })\n            };\n          })\n        });\n        stocks_info.map(stock => {\n          this.setState({\n            updates: {\n              [stock.ticker]: {\n                'alto': 0,\n                'bajo': 1n,\n                'last': 0\n              },\n              ...this.state.updates\n            }\n          });\n        });\n      });\n    });\n    socket.on('UPDATE', data => {\n      var exchange_input = this.state.stock_exchange[data.ticker];\n      this.state.exchanges.map(exchange => {\n        if (exchange.name === exchange_input) {\n          exchange.stocks.map(stock => {\n            if (stock.ticker === data.ticker) {\n              stock.update.push({\n                date: data.time,\n                value: data.value\n              });\n            }\n          });\n        }\n      });\n      var ticker = this.state.updates[data.ticker];\n      console.log(ticker.alto); //this.state.updates[data.ticker]['last'] = data.value;\n      // if(data.value > this.state.updates[data.ticker]['alto']) {\n      //   this.state.updates[data.ticker]['alto'] = data.value;\n      // } \n      // else if(data.value < this.state.updates[data.ticker]['bajo']) {\n      //   this.state.updates[data.ticker]['bajo'] = data.value;\n      // }\n\n      console.log(this.state.updates[data.ticker]);\n      this.setState({\n        prueba: [{\n          date: data.time,\n          value: data.value\n        }, ...this.state.prueba]\n      }); //console.log(this.state.prueba)\n      //console.log(this.state.updates)\n    });\n    socket.on('BUY', data => {//console.log(data);\n    });\n    socket.on('SELL', data => {//console.log(data);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"exchanges\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, this.state.exchanges.map(exchange => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"exchange col-md-12\",\n        key: exchange.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ExchangeDetail, {\n        key: exchange.name,\n        exchange: exchange,\n        prueba: this.state.prueba,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }\n      }));\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/App.js"],"names":["React","Component","ExchangeDetail","io","server","App","constructor","state","stock_exchange","exchanges","is_loading","prueba","updates","componentDidMount","socket","path","emit","on","data","stocks_info","exchange_info","Object","entries","map","key","value","exchange","listed_companies","comp","stock","company_name","setState","ticker","name","exchange_ticker","stocks","company","tick","update","update_time","buy","sell","exchange_input","push","date","time","console","log","alto","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport ExchangeDetail from './components/ExchangeDetail';\n\nimport io from 'socket.io-client'\n\n\nconst server = 'wss://le-18262636.bitzonte.com';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n\n    this.state = {\n      stock_exchange: {},\n      exchanges: [],\n      is_loading: true,\n      prueba: [],\n      updates: {}\n    };    \n  }\n\n  componentDidMount() {\n      const socket = io(server, {  \n        path: '/stocks'\n      });\n     \n      socket.emit('EXCHANGES')\n      socket.on('EXCHANGES', (data) => {\n        socket.emit('STOCKS');\n        socket.on('STOCKS', (stocks_info) => {\n          const exchange_info = Object.entries(data).map(([key,value])=>{return(value)});\n          exchange_info.map(exchange => {\n            exchange.listed_companies.map(comp => {\n              stocks_info.map(stock => {\n                if(comp === stock.company_name) {\n                  this.setState({stock_exchange: {[stock.ticker]: exchange.name, ...this.state.stock_exchange}})\n                }\n              })\n            })\n          })\n\n          this.setState({exchanges: Object.entries(data).map(([key,value])=>{\n              \n              return({\n                name: value.name,\n                exchange_ticker: value.exchange_ticker,\n                stocks: \n                  value.listed_companies.map(company => {\n                    var tick = '';\n                    stocks_info.map(stock => {\n                      if (company === stock.company_name){\n                        tick = stock.ticker;\n                      }\n                    })\n                    return {\n                      company: company,\n                      update: [],\n                      update_time: [],\n                      buy: [],\n                      sell: [],\n                      ticker: tick,\n                    }\n                  }),\n                \n                \n              })\n            })\n          });\n        \n          stocks_info.map(stock => {\n            this.setState({updates: {[stock.ticker]: {'alto': 0, 'bajo': 1n, 'last': 0}, ...this.state.updates}})\n          })\n          \n        \n        \n        });\n      });\n\n      socket.on('UPDATE', (data) => {\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n            exchange.stocks.map(stock => {\n              if(stock.ticker === data.ticker) {\n                stock.update.push({date: data.time, value: data.value })\n              }\n            })\n          }\n        });\n\n        var ticker = this.state.updates[data.ticker]\n        console.log(ticker.alto)\n        //this.state.updates[data.ticker]['last'] = data.value;\n        // if(data.value > this.state.updates[data.ticker]['alto']) {\n        //   this.state.updates[data.ticker]['alto'] = data.value;\n        // } \n        // else if(data.value < this.state.updates[data.ticker]['bajo']) {\n        //   this.state.updates[data.ticker]['bajo'] = data.value;\n        // }\n\n        console.log(this.state.updates[data.ticker])\n\n        this.setState({prueba: [{date: data.time, value: data.value }, ...this.state.prueba] })\n\n        //console.log(this.state.prueba)\n\n        \n        //console.log(this.state.updates)\n\n        \n\n      });\n\n      socket.on('BUY', (data) => {\n        //console.log(data);\n      });\n\n      socket.on('SELL', (data) => {\n        //console.log(data);\n      });\n  }\n\n\n  \n  render() {\n    return(\n      <div className=\"App\">\n        <div className=\"exchanges\">\n          {this.state.exchanges.map(exchange => {\n            return(\n              <div className=\"exchange col-md-12\" key={exchange.name}>\n                <ExchangeDetail\n                  key={exchange.name} \n                  exchange = {exchange}\n                  prueba = {this.state.prueba}\n                />\n              </div>\n            )\n          })}\n        </div>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}