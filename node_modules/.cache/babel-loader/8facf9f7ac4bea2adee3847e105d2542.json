{"ast":null,"code":"var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nfunction _default(ecModel) {\n  ecModel.eachSeriesByType('lines', function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n    var lineData = seriesModel.getData(); // FIXME Use data dimensions ?\n\n    lineData.each(function (idx) {\n      var itemModel = lineData.getItemModel(idx);\n      var coords = itemModel.option instanceof Array ? itemModel.option : itemModel.get('coords');\n      var pts = [];\n\n      if (seriesModel.get('polyline')) {\n        for (var i = 0; i < coords.length; i++) {\n          pts.push(coordSys.dataToPoint(coords[i]));\n        }\n      } else {\n        pts[0] = coordSys.dataToPoint(coords[0]);\n        pts[1] = coordSys.dataToPoint(coords[1]);\n        var curveness = itemModel.get('lineStyle.normal.curveness');\n\n        if (+curveness) {\n          pts[2] = [(pts[0][0] + pts[1][0]) / 2 - (pts[0][1] - pts[1][1]) * curveness, (pts[0][1] + pts[1][1]) / 2 - (pts[1][0] - pts[0][0]) * curveness];\n        }\n      }\n\n      lineData.setItemLayout(idx, pts);\n    });\n  });\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/lines/linesLayout.js"],"names":["_config","require","__DEV__","_default","ecModel","eachSeriesByType","seriesModel","coordSys","coordinateSystem","lineData","getData","each","idx","itemModel","getItemModel","coords","option","Array","get","pts","i","length","push","dataToPoint","curveness","setItemLayout","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIC,OAAO,GAAGF,OAAO,CAACE,OAAtB;;AAEA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACzBA,EAAAA,OAAO,CAACC,gBAAR,CAAyB,OAAzB,EAAkC,UAAUC,WAAV,EAAuB;AACvD,QAAIC,QAAQ,GAAGD,WAAW,CAACE,gBAA3B;AACA,QAAIC,QAAQ,GAAGH,WAAW,CAACI,OAAZ,EAAf,CAFuD,CAEjB;;AAEtCD,IAAAA,QAAQ,CAACE,IAAT,CAAc,UAAUC,GAAV,EAAe;AAC3B,UAAIC,SAAS,GAAGJ,QAAQ,CAACK,YAAT,CAAsBF,GAAtB,CAAhB;AACA,UAAIG,MAAM,GAAGF,SAAS,CAACG,MAAV,YAA4BC,KAA5B,GAAoCJ,SAAS,CAACG,MAA9C,GAAuDH,SAAS,CAACK,GAAV,CAAc,QAAd,CAApE;AACA,UAAIC,GAAG,GAAG,EAAV;;AAEA,UAAIb,WAAW,CAACY,GAAZ,CAAgB,UAAhB,CAAJ,EAAiC;AAC/B,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCD,UAAAA,GAAG,CAACG,IAAJ,CAASf,QAAQ,CAACgB,WAAT,CAAqBR,MAAM,CAACK,CAAD,CAA3B,CAAT;AACD;AACF,OAJD,MAIO;AACLD,QAAAA,GAAG,CAAC,CAAD,CAAH,GAASZ,QAAQ,CAACgB,WAAT,CAAqBR,MAAM,CAAC,CAAD,CAA3B,CAAT;AACAI,QAAAA,GAAG,CAAC,CAAD,CAAH,GAASZ,QAAQ,CAACgB,WAAT,CAAqBR,MAAM,CAAC,CAAD,CAA3B,CAAT;AACA,YAAIS,SAAS,GAAGX,SAAS,CAACK,GAAV,CAAc,4BAAd,CAAhB;;AAEA,YAAI,CAACM,SAAL,EAAgB;AACdL,UAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,CAACA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAb,IAA0B,CAA1B,GAA8B,CAACA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAb,IAA0BK,SAAzD,EAAoE,CAACL,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAb,IAA0B,CAA1B,GAA8B,CAACA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAYA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAAb,IAA0BK,SAA5H,CAAT;AACD;AACF;;AAEDf,MAAAA,QAAQ,CAACgB,aAAT,CAAuBb,GAAvB,EAA4BO,GAA5B;AACD,KApBD;AAqBD,GAzBD;AA0BD;;AAEDO,MAAM,CAACC,OAAP,GAAiBxB,QAAjB","sourcesContent":["var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nfunction _default(ecModel) {\n  ecModel.eachSeriesByType('lines', function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n    var lineData = seriesModel.getData(); // FIXME Use data dimensions ?\n\n    lineData.each(function (idx) {\n      var itemModel = lineData.getItemModel(idx);\n      var coords = itemModel.option instanceof Array ? itemModel.option : itemModel.get('coords');\n      var pts = [];\n\n      if (seriesModel.get('polyline')) {\n        for (var i = 0; i < coords.length; i++) {\n          pts.push(coordSys.dataToPoint(coords[i]));\n        }\n      } else {\n        pts[0] = coordSys.dataToPoint(coords[0]);\n        pts[1] = coordSys.dataToPoint(coords[1]);\n        var curveness = itemModel.get('lineStyle.normal.curveness');\n\n        if (+curveness) {\n          pts[2] = [(pts[0][0] + pts[1][0]) / 2 - (pts[0][1] - pts[1][1]) * curveness, (pts[0][1] + pts[1][1]) / 2 - (pts[1][0] - pts[0][0]) * curveness];\n        }\n      }\n\n      lineData.setItemLayout(idx, pts);\n    });\n  });\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}