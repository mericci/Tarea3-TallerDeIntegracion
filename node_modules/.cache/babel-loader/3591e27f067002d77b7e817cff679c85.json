{"ast":null,"code":"var _jsxFileName = \"/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart.jsx\";\nimport React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nam4core.useTheme(am4themes_animated);\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    let chart = am4core.create(this.props.company, am4charts.XYChart);\n    chart.data = this.props.data;\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n    series.tooltipText = \"{valueY.value}\";\n    chart.cursor = new am4charts.XYCursor(); // let scrollbarX = new am4charts.XYChartScrollbar();\n    // scrollbarX.series.push(series);\n    // chart.scrollbarX = scrollbarX;\n\n    this.chart = chart;\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log('ll');\n\n    if (this.props.data !== prevProps.data) {\n      console.log('correcto');\n    }\n  }\n\n  render() {\n    var option = {\n      title: {\n        text: this.props.title,\n        textStyle: {\n          color: '#FFF'\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        // formatter: function (params) {\n        //     params = params[0];\n        //     var date = new Date(params.name);\n        //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n        // },\n        axisPointer: {\n          animation: false\n        }\n      },\n      xAxis: {\n        type: 'time',\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#FFF'\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: [0, '100%'],\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#FFF'\n          }\n        }\n      },\n      series: [{\n        name: 'CHART',\n        type: 'line',\n        showSymbol: false,\n        hoverAnimation: false,\n        data: this.props.data\n      }]\n    };\n    setInterval(function () {\n      let charts = echarts.init(document.getElementById('chart'));\n      option.series = [{\n        name: 'CHART',\n        type: 'line',\n        showSymbol: false,\n        hoverAnimation: false\n      }];\n      charts.setOption(option);\n    }, 1000);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: this.props.company,\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ReactEcharts, {\n      option: option,\n      style: {\n        height: 360\n      },\n      opts: {\n        renderer: 'svg'\n      } //onChartReady={setInterval}\n      ,\n      notMerge: true,\n      lazyUpdate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\n;\nexport default Chart;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart.jsx"],"names":["React","Component","ReactEcharts","echarts","am4core","am4charts","am4themes_animated","useTheme","Chart","constructor","props","state","componentDidMount","chart","create","company","XYChart","data","dateAxis","xAxes","push","DateAxis","renderer","grid","template","location","valueAxis","yAxes","ValueAxis","tooltip","disabled","minWidth","series","LineSeries","dataFields","dateX","valueY","tooltipText","cursor","XYCursor","componentDidUpdate","prevProps","console","log","render","option","title","text","textStyle","color","trigger","axisPointer","animation","xAxis","type","splitLine","show","axisLine","lineStyle","yAxis","boundaryGap","name","showSymbol","hoverAnimation","setInterval","charts","init","document","getElementById","setOption","width","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\n\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n\n        };    \n    };\n\n    componentDidMount() {\n        let chart = am4core.create(this.props.company, am4charts.XYChart);\n        \n        chart.data = this.props.data;\n\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n        dateAxis.renderer.grid.template.location = 0;\n    \n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n        valueAxis.tooltip.disabled = true;\n        valueAxis.renderer.minWidth = 35;\n    \n        let series = chart.series.push(new am4charts.LineSeries());\n        series.dataFields.dateX = \"date\";\n        series.dataFields.valueY = \"value\";\n    \n        series.tooltipText = \"{valueY.value}\";\n        chart.cursor = new am4charts.XYCursor();\n    \n        // let scrollbarX = new am4charts.XYChartScrollbar();\n        // scrollbarX.series.push(series);\n        // chart.scrollbarX = scrollbarX;\n        this.chart = chart;\n    };\n    \n\n    componentDidUpdate(prevProps) {\n        console.log('ll');\n        if (this.props.data !== prevProps.data) {\n            console.log('correcto');\n        }\n    }\n\n        \n    render() {\n    \n        var option = {\n            title: {\n                text: this.props.title,\n                textStyle: {\n                    color: '#FFF'\n                }\n            },\n            tooltip: {\n                trigger: 'axis',\n                // formatter: function (params) {\n                //     params = params[0];\n                //     var date = new Date(params.name);\n                //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n                // },\n                axisPointer: {\n                    animation: false\n                }\n            },\n            xAxis: {\n                type: 'time',\n                splitLine: {\n                    show: false\n                },\n                axisLine: {\n                    lineStyle: {\n                        color: '#FFF'\n                    }\n                }\n            },\n            yAxis: {\n                type: 'value',\n                boundaryGap: [0, '100%'],\n                splitLine: {\n                    show: false\n                },\n                axisLine: {\n                    lineStyle: {\n                        color: '#FFF'\n                    }\n                }\n            },\n            series: [{\n                name: 'CHART',\n                type: 'line',\n                showSymbol: false,\n                hoverAnimation: false,\n                data: this.props.data\n            }]\n        };\n\n        setInterval(function () {\n            let charts = echarts.init(document.getElementById('chart'));\n            option.series = [{\n                name: 'CHART',\n                type: 'line',\n                showSymbol: false,\n                hoverAnimation: false\n            }];\n        \n            charts.setOption(option);\n        }, 1000);\n        \n        return (\n            <div>\n                <div id={this.props.company} style={{ width: \"100%\", height: \"500px\" }}></div>\n                <div id=\"chart\">\n                    <ReactEcharts\n                        option={option}\n                        style={{height: 360}}\n                        opts={{renderer: 'svg'}}\n                        //onChartReady={setInterval}\n                        notMerge={true}\n                        lazyUpdate={true}\n    \n                    /> \n                </div>\n            </div>\n        );\n    }\n\n};\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}