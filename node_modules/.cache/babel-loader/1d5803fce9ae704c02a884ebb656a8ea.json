{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar Cartesian = require(\"./Cartesian\");\n\nfunction Cartesian2D(name) {\n  Cartesian.call(this, name);\n}\n\nCartesian2D.prototype = {\n  constructor: Cartesian2D,\n  type: 'cartesian2d',\n\n  /**\n   * @type {Array.<string>}\n   * @readOnly\n   */\n  dimensions: ['x', 'y'],\n\n  /**\n   * Base axis will be used on stacking.\n   *\n   * @return {module:echarts/coord/cartesian/Axis2D}\n   */\n  getBaseAxis: function () {\n    return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAxis('x');\n  },\n\n  /**\n   * If contain point\n   * @param {Array.<number>} point\n   * @return {boolean}\n   */\n  containPoint: function (point) {\n    var axisX = this.getAxis('x');\n    var axisY = this.getAxis('y');\n    return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));\n  },\n\n  /**\n   * If contain data\n   * @param {Array.<number>} data\n   * @return {boolean}\n   */\n  containData: function (data) {\n    return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]);\n  },\n\n  /**\n   * @param {Array.<number>} data\n   * @param {boolean} [clamp=false]\n   * @return {Array.<number>}\n   */\n  dataToPoint: function (data, clamp) {\n    var xAxis = this.getAxis('x');\n    var yAxis = this.getAxis('y');\n    return [xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)), yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))];\n  },\n\n  /**\n   * @param {Array.<number>} point\n   * @param {boolean} [clamp=false]\n   * @return {Array.<number>}\n   */\n  pointToData: function (point, clamp) {\n    var xAxis = this.getAxis('x');\n    var yAxis = this.getAxis('y');\n    return [xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp), yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)];\n  },\n\n  /**\n   * Get other axis\n   * @param {module:echarts/coord/cartesian/Axis2D} axis\n   */\n  getOtherAxis: function (axis) {\n    return this.getAxis(axis.dim === 'x' ? 'y' : 'x');\n  }\n};\nzrUtil.inherits(Cartesian2D, Cartesian);\nvar _default = Cartesian2D;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/coord/cartesian/Cartesian2D.js"],"names":["zrUtil","require","Cartesian","Cartesian2D","name","call","prototype","constructor","type","dimensions","getBaseAxis","getAxesByScale","getAxis","containPoint","point","axisX","axisY","contain","toLocalCoord","containData","data","dataToPoint","clamp","xAxis","yAxis","toGlobalCoord","dataToCoord","pointToData","coordToData","getOtherAxis","axis","dim","inherits","_default","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar Cartesian = require(\"./Cartesian\");\n\nfunction Cartesian2D(name) {\n  Cartesian.call(this, name);\n}\n\nCartesian2D.prototype = {\n  constructor: Cartesian2D,\n  type: 'cartesian2d',\n\n  /**\n   * @type {Array.<string>}\n   * @readOnly\n   */\n  dimensions: ['x', 'y'],\n\n  /**\n   * Base axis will be used on stacking.\n   *\n   * @return {module:echarts/coord/cartesian/Axis2D}\n   */\n  getBaseAxis: function () {\n    return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAxis('x');\n  },\n\n  /**\n   * If contain point\n   * @param {Array.<number>} point\n   * @return {boolean}\n   */\n  containPoint: function (point) {\n    var axisX = this.getAxis('x');\n    var axisY = this.getAxis('y');\n    return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));\n  },\n\n  /**\n   * If contain data\n   * @param {Array.<number>} data\n   * @return {boolean}\n   */\n  containData: function (data) {\n    return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]);\n  },\n\n  /**\n   * @param {Array.<number>} data\n   * @param {boolean} [clamp=false]\n   * @return {Array.<number>}\n   */\n  dataToPoint: function (data, clamp) {\n    var xAxis = this.getAxis('x');\n    var yAxis = this.getAxis('y');\n    return [xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)), yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))];\n  },\n\n  /**\n   * @param {Array.<number>} point\n   * @param {boolean} [clamp=false]\n   * @return {Array.<number>}\n   */\n  pointToData: function (point, clamp) {\n    var xAxis = this.getAxis('x');\n    var yAxis = this.getAxis('y');\n    return [xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp), yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)];\n  },\n\n  /**\n   * Get other axis\n   * @param {module:echarts/coord/cartesian/Axis2D} axis\n   */\n  getOtherAxis: function (axis) {\n    return this.getAxis(axis.dim === 'x' ? 'y' : 'x');\n  }\n};\nzrUtil.inherits(Cartesian2D, Cartesian);\nvar _default = Cartesian2D;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}