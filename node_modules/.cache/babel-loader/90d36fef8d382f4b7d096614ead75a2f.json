{"ast":null,"code":"var echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar BrushController = require(\"../helper/BrushController\");\n\nvar _default = echarts.extendComponentView({\n  type: 'brush',\n  init: function (ecModel, api) {\n    /**\n     * @readOnly\n     * @type {module:echarts/model/Global}\n     */\n    this.ecModel = ecModel;\n    /**\n     * @readOnly\n     * @type {module:echarts/ExtensionAPI}\n     */\n\n    this.api = api;\n    /**\n     * @readOnly\n     * @type {module:echarts/component/brush/BrushModel}\n     */\n\n    this.model;\n    /**\n     * @private\n     * @type {module:echarts/component/helper/BrushController}\n     */\n\n    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();\n  },\n\n  /**\n   * @override\n   */\n  render: function (brushModel) {\n    this.model = brushModel;\n    return updateController.apply(this, arguments);\n  },\n\n  /**\n   * @override\n   */\n  updateView: updateController,\n\n  /**\n   * @override\n   */\n  updateLayout: updateController,\n\n  /**\n   * @override\n   */\n  updateVisual: updateController,\n\n  /**\n   * @override\n   */\n  dispose: function () {\n    this._brushController.dispose();\n  },\n\n  /**\n   * @private\n   */\n  _onBrush: function (areas, opt) {\n    var modelId = this.model.id;\n    this.model.brushTargetManager.setOutputRanges(areas, this.ecModel); // Action is not dispatched on drag end, because the drag end\n    // emits the same params with the last drag move event, and\n    // may have some delay when using touch pad, which makes\n    // animation not smooth (when using debounce).\n\n    (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({\n      type: 'brush',\n      brushId: modelId,\n      areas: zrUtil.clone(areas),\n      $from: modelId\n    });\n  }\n});\n\nfunction updateController(brushModel, ecModel, api, payload) {\n  // Do not update controller when drawing.\n  (!payload || payload.$from !== brushModel.id) && this._brushController.setPanels(brushModel.brushTargetManager.makePanelOpts(api)).enableBrush(brushModel.brushOption).updateCovers(brushModel.areas.slice());\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/brush/BrushView.js"],"names":["echarts","require","zrUtil","BrushController","_default","extendComponentView","type","init","ecModel","api","model","_brushController","getZr","on","bind","_onBrush","mount","render","brushModel","updateController","apply","arguments","updateView","updateLayout","updateVisual","dispose","areas","opt","modelId","id","brushTargetManager","setOutputRanges","isEnd","removeOnClick","dispatchAction","brushId","clone","$from","payload","setPanels","makePanelOpts","enableBrush","brushOption","updateCovers","slice","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIE,eAAe,GAAGF,OAAO,CAAC,2BAAD,CAA7B;;AAEA,IAAIG,QAAQ,GAAGJ,OAAO,CAACK,mBAAR,CAA4B;AACzCC,EAAAA,IAAI,EAAE,OADmC;AAEzCC,EAAAA,IAAI,EAAE,UAAUC,OAAV,EAAmBC,GAAnB,EAAwB;AAC5B;;;;AAIA,SAAKD,OAAL,GAAeA,OAAf;AACA;;;;;AAKA,SAAKC,GAAL,GAAWA,GAAX;AACA;;;;;AAKA,SAAKC,KAAL;AACA;;;;;AAKA,KAAC,KAAKC,gBAAL,GAAwB,IAAIR,eAAJ,CAAoBM,GAAG,CAACG,KAAJ,EAApB,CAAzB,EAA2DC,EAA3D,CAA8D,OAA9D,EAAuEX,MAAM,CAACY,IAAP,CAAY,KAAKC,QAAjB,EAA2B,IAA3B,CAAvE,EAAyGC,KAAzG;AACD,GA1BwC;;AA4BzC;;;AAGAC,EAAAA,MAAM,EAAE,UAAUC,UAAV,EAAsB;AAC5B,SAAKR,KAAL,GAAaQ,UAAb;AACA,WAAOC,gBAAgB,CAACC,KAAjB,CAAuB,IAAvB,EAA6BC,SAA7B,CAAP;AACD,GAlCwC;;AAoCzC;;;AAGAC,EAAAA,UAAU,EAAEH,gBAvC6B;;AAyCzC;;;AAGAI,EAAAA,YAAY,EAAEJ,gBA5C2B;;AA8CzC;;;AAGAK,EAAAA,YAAY,EAAEL,gBAjD2B;;AAmDzC;;;AAGAM,EAAAA,OAAO,EAAE,YAAY;AACnB,SAAKd,gBAAL,CAAsBc,OAAtB;AACD,GAxDwC;;AA0DzC;;;AAGAV,EAAAA,QAAQ,EAAE,UAAUW,KAAV,EAAiBC,GAAjB,EAAsB;AAC9B,QAAIC,OAAO,GAAG,KAAKlB,KAAL,CAAWmB,EAAzB;AACA,SAAKnB,KAAL,CAAWoB,kBAAX,CAA8BC,eAA9B,CAA8CL,KAA9C,EAAqD,KAAKlB,OAA1D,EAF8B,CAEsC;AACpE;AACA;AACA;;AAEA,KAAC,CAACmB,GAAG,CAACK,KAAL,IAAcL,GAAG,CAACM,aAAnB,KAAqC,KAAKxB,GAAL,CAASyB,cAAT,CAAwB;AAC3D5B,MAAAA,IAAI,EAAE,OADqD;AAE3D6B,MAAAA,OAAO,EAAEP,OAFkD;AAG3DF,MAAAA,KAAK,EAAExB,MAAM,CAACkC,KAAP,CAAaV,KAAb,CAHoD;AAI3DW,MAAAA,KAAK,EAAET;AAJoD,KAAxB,CAArC;AAMD;AA1EwC,CAA5B,CAAf;;AA6EA,SAAST,gBAAT,CAA0BD,UAA1B,EAAsCV,OAAtC,EAA+CC,GAA/C,EAAoD6B,OAApD,EAA6D;AAC3D;AACA,GAAC,CAACA,OAAD,IAAYA,OAAO,CAACD,KAAR,KAAkBnB,UAAU,CAACW,EAA1C,KAAiD,KAAKlB,gBAAL,CAAsB4B,SAAtB,CAAgCrB,UAAU,CAACY,kBAAX,CAA8BU,aAA9B,CAA4C/B,GAA5C,CAAhC,EAAkFgC,WAAlF,CAA8FvB,UAAU,CAACwB,WAAzG,EAAsHC,YAAtH,CAAmIzB,UAAU,CAACQ,KAAX,CAAiBkB,KAAjB,EAAnI,CAAjD;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB1C,QAAjB","sourcesContent":["var echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar BrushController = require(\"../helper/BrushController\");\n\nvar _default = echarts.extendComponentView({\n  type: 'brush',\n  init: function (ecModel, api) {\n    /**\n     * @readOnly\n     * @type {module:echarts/model/Global}\n     */\n    this.ecModel = ecModel;\n    /**\n     * @readOnly\n     * @type {module:echarts/ExtensionAPI}\n     */\n\n    this.api = api;\n    /**\n     * @readOnly\n     * @type {module:echarts/component/brush/BrushModel}\n     */\n\n    this.model;\n    /**\n     * @private\n     * @type {module:echarts/component/helper/BrushController}\n     */\n\n    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();\n  },\n\n  /**\n   * @override\n   */\n  render: function (brushModel) {\n    this.model = brushModel;\n    return updateController.apply(this, arguments);\n  },\n\n  /**\n   * @override\n   */\n  updateView: updateController,\n\n  /**\n   * @override\n   */\n  updateLayout: updateController,\n\n  /**\n   * @override\n   */\n  updateVisual: updateController,\n\n  /**\n   * @override\n   */\n  dispose: function () {\n    this._brushController.dispose();\n  },\n\n  /**\n   * @private\n   */\n  _onBrush: function (areas, opt) {\n    var modelId = this.model.id;\n    this.model.brushTargetManager.setOutputRanges(areas, this.ecModel); // Action is not dispatched on drag end, because the drag end\n    // emits the same params with the last drag move event, and\n    // may have some delay when using touch pad, which makes\n    // animation not smooth (when using debounce).\n\n    (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({\n      type: 'brush',\n      brushId: modelId,\n      areas: zrUtil.clone(areas),\n      $from: modelId\n    });\n  }\n});\n\nfunction updateController(brushModel, ecModel, api, payload) {\n  // Do not update controller when drawing.\n  (!payload || payload.$from !== brushModel.id) && this._brushController.setPanels(brushModel.brushTargetManager.makePanelOpts(api)).enableBrush(brushModel.brushOption).updateCovers(brushModel.areas.slice());\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}