{"ast":null,"code":"var _jsxFileName = \"/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart2.jsx\";\nimport React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\n\nclass Chart2 extends Component {\n  constructor(props) {\n    super(props);\n    this.boxRef = React.createRef();\n    this.state = {};\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps) {\n    if (this.props.prueba !== prevProps.prueba) {\n      this.chart.data = this.props.data;\n    }\n  }\n\n  render() {\n    let option = {\n      title: {\n        text: this.props.title,\n        textStyle: {\n          color: '#FFF'\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        // formatter: function (params) {\n        //     params = params[0];\n        //     var date = new Date(params.name);\n        //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n        // },\n        axisPointer: {\n          animation: false\n        }\n      },\n      xAxis: {\n        type: 'time',\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#FFF'\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: [0, '100%'],\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#FFF'\n          }\n        }\n      },\n      series: [{\n        name: 'CHART',\n        type: 'line',\n        showSymbol: false,\n        hoverAnimation: false,\n        data: this.props.data\n      }]\n    };\n\n    const setInterval = () => {\n      console.log(this.boxRef);\n      let charts = echarts.init(document.getElementById(this.boxRef)); //ref={this.boxRef} this.boxRef.current\n\n      this.option.series[0].data = this.props.data;\n      charts.setOption(this.option);\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ReactEcharts, {\n      ref: this.boxRef,\n      option: option,\n      style: {\n        height: 360\n      },\n      opts: {\n        renderer: 'svg'\n      },\n      onChartReady: setInterval,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\n;\nexport default Chart2;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart2.jsx"],"names":["React","Component","ReactEcharts","echarts","Chart2","constructor","props","boxRef","createRef","state","componentDidMount","componentDidUpdate","prevProps","prueba","chart","data","render","option","title","text","textStyle","color","tooltip","trigger","axisPointer","animation","xAxis","type","splitLine","show","axisLine","lineStyle","yAxis","boundaryGap","series","name","showSymbol","hoverAnimation","setInterval","console","log","charts","init","document","getElementById","setOption","height","renderer"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\n\n\n\nclass Chart2 extends Component {\n    constructor(props){\n        super(props);\n        this.boxRef = React.createRef();\n        this.state = {\n\n        };    \n    };\n\n    componentDidMount() {\n       \n    };\n    \n\n    componentDidUpdate(prevProps) {\n\n        if (this.props.prueba !== prevProps.prueba) {\n            this.chart.data = this.props.data\n\n        }\n    }\n\n        \n    render() {\n    \n        let option = {\n            title: {\n                text: this.props.title,\n                textStyle: {\n                    color: '#FFF'\n                }\n            },\n            tooltip: {\n                 trigger: 'axis',\n                 // formatter: function (params) {\n                 //     params = params[0];\n                 //     var date = new Date(params.name);\n                 //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n                 // },\n                 axisPointer: {\n                    animation: false\n                }\n            },\n            xAxis: {\n                type: 'time',\n                splitLine: {\n                    show: false\n                },\n                axisLine: {\n                    lineStyle: {\n                        color: '#FFF'\n                    }\n                }\n            },\n            yAxis: {\n                type: 'value',\n                boundaryGap: [0, '100%'],\n                splitLine: {\n                    show: false\n                },\n                axisLine: {\n                    lineStyle: {\n                        color: '#FFF'\n                    }\n                }\n            },\n            series: [{\n                name: 'CHART',\n                type: 'line',\n                showSymbol: false,\n                hoverAnimation: false,\n                data: this.props.data\n            }]\n        };\n\n        const setInterval = () => {\n            console.log(this.boxRef)\n            let charts = echarts.init(document.getElementById(this.boxRef)); //ref={this.boxRef} this.boxRef.current\n            this.option.series[0].data = this.props.data;\n        \n            charts.setOption(this.option);\n        }\n        \n        return (\n            <div>\n                \n                <div>\n                    <ReactEcharts\n                        ref={this.boxRef}\n                        option={option}\n                        style={{height: 360}}\n                        opts={{renderer: 'svg'}}\n                        onChartReady={setInterval}\n    \n                    /> \n                </div>\n            </div>\n        );\n    }\n\n};\n\nexport default Chart2;"]},"metadata":{},"sourceType":"module"}