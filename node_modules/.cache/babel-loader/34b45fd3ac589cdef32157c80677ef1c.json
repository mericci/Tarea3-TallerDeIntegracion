{"ast":null,"code":"var graphic = require(\"../../util/graphic\");\n\nvar lineContain = require(\"zrender/lib/contain/line\");\n\nvar quadraticContain = require(\"zrender/lib/contain/quadratic\"); // TODO Batch by color\n\n\nvar LargeLineShape = graphic.extendShape({\n  shape: {\n    polyline: false,\n    segs: []\n  },\n  buildPath: function (path, shape) {\n    var segs = shape.segs;\n    var isPolyline = shape.polyline;\n\n    for (var i = 0; i < segs.length; i++) {\n      var seg = segs[i];\n\n      if (isPolyline) {\n        path.moveTo(seg[0][0], seg[0][1]);\n\n        for (var j = 1; j < seg.length; j++) {\n          path.lineTo(seg[j][0], seg[j][1]);\n        }\n      } else {\n        path.moveTo(seg[0][0], seg[0][1]);\n\n        if (seg.length > 2) {\n          path.quadraticCurveTo(seg[2][0], seg[2][1], seg[1][0], seg[1][1]);\n        } else {\n          path.lineTo(seg[1][0], seg[1][1]);\n        }\n      }\n    }\n  },\n  findDataIndex: function (x, y) {\n    var shape = this.shape;\n    var segs = shape.segs;\n    var isPolyline = shape.polyline;\n    var lineWidth = Math.max(this.style.lineWidth, 1); // Not consider transform\n\n    for (var i = 0; i < segs.length; i++) {\n      var seg = segs[i];\n\n      if (isPolyline) {\n        for (var j = 1; j < seg.length; j++) {\n          if (lineContain.containStroke(seg[j - 1][0], seg[j - 1][1], seg[j][0], seg[j][1], lineWidth, x, y)) {\n            return i;\n          }\n        }\n      } else {\n        if (seg.length > 2) {\n          if (quadraticContain.containStroke(seg[0][0], seg[0][1], seg[2][0], seg[2][1], seg[1][0], seg[1][1], lineWidth, x, y)) {\n            return i;\n          }\n        } else {\n          if (lineContain.containStroke(seg[0][0], seg[0][1], seg[1][0], seg[1][1], lineWidth, x, y)) {\n            return i;\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n});\n\nfunction LargeLineDraw() {\n  this.group = new graphic.Group();\n  this._lineEl = new LargeLineShape();\n}\n\nvar largeLineProto = LargeLineDraw.prototype;\n/**\n * Update symbols draw by new data\n * @param {module:echarts/data/List} data\n */\n\nlargeLineProto.updateData = function (data) {\n  this.group.removeAll();\n  var lineEl = this._lineEl;\n  var seriesModel = data.hostModel;\n  lineEl.setShape({\n    segs: data.mapArray(data.getItemLayout),\n    polyline: seriesModel.get('polyline')\n  });\n  lineEl.useStyle(seriesModel.getModel('lineStyle.normal').getLineStyle());\n  var visualColor = data.getVisual('color');\n\n  if (visualColor) {\n    lineEl.setStyle('stroke', visualColor);\n  }\n\n  lineEl.setStyle('fill'); // Enable tooltip\n  // PENDING May have performance issue when path is extremely large\n\n  lineEl.seriesIndex = seriesModel.seriesIndex;\n  lineEl.on('mousemove', function (e) {\n    lineEl.dataIndex = null;\n    var dataIndex = lineEl.findDataIndex(e.offsetX, e.offsetY);\n\n    if (dataIndex > 0) {\n      // Provide dataIndex for tooltip\n      lineEl.dataIndex = dataIndex;\n    }\n  }); // Add back\n\n  this.group.add(lineEl);\n};\n\nlargeLineProto.updateLayout = function (seriesModel) {\n  var data = seriesModel.getData();\n\n  this._lineEl.setShape({\n    segs: data.mapArray(data.getItemLayout)\n  });\n};\n\nlargeLineProto.remove = function () {\n  this.group.removeAll();\n};\n\nvar _default = LargeLineDraw;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/helper/LargeLineDraw.js"],"names":["graphic","require","lineContain","quadraticContain","LargeLineShape","extendShape","shape","polyline","segs","buildPath","path","isPolyline","i","length","seg","moveTo","j","lineTo","quadraticCurveTo","findDataIndex","x","y","lineWidth","Math","max","style","containStroke","LargeLineDraw","group","Group","_lineEl","largeLineProto","prototype","updateData","data","removeAll","lineEl","seriesModel","hostModel","setShape","mapArray","getItemLayout","get","useStyle","getModel","getLineStyle","visualColor","getVisual","setStyle","seriesIndex","on","e","dataIndex","offsetX","offsetY","add","updateLayout","getData","remove","_default","module","exports"],"mappings":"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","sourcesContent":["var graphic = require(\"../../util/graphic\");\n\nvar lineContain = require(\"zrender/lib/contain/line\");\n\nvar quadraticContain = require(\"zrender/lib/contain/quadratic\");\n\n// TODO Batch by color\nvar LargeLineShape = graphic.extendShape({\n  shape: {\n    polyline: false,\n    segs: []\n  },\n  buildPath: function (path, shape) {\n    var segs = shape.segs;\n    var isPolyline = shape.polyline;\n\n    for (var i = 0; i < segs.length; i++) {\n      var seg = segs[i];\n\n      if (isPolyline) {\n        path.moveTo(seg[0][0], seg[0][1]);\n\n        for (var j = 1; j < seg.length; j++) {\n          path.lineTo(seg[j][0], seg[j][1]);\n        }\n      } else {\n        path.moveTo(seg[0][0], seg[0][1]);\n\n        if (seg.length > 2) {\n          path.quadraticCurveTo(seg[2][0], seg[2][1], seg[1][0], seg[1][1]);\n        } else {\n          path.lineTo(seg[1][0], seg[1][1]);\n        }\n      }\n    }\n  },\n  findDataIndex: function (x, y) {\n    var shape = this.shape;\n    var segs = shape.segs;\n    var isPolyline = shape.polyline;\n    var lineWidth = Math.max(this.style.lineWidth, 1); // Not consider transform\n\n    for (var i = 0; i < segs.length; i++) {\n      var seg = segs[i];\n\n      if (isPolyline) {\n        for (var j = 1; j < seg.length; j++) {\n          if (lineContain.containStroke(seg[j - 1][0], seg[j - 1][1], seg[j][0], seg[j][1], lineWidth, x, y)) {\n            return i;\n          }\n        }\n      } else {\n        if (seg.length > 2) {\n          if (quadraticContain.containStroke(seg[0][0], seg[0][1], seg[2][0], seg[2][1], seg[1][0], seg[1][1], lineWidth, x, y)) {\n            return i;\n          }\n        } else {\n          if (lineContain.containStroke(seg[0][0], seg[0][1], seg[1][0], seg[1][1], lineWidth, x, y)) {\n            return i;\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n});\n\nfunction LargeLineDraw() {\n  this.group = new graphic.Group();\n  this._lineEl = new LargeLineShape();\n}\n\nvar largeLineProto = LargeLineDraw.prototype;\n/**\n * Update symbols draw by new data\n * @param {module:echarts/data/List} data\n */\n\nlargeLineProto.updateData = function (data) {\n  this.group.removeAll();\n  var lineEl = this._lineEl;\n  var seriesModel = data.hostModel;\n  lineEl.setShape({\n    segs: data.mapArray(data.getItemLayout),\n    polyline: seriesModel.get('polyline')\n  });\n  lineEl.useStyle(seriesModel.getModel('lineStyle.normal').getLineStyle());\n  var visualColor = data.getVisual('color');\n\n  if (visualColor) {\n    lineEl.setStyle('stroke', visualColor);\n  }\n\n  lineEl.setStyle('fill'); // Enable tooltip\n  // PENDING May have performance issue when path is extremely large\n\n  lineEl.seriesIndex = seriesModel.seriesIndex;\n  lineEl.on('mousemove', function (e) {\n    lineEl.dataIndex = null;\n    var dataIndex = lineEl.findDataIndex(e.offsetX, e.offsetY);\n\n    if (dataIndex > 0) {\n      // Provide dataIndex for tooltip\n      lineEl.dataIndex = dataIndex;\n    }\n  }); // Add back\n\n  this.group.add(lineEl);\n};\n\nlargeLineProto.updateLayout = function (seriesModel) {\n  var data = seriesModel.getData();\n\n  this._lineEl.setShape({\n    segs: data.mapArray(data.getItemLayout)\n  });\n};\n\nlargeLineProto.remove = function () {\n  this.group.removeAll();\n};\n\nvar _default = LargeLineDraw;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}