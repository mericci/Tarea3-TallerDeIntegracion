{"ast":null,"code":"var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Geo = require(\"./Geo\");\n\nvar layout = require(\"../../util/layout\");\n\nvar numberUtil = require(\"../../util/number\");\n/**\n * Resize method bound to the geo\n * @param {module:echarts/coord/geo/GeoModel|module:echarts/chart/map/MapModel} geoModel\n * @param {module:echarts/ExtensionAPI} api\n */\n\n\nfunction resizeGeo(geoModel, api) {\n  var boundingCoords = geoModel.get('boundingCoords');\n\n  if (boundingCoords != null) {\n    var leftTop = boundingCoords[0];\n    var rightBottom = boundingCoords[1];\n\n    if (isNaN(leftTop[0]) || isNaN(leftTop[1]) || isNaN(rightBottom[0]) || isNaN(rightBottom[1])) {} else {\n      this.setBoundingRect(leftTop[0], leftTop[1], rightBottom[0] - leftTop[0], rightBottom[1] - leftTop[1]);\n    }\n  }\n\n  var rect = this.getBoundingRect();\n  var boxLayoutOption;\n  var center = geoModel.get('layoutCenter');\n  var size = geoModel.get('layoutSize');\n  var viewWidth = api.getWidth();\n  var viewHeight = api.getHeight();\n  var aspectScale = geoModel.get('aspectScale') || 0.75;\n  var aspect = rect.width / rect.height * aspectScale;\n  var useCenterAndSize = false;\n\n  if (center && size) {\n    center = [numberUtil.parsePercent(center[0], viewWidth), numberUtil.parsePercent(center[1], viewHeight)];\n    size = numberUtil.parsePercent(size, Math.min(viewWidth, viewHeight));\n\n    if (!isNaN(center[0]) && !isNaN(center[1]) && !isNaN(size)) {\n      useCenterAndSize = true;\n    } else {}\n  }\n\n  var viewRect;\n\n  if (useCenterAndSize) {\n    var viewRect = {};\n\n    if (aspect > 1) {\n      // Width is same with size\n      viewRect.width = size;\n      viewRect.height = size / aspect;\n    } else {\n      viewRect.height = size;\n      viewRect.width = size * aspect;\n    }\n\n    viewRect.y = center[1] - viewRect.height / 2;\n    viewRect.x = center[0] - viewRect.width / 2;\n  } else {\n    // Use left/top/width/height\n    boxLayoutOption = geoModel.getBoxLayoutParams(); // 0.75 rate\n\n    boxLayoutOption.aspect = aspect;\n    viewRect = layout.getLayoutRect(boxLayoutOption, {\n      width: viewWidth,\n      height: viewHeight\n    });\n  }\n\n  this.setViewRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);\n  this.setCenter(geoModel.get('center'));\n  this.setZoom(geoModel.get('zoom'));\n}\n/**\n * @param {module:echarts/coord/Geo} geo\n * @param {module:echarts/model/Model} model\n * @inner\n */\n\n\nfunction setGeoCoords(geo, model) {\n  zrUtil.each(model.get('geoCoord'), function (geoCoord, name) {\n    geo.addGeoCoord(name, geoCoord);\n  });\n}\n\nvar geoCreator = {\n  // For deciding which dimensions to use when creating list data\n  dimensions: Geo.prototype.dimensions,\n  create: function (ecModel, api) {\n    var geoList = []; // FIXME Create each time may be slow\n\n    ecModel.eachComponent('geo', function (geoModel, idx) {\n      var name = geoModel.get('map');\n      var mapData = echarts.getMap(name);\n      var geo = new Geo(name + idx, name, mapData && mapData.geoJson, mapData && mapData.specialAreas, geoModel.get('nameMap'));\n      geo.zoomLimit = geoModel.get('scaleLimit');\n      geoList.push(geo);\n      setGeoCoords(geo, geoModel);\n      geoModel.coordinateSystem = geo;\n      geo.model = geoModel; // Inject resize method\n\n      geo.resize = resizeGeo;\n      geo.resize(geoModel, api);\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      var coordSys = seriesModel.get('coordinateSystem');\n\n      if (coordSys === 'geo') {\n        var geoIndex = seriesModel.get('geoIndex') || 0;\n        seriesModel.coordinateSystem = geoList[geoIndex];\n      }\n    }); // If has map series\n\n    var mapModelGroupBySeries = {};\n    ecModel.eachSeriesByType('map', function (seriesModel) {\n      if (!seriesModel.getHostGeoModel()) {\n        var mapType = seriesModel.getMapType();\n        mapModelGroupBySeries[mapType] = mapModelGroupBySeries[mapType] || [];\n        mapModelGroupBySeries[mapType].push(seriesModel);\n      }\n    });\n    zrUtil.each(mapModelGroupBySeries, function (mapSeries, mapType) {\n      var mapData = echarts.getMap(mapType);\n      var nameMapList = zrUtil.map(mapSeries, function (singleMapSeries) {\n        return singleMapSeries.get('nameMap');\n      });\n      var geo = new Geo(mapType, mapType, mapData && mapData.geoJson, mapData && mapData.specialAreas, zrUtil.mergeAll(nameMapList));\n      geo.zoomLimit = zrUtil.retrieve.apply(null, zrUtil.map(mapSeries, function (singleMapSeries) {\n        return singleMapSeries.get('scaleLimit');\n      }));\n      geoList.push(geo); // Inject resize method\n\n      geo.resize = resizeGeo;\n      geo.resize(mapSeries[0], api);\n      zrUtil.each(mapSeries, function (singleMapSeries) {\n        singleMapSeries.coordinateSystem = geo;\n        setGeoCoords(geo, singleMapSeries);\n      });\n    });\n    return geoList;\n  },\n\n  /**\n   * Fill given regions array\n   * @param  {Array.<Object>} originRegionArr\n   * @param  {string} mapName\n   * @param  {Object} [nameMap]\n   * @return {Array}\n   */\n  getFilledRegions: function (originRegionArr, mapName, nameMap) {\n    // Not use the original\n    var regionsArr = (originRegionArr || []).slice();\n    nameMap = nameMap || {};\n    var map = echarts.getMap(mapName);\n    var geoJson = map && map.geoJson;\n\n    if (!geoJson) {\n      return originRegionArr;\n    }\n\n    var dataNameMap = zrUtil.createHashMap();\n    var features = geoJson.features;\n\n    for (var i = 0; i < regionsArr.length; i++) {\n      dataNameMap.set(regionsArr[i].name, regionsArr[i]);\n    }\n\n    for (var i = 0; i < features.length; i++) {\n      var name = features[i].properties.name;\n\n      if (!dataNameMap.get(name)) {\n        if (nameMap.hasOwnProperty(name)) {\n          name = nameMap[name];\n        }\n\n        regionsArr.push({\n          name: name\n        });\n      }\n    }\n\n    return regionsArr;\n  }\n};\necharts.registerCoordinateSystem('geo', geoCreator);\nvar _default = geoCreator;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/coord/geo/geoCreator.js"],"names":["_config","require","__DEV__","echarts","zrUtil","Geo","layout","numberUtil","resizeGeo","geoModel","api","boundingCoords","get","leftTop","rightBottom","isNaN","setBoundingRect","rect","getBoundingRect","boxLayoutOption","center","size","viewWidth","getWidth","viewHeight","getHeight","aspectScale","aspect","width","height","useCenterAndSize","parsePercent","Math","min","viewRect","y","x","getBoxLayoutParams","getLayoutRect","setViewRect","setCenter","setZoom","setGeoCoords","geo","model","each","geoCoord","name","addGeoCoord","geoCreator","dimensions","prototype","create","ecModel","geoList","eachComponent","idx","mapData","getMap","geoJson","specialAreas","zoomLimit","push","coordinateSystem","resize","eachSeries","seriesModel","coordSys","geoIndex","mapModelGroupBySeries","eachSeriesByType","getHostGeoModel","mapType","getMapType","mapSeries","nameMapList","map","singleMapSeries","mergeAll","retrieve","apply","getFilledRegions","originRegionArr","mapName","nameMap","regionsArr","slice","dataNameMap","createHashMap","features","i","length","set","properties","hasOwnProperty","registerCoordinateSystem","_default","module","exports"],"mappings":"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","sourcesContent":["var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Geo = require(\"./Geo\");\n\nvar layout = require(\"../../util/layout\");\n\nvar numberUtil = require(\"../../util/number\");\n\n/**\n * Resize method bound to the geo\n * @param {module:echarts/coord/geo/GeoModel|module:echarts/chart/map/MapModel} geoModel\n * @param {module:echarts/ExtensionAPI} api\n */\nfunction resizeGeo(geoModel, api) {\n  var boundingCoords = geoModel.get('boundingCoords');\n\n  if (boundingCoords != null) {\n    var leftTop = boundingCoords[0];\n    var rightBottom = boundingCoords[1];\n\n    if (isNaN(leftTop[0]) || isNaN(leftTop[1]) || isNaN(rightBottom[0]) || isNaN(rightBottom[1])) {} else {\n      this.setBoundingRect(leftTop[0], leftTop[1], rightBottom[0] - leftTop[0], rightBottom[1] - leftTop[1]);\n    }\n  }\n\n  var rect = this.getBoundingRect();\n  var boxLayoutOption;\n  var center = geoModel.get('layoutCenter');\n  var size = geoModel.get('layoutSize');\n  var viewWidth = api.getWidth();\n  var viewHeight = api.getHeight();\n  var aspectScale = geoModel.get('aspectScale') || 0.75;\n  var aspect = rect.width / rect.height * aspectScale;\n  var useCenterAndSize = false;\n\n  if (center && size) {\n    center = [numberUtil.parsePercent(center[0], viewWidth), numberUtil.parsePercent(center[1], viewHeight)];\n    size = numberUtil.parsePercent(size, Math.min(viewWidth, viewHeight));\n\n    if (!isNaN(center[0]) && !isNaN(center[1]) && !isNaN(size)) {\n      useCenterAndSize = true;\n    } else {}\n  }\n\n  var viewRect;\n\n  if (useCenterAndSize) {\n    var viewRect = {};\n\n    if (aspect > 1) {\n      // Width is same with size\n      viewRect.width = size;\n      viewRect.height = size / aspect;\n    } else {\n      viewRect.height = size;\n      viewRect.width = size * aspect;\n    }\n\n    viewRect.y = center[1] - viewRect.height / 2;\n    viewRect.x = center[0] - viewRect.width / 2;\n  } else {\n    // Use left/top/width/height\n    boxLayoutOption = geoModel.getBoxLayoutParams(); // 0.75 rate\n\n    boxLayoutOption.aspect = aspect;\n    viewRect = layout.getLayoutRect(boxLayoutOption, {\n      width: viewWidth,\n      height: viewHeight\n    });\n  }\n\n  this.setViewRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);\n  this.setCenter(geoModel.get('center'));\n  this.setZoom(geoModel.get('zoom'));\n}\n/**\n * @param {module:echarts/coord/Geo} geo\n * @param {module:echarts/model/Model} model\n * @inner\n */\n\n\nfunction setGeoCoords(geo, model) {\n  zrUtil.each(model.get('geoCoord'), function (geoCoord, name) {\n    geo.addGeoCoord(name, geoCoord);\n  });\n}\n\nvar geoCreator = {\n  // For deciding which dimensions to use when creating list data\n  dimensions: Geo.prototype.dimensions,\n  create: function (ecModel, api) {\n    var geoList = []; // FIXME Create each time may be slow\n\n    ecModel.eachComponent('geo', function (geoModel, idx) {\n      var name = geoModel.get('map');\n      var mapData = echarts.getMap(name);\n      var geo = new Geo(name + idx, name, mapData && mapData.geoJson, mapData && mapData.specialAreas, geoModel.get('nameMap'));\n      geo.zoomLimit = geoModel.get('scaleLimit');\n      geoList.push(geo);\n      setGeoCoords(geo, geoModel);\n      geoModel.coordinateSystem = geo;\n      geo.model = geoModel; // Inject resize method\n\n      geo.resize = resizeGeo;\n      geo.resize(geoModel, api);\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      var coordSys = seriesModel.get('coordinateSystem');\n\n      if (coordSys === 'geo') {\n        var geoIndex = seriesModel.get('geoIndex') || 0;\n        seriesModel.coordinateSystem = geoList[geoIndex];\n      }\n    }); // If has map series\n\n    var mapModelGroupBySeries = {};\n    ecModel.eachSeriesByType('map', function (seriesModel) {\n      if (!seriesModel.getHostGeoModel()) {\n        var mapType = seriesModel.getMapType();\n        mapModelGroupBySeries[mapType] = mapModelGroupBySeries[mapType] || [];\n        mapModelGroupBySeries[mapType].push(seriesModel);\n      }\n    });\n    zrUtil.each(mapModelGroupBySeries, function (mapSeries, mapType) {\n      var mapData = echarts.getMap(mapType);\n      var nameMapList = zrUtil.map(mapSeries, function (singleMapSeries) {\n        return singleMapSeries.get('nameMap');\n      });\n      var geo = new Geo(mapType, mapType, mapData && mapData.geoJson, mapData && mapData.specialAreas, zrUtil.mergeAll(nameMapList));\n      geo.zoomLimit = zrUtil.retrieve.apply(null, zrUtil.map(mapSeries, function (singleMapSeries) {\n        return singleMapSeries.get('scaleLimit');\n      }));\n      geoList.push(geo); // Inject resize method\n\n      geo.resize = resizeGeo;\n      geo.resize(mapSeries[0], api);\n      zrUtil.each(mapSeries, function (singleMapSeries) {\n        singleMapSeries.coordinateSystem = geo;\n        setGeoCoords(geo, singleMapSeries);\n      });\n    });\n    return geoList;\n  },\n\n  /**\n   * Fill given regions array\n   * @param  {Array.<Object>} originRegionArr\n   * @param  {string} mapName\n   * @param  {Object} [nameMap]\n   * @return {Array}\n   */\n  getFilledRegions: function (originRegionArr, mapName, nameMap) {\n    // Not use the original\n    var regionsArr = (originRegionArr || []).slice();\n    nameMap = nameMap || {};\n    var map = echarts.getMap(mapName);\n    var geoJson = map && map.geoJson;\n\n    if (!geoJson) {\n      return originRegionArr;\n    }\n\n    var dataNameMap = zrUtil.createHashMap();\n    var features = geoJson.features;\n\n    for (var i = 0; i < regionsArr.length; i++) {\n      dataNameMap.set(regionsArr[i].name, regionsArr[i]);\n    }\n\n    for (var i = 0; i < features.length; i++) {\n      var name = features[i].properties.name;\n\n      if (!dataNameMap.get(name)) {\n        if (nameMap.hasOwnProperty(name)) {\n          name = nameMap[name];\n        }\n\n        regionsArr.push({\n          name: name\n        });\n      }\n    }\n\n    return regionsArr;\n  }\n};\necharts.registerCoordinateSystem('geo', geoCreator);\nvar _default = geoCreator;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}