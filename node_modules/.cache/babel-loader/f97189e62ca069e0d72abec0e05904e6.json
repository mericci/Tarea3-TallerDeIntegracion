{"ast":null,"code":"var samplers = {\n  average: function (frame) {\n    var sum = 0;\n    var count = 0;\n\n    for (var i = 0; i < frame.length; i++) {\n      if (!isNaN(frame[i])) {\n        sum += frame[i];\n        count++;\n      }\n    } // Return NaN if count is 0\n\n\n    return count === 0 ? NaN : sum / count;\n  },\n  sum: function (frame) {\n    var sum = 0;\n\n    for (var i = 0; i < frame.length; i++) {\n      // Ignore NaN\n      sum += frame[i] || 0;\n    }\n\n    return sum;\n  },\n  max: function (frame) {\n    var max = -Infinity;\n\n    for (var i = 0; i < frame.length; i++) {\n      frame[i] > max && (max = frame[i]);\n    }\n\n    return max;\n  },\n  min: function (frame) {\n    var min = Infinity;\n\n    for (var i = 0; i < frame.length; i++) {\n      frame[i] < min && (min = frame[i]);\n    }\n\n    return min;\n  },\n  // TODO\n  // Median\n  nearest: function (frame) {\n    return frame[0];\n  }\n};\n\nvar indexSampler = function (frame, value) {\n  return Math.round(frame.length / 2);\n};\n\nfunction _default(seriesType, ecModel, api) {\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    var data = seriesModel.getData();\n    var sampling = seriesModel.get('sampling');\n    var coordSys = seriesModel.coordinateSystem; // Only cartesian2d support down sampling\n\n    if (coordSys.type === 'cartesian2d' && sampling) {\n      var baseAxis = coordSys.getBaseAxis();\n      var valueAxis = coordSys.getOtherAxis(baseAxis);\n      var extent = baseAxis.getExtent(); // Coordinste system has been resized\n\n      var size = extent[1] - extent[0];\n      var rate = Math.round(data.count() / size);\n\n      if (rate > 1) {\n        var sampler;\n\n        if (typeof sampling === 'string') {\n          sampler = samplers[sampling];\n        } else if (typeof sampling === 'function') {\n          sampler = sampling;\n        }\n\n        if (sampler) {\n          data = data.downSample(valueAxis.dim, 1 / rate, sampler, indexSampler);\n          seriesModel.setData(data);\n        }\n      }\n    }\n  }, this);\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/processor/dataSample.js"],"names":["samplers","average","frame","sum","count","i","length","isNaN","NaN","max","Infinity","min","nearest","indexSampler","value","Math","round","_default","seriesType","ecModel","api","eachSeriesByType","seriesModel","data","getData","sampling","get","coordSys","coordinateSystem","type","baseAxis","getBaseAxis","valueAxis","getOtherAxis","extent","getExtent","size","rate","sampler","downSample","dim","setData","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAG;AACbC,EAAAA,OAAO,EAAE,UAAUC,KAAV,EAAiB;AACxB,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,KAAK,GAAG,CAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAI,CAACE,KAAK,CAACL,KAAK,CAACG,CAAD,CAAN,CAAV,EAAsB;AACpBF,QAAAA,GAAG,IAAID,KAAK,CAACG,CAAD,CAAZ;AACAD,QAAAA,KAAK;AACN;AACF,KATuB,CAStB;;;AAGF,WAAOA,KAAK,KAAK,CAAV,GAAcI,GAAd,GAAoBL,GAAG,GAAGC,KAAjC;AACD,GAdY;AAebD,EAAAA,GAAG,EAAE,UAAUD,KAAV,EAAiB;AACpB,QAAIC,GAAG,GAAG,CAAV;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC;AACAF,MAAAA,GAAG,IAAID,KAAK,CAACG,CAAD,CAAL,IAAY,CAAnB;AACD;;AAED,WAAOF,GAAP;AACD,GAxBY;AAyBbM,EAAAA,GAAG,EAAE,UAAUP,KAAV,EAAiB;AACpB,QAAIO,GAAG,GAAG,CAACC,QAAX;;AAEA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCH,MAAAA,KAAK,CAACG,CAAD,CAAL,GAAWI,GAAX,KAAmBA,GAAG,GAAGP,KAAK,CAACG,CAAD,CAA9B;AACD;;AAED,WAAOI,GAAP;AACD,GAjCY;AAkCbE,EAAAA,GAAG,EAAE,UAAUT,KAAV,EAAiB;AACpB,QAAIS,GAAG,GAAGD,QAAV;;AAEA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCH,MAAAA,KAAK,CAACG,CAAD,CAAL,GAAWM,GAAX,KAAmBA,GAAG,GAAGT,KAAK,CAACG,CAAD,CAA9B;AACD;;AAED,WAAOM,GAAP;AACD,GA1CY;AA2Cb;AACA;AACAC,EAAAA,OAAO,EAAE,UAAUV,KAAV,EAAiB;AACxB,WAAOA,KAAK,CAAC,CAAD,CAAZ;AACD;AA/CY,CAAf;;AAkDA,IAAIW,YAAY,GAAG,UAAUX,KAAV,EAAiBY,KAAjB,EAAwB;AACzC,SAAOC,IAAI,CAACC,KAAL,CAAWd,KAAK,CAACI,MAAN,GAAe,CAA1B,CAAP;AACD,CAFD;;AAIA,SAASW,QAAT,CAAkBC,UAAlB,EAA8BC,OAA9B,EAAuCC,GAAvC,EAA4C;AAC1CD,EAAAA,OAAO,CAACE,gBAAR,CAAyBH,UAAzB,EAAqC,UAAUI,WAAV,EAAuB;AAC1D,QAAIC,IAAI,GAAGD,WAAW,CAACE,OAAZ,EAAX;AACA,QAAIC,QAAQ,GAAGH,WAAW,CAACI,GAAZ,CAAgB,UAAhB,CAAf;AACA,QAAIC,QAAQ,GAAGL,WAAW,CAACM,gBAA3B,CAH0D,CAGb;;AAE7C,QAAID,QAAQ,CAACE,IAAT,KAAkB,aAAlB,IAAmCJ,QAAvC,EAAiD;AAC/C,UAAIK,QAAQ,GAAGH,QAAQ,CAACI,WAAT,EAAf;AACA,UAAIC,SAAS,GAAGL,QAAQ,CAACM,YAAT,CAAsBH,QAAtB,CAAhB;AACA,UAAII,MAAM,GAAGJ,QAAQ,CAACK,SAAT,EAAb,CAH+C,CAGZ;;AAEnC,UAAIC,IAAI,GAAGF,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B;AACA,UAAIG,IAAI,GAAGtB,IAAI,CAACC,KAAL,CAAWO,IAAI,CAACnB,KAAL,KAAegC,IAA1B,CAAX;;AAEA,UAAIC,IAAI,GAAG,CAAX,EAAc;AACZ,YAAIC,OAAJ;;AAEA,YAAI,OAAOb,QAAP,KAAoB,QAAxB,EAAkC;AAChCa,UAAAA,OAAO,GAAGtC,QAAQ,CAACyB,QAAD,CAAlB;AACD,SAFD,MAEO,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AACzCa,UAAAA,OAAO,GAAGb,QAAV;AACD;;AAED,YAAIa,OAAJ,EAAa;AACXf,UAAAA,IAAI,GAAGA,IAAI,CAACgB,UAAL,CAAgBP,SAAS,CAACQ,GAA1B,EAA+B,IAAIH,IAAnC,EAAyCC,OAAzC,EAAkDzB,YAAlD,CAAP;AACAS,UAAAA,WAAW,CAACmB,OAAZ,CAAoBlB,IAApB;AACD;AACF;AACF;AACF,GA5BD,EA4BG,IA5BH;AA6BD;;AAEDmB,MAAM,CAACC,OAAP,GAAiB1B,QAAjB","sourcesContent":["var samplers = {\n  average: function (frame) {\n    var sum = 0;\n    var count = 0;\n\n    for (var i = 0; i < frame.length; i++) {\n      if (!isNaN(frame[i])) {\n        sum += frame[i];\n        count++;\n      }\n    } // Return NaN if count is 0\n\n\n    return count === 0 ? NaN : sum / count;\n  },\n  sum: function (frame) {\n    var sum = 0;\n\n    for (var i = 0; i < frame.length; i++) {\n      // Ignore NaN\n      sum += frame[i] || 0;\n    }\n\n    return sum;\n  },\n  max: function (frame) {\n    var max = -Infinity;\n\n    for (var i = 0; i < frame.length; i++) {\n      frame[i] > max && (max = frame[i]);\n    }\n\n    return max;\n  },\n  min: function (frame) {\n    var min = Infinity;\n\n    for (var i = 0; i < frame.length; i++) {\n      frame[i] < min && (min = frame[i]);\n    }\n\n    return min;\n  },\n  // TODO\n  // Median\n  nearest: function (frame) {\n    return frame[0];\n  }\n};\n\nvar indexSampler = function (frame, value) {\n  return Math.round(frame.length / 2);\n};\n\nfunction _default(seriesType, ecModel, api) {\n  ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n    var data = seriesModel.getData();\n    var sampling = seriesModel.get('sampling');\n    var coordSys = seriesModel.coordinateSystem; // Only cartesian2d support down sampling\n\n    if (coordSys.type === 'cartesian2d' && sampling) {\n      var baseAxis = coordSys.getBaseAxis();\n      var valueAxis = coordSys.getOtherAxis(baseAxis);\n      var extent = baseAxis.getExtent(); // Coordinste system has been resized\n\n      var size = extent[1] - extent[0];\n      var rate = Math.round(data.count() / size);\n\n      if (rate > 1) {\n        var sampler;\n\n        if (typeof sampling === 'string') {\n          sampler = samplers[sampling];\n        } else if (typeof sampling === 'function') {\n          sampler = sampling;\n        }\n\n        if (sampler) {\n          data = data.downSample(valueAxis.dim, 1 / rate, sampler, indexSampler);\n          seriesModel.setData(data);\n        }\n      }\n    }\n  }, this);\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}