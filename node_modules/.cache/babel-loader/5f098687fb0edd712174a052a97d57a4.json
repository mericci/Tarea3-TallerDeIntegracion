{"ast":null,"code":"var SeriesModel = require(\"../../model/Series\");\n\nvar Tree = require(\"../../data/Tree\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n/**\n * @file Create data struct and define tree view's series model\n */\n\nvar _default = SeriesModel.extend({\n  type: 'series.tree',\n  layoutInfo: null,\n  // can support the position parameters 'left', 'top','right','bottom', 'width',\n  // 'height' in the setOption() with 'merge' mode normal.\n  layoutMode: 'box',\n\n  /**\n   * Init a tree data structure from data in option series\n   * @param  {Object} option  the object used to config echarts view\n   * @return {module:echarts/data/List} storage initial data\n   */\n  getInitialData: function (option) {\n    //create an virtual root\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    var leaves = option.leaves || {};\n    var treeOption = {};\n    treeOption.leaves = leaves;\n    var tree = Tree.createTree(root, this, treeOption);\n    var treeDepth = 0;\n    tree.eachNode('preorder', function (node) {\n      if (node.depth > treeDepth) {\n        treeDepth = node.depth;\n      }\n    });\n    var expandAndCollapse = option.expandAndCollapse;\n    var expandTreeDepth = expandAndCollapse && option.initialTreeDepth >= 0 ? option.initialTreeDepth : treeDepth;\n    tree.root.eachNode('preorder', function (node) {\n      var item = node.hostTree.data.getRawDataItem(node.dataIndex);\n      node.isExpand = item && item.collapsed != null ? !item.collapsed : node.depth <= expandTreeDepth;\n    });\n    return tree.data;\n  },\n\n  /**\n   * @override\n   * @param {number} dataIndex\n   */\n  formatTooltip: function (dataIndex) {\n    var tree = this.getData().tree;\n    var realRoot = tree.root.children[0];\n    var node = tree.getNodeByDataIndex(dataIndex);\n    var value = node.getValue();\n    var name = node.name;\n\n    while (node && node !== realRoot) {\n      name = node.parentNode.name + '.' + name;\n      node = node.parentNode;\n    }\n\n    return encodeHTML(name + (isNaN(value) || value == null ? '' : ' : ' + value));\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    // the position of the whole view\n    left: '12%',\n    top: '12%',\n    right: '12%',\n    bottom: '12%',\n    // the layout of the tree, two value can be selected, 'orthogonal' or 'radial'\n    layout: 'orthogonal',\n    // the orient of orthoginal layout, can be setted to 'horizontal' or 'vertical'\n    orient: 'horizontal',\n    symbol: 'emptyCircle',\n    symbolSize: 7,\n    expandAndCollapse: true,\n    initialTreeDepth: 2,\n    lineStyle: {\n      normal: {\n        color: '#ccc',\n        width: 1.5,\n        curveness: 0.5\n      }\n    },\n    itemStyle: {\n      normal: {\n        color: 'lightsteelblue',\n        borderColor: '#c23531',\n        borderWidth: 1.5\n      }\n    },\n    label: {\n      normal: {\n        show: true,\n        color: '#555'\n      }\n    },\n    leaves: {\n      label: {\n        normal: {\n          show: true\n        }\n      }\n    },\n    animationEasing: 'linear',\n    animationDuration: 700,\n    animationDurationUpdate: 1000\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/tree/TreeSeries.js"],"names":["SeriesModel","require","Tree","_format","encodeHTML","_default","extend","type","layoutInfo","layoutMode","getInitialData","option","root","name","children","data","leaves","treeOption","tree","createTree","treeDepth","eachNode","node","depth","expandAndCollapse","expandTreeDepth","initialTreeDepth","item","hostTree","getRawDataItem","dataIndex","isExpand","collapsed","formatTooltip","getData","realRoot","getNodeByDataIndex","value","getValue","parentNode","isNaN","defaultOption","zlevel","z","left","top","right","bottom","layout","orient","symbol","symbolSize","lineStyle","normal","color","width","curveness","itemStyle","borderColor","borderWidth","label","show","animationEasing","animationDuration","animationDurationUpdate","module","exports"],"mappings":"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","sourcesContent":["var SeriesModel = require(\"../../model/Series\");\n\nvar Tree = require(\"../../data/Tree\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\n/**\n * @file Create data struct and define tree view's series model\n */\nvar _default = SeriesModel.extend({\n  type: 'series.tree',\n  layoutInfo: null,\n  // can support the position parameters 'left', 'top','right','bottom', 'width',\n  // 'height' in the setOption() with 'merge' mode normal.\n  layoutMode: 'box',\n\n  /**\n   * Init a tree data structure from data in option series\n   * @param  {Object} option  the object used to config echarts view\n   * @return {module:echarts/data/List} storage initial data\n   */\n  getInitialData: function (option) {\n    //create an virtual root\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    var leaves = option.leaves || {};\n    var treeOption = {};\n    treeOption.leaves = leaves;\n    var tree = Tree.createTree(root, this, treeOption);\n    var treeDepth = 0;\n    tree.eachNode('preorder', function (node) {\n      if (node.depth > treeDepth) {\n        treeDepth = node.depth;\n      }\n    });\n    var expandAndCollapse = option.expandAndCollapse;\n    var expandTreeDepth = expandAndCollapse && option.initialTreeDepth >= 0 ? option.initialTreeDepth : treeDepth;\n    tree.root.eachNode('preorder', function (node) {\n      var item = node.hostTree.data.getRawDataItem(node.dataIndex);\n      node.isExpand = item && item.collapsed != null ? !item.collapsed : node.depth <= expandTreeDepth;\n    });\n    return tree.data;\n  },\n\n  /**\n   * @override\n   * @param {number} dataIndex\n   */\n  formatTooltip: function (dataIndex) {\n    var tree = this.getData().tree;\n    var realRoot = tree.root.children[0];\n    var node = tree.getNodeByDataIndex(dataIndex);\n    var value = node.getValue();\n    var name = node.name;\n\n    while (node && node !== realRoot) {\n      name = node.parentNode.name + '.' + name;\n      node = node.parentNode;\n    }\n\n    return encodeHTML(name + (isNaN(value) || value == null ? '' : ' : ' + value));\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    // the position of the whole view\n    left: '12%',\n    top: '12%',\n    right: '12%',\n    bottom: '12%',\n    // the layout of the tree, two value can be selected, 'orthogonal' or 'radial'\n    layout: 'orthogonal',\n    // the orient of orthoginal layout, can be setted to 'horizontal' or 'vertical'\n    orient: 'horizontal',\n    symbol: 'emptyCircle',\n    symbolSize: 7,\n    expandAndCollapse: true,\n    initialTreeDepth: 2,\n    lineStyle: {\n      normal: {\n        color: '#ccc',\n        width: 1.5,\n        curveness: 0.5\n      }\n    },\n    itemStyle: {\n      normal: {\n        color: 'lightsteelblue',\n        borderColor: '#c23531',\n        borderWidth: 1.5\n      }\n    },\n    label: {\n      normal: {\n        show: true,\n        color: '#555'\n      }\n    },\n    leaves: {\n      label: {\n        normal: {\n          show: true\n        }\n      }\n    },\n    animationEasing: 'linear',\n    animationDuration: 700,\n    animationDurationUpdate: 1000\n  }\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}