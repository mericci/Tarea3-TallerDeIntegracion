{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar createListFromArray = require(\"./chart/helper/createListFromArray\");\n\nvar axisHelper = require(\"./coord/axisHelper\");\n\nvar axisModelCommonMixin = require(\"./coord/axisModelCommonMixin\");\n\nvar Model = require(\"./model/Model\");\n\nvar _completeDimensions = require(\"./data/helper/completeDimensions\");\n\nexports.completeDimensions = _completeDimensions;\n\nvar _symbol = require(\"./util/symbol\");\n\nexports.createSymbol = _symbol.createSymbol;\n/**\n * Create a muti dimension List structure from seriesModel.\n * @param  {module:echarts/model/Model} seriesModel\n * @return {module:echarts/data/List} list\n */\n\nfunction createList(seriesModel) {\n  var data = seriesModel.get('data');\n  return createListFromArray(data, seriesModel, seriesModel.ecModel);\n}\n/**\n * @see {module:echarts/data/helper/completeDimensions}\n */\n\n/**\n * Create scale\n * @param {Array.<number>} dataExtent\n * @param {Object|module:echarts/Model} option\n */\n\n\nfunction createScale(dataExtent, option) {\n  var axisModel = option;\n\n  if (!(option instanceof Model)) {\n    axisModel = new Model(option);\n    zrUtil.mixin(axisModel, axisModelCommonMixin);\n  }\n\n  var scale = axisHelper.createScaleByModel(axisModel);\n  scale.setExtent(dataExtent[0], dataExtent[1]);\n  axisHelper.niceScaleExtent(scale, axisModel);\n  return scale;\n}\n/**\n * Mixin common methods to axis model,\n *\n * Inlcude methods\n * `getFormattedLabels() => Array.<string>`\n * `getCategories() => Array.<string>`\n * `getMin(origin: boolean) => number`\n * `getMax(origin: boolean) => number`\n * `getNeedCrossZero() => boolean`\n * `setRange(start: number, end: number)`\n * `resetRange()`\n */\n\n\nfunction mixinAxisModelCommonMethods(Model) {\n  zrUtil.mixin(Model, axisModelCommonMixin);\n}\n\nexports.createList = createList;\nexports.createScale = createScale;\nexports.mixinAxisModelCommonMethods = mixinAxisModelCommonMethods;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/helper.js"],"names":["zrUtil","require","createListFromArray","axisHelper","axisModelCommonMixin","Model","_completeDimensions","exports","completeDimensions","_symbol","createSymbol","createList","seriesModel","data","get","ecModel","createScale","dataExtent","option","axisModel","mixin","scale","createScaleByModel","setExtent","niceScaleExtent","mixinAxisModelCommonMethods"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,oCAAD,CAAjC;;AAEA,IAAIE,UAAU,GAAGF,OAAO,CAAC,oBAAD,CAAxB;;AAEA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,8BAAD,CAAlC;;AAEA,IAAII,KAAK,GAAGJ,OAAO,CAAC,eAAD,CAAnB;;AAEA,IAAIK,mBAAmB,GAAGL,OAAO,CAAC,kCAAD,CAAjC;;AAEAM,OAAO,CAACC,kBAAR,GAA6BF,mBAA7B;;AAEA,IAAIG,OAAO,GAAGR,OAAO,CAAC,eAAD,CAArB;;AAEAM,OAAO,CAACG,YAAR,GAAuBD,OAAO,CAACC,YAA/B;AAEA;;;;;;AAKA,SAASC,UAAT,CAAoBC,WAApB,EAAiC;AAC/B,MAAIC,IAAI,GAAGD,WAAW,CAACE,GAAZ,CAAgB,MAAhB,CAAX;AACA,SAAOZ,mBAAmB,CAACW,IAAD,EAAOD,WAAP,EAAoBA,WAAW,CAACG,OAAhC,CAA1B;AACD;AACD;;;;AAKA;;;;;;;AAKA,SAASC,WAAT,CAAqBC,UAArB,EAAiCC,MAAjC,EAAyC;AACvC,MAAIC,SAAS,GAAGD,MAAhB;;AAEA,MAAI,EAAEA,MAAM,YAAYb,KAApB,CAAJ,EAAgC;AAC9Bc,IAAAA,SAAS,GAAG,IAAId,KAAJ,CAAUa,MAAV,CAAZ;AACAlB,IAAAA,MAAM,CAACoB,KAAP,CAAaD,SAAb,EAAwBf,oBAAxB;AACD;;AAED,MAAIiB,KAAK,GAAGlB,UAAU,CAACmB,kBAAX,CAA8BH,SAA9B,CAAZ;AACAE,EAAAA,KAAK,CAACE,SAAN,CAAgBN,UAAU,CAAC,CAAD,CAA1B,EAA+BA,UAAU,CAAC,CAAD,CAAzC;AACAd,EAAAA,UAAU,CAACqB,eAAX,CAA2BH,KAA3B,EAAkCF,SAAlC;AACA,SAAOE,KAAP;AACD;AACD;;;;;;;;;;;;;;AAcA,SAASI,2BAAT,CAAqCpB,KAArC,EAA4C;AAC1CL,EAAAA,MAAM,CAACoB,KAAP,CAAaf,KAAb,EAAoBD,oBAApB;AACD;;AAEDG,OAAO,CAACI,UAAR,GAAqBA,UAArB;AACAJ,OAAO,CAACS,WAAR,GAAsBA,WAAtB;AACAT,OAAO,CAACkB,2BAAR,GAAsCA,2BAAtC","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar createListFromArray = require(\"./chart/helper/createListFromArray\");\n\nvar axisHelper = require(\"./coord/axisHelper\");\n\nvar axisModelCommonMixin = require(\"./coord/axisModelCommonMixin\");\n\nvar Model = require(\"./model/Model\");\n\nvar _completeDimensions = require(\"./data/helper/completeDimensions\");\n\nexports.completeDimensions = _completeDimensions;\n\nvar _symbol = require(\"./util/symbol\");\n\nexports.createSymbol = _symbol.createSymbol;\n\n/**\n * Create a muti dimension List structure from seriesModel.\n * @param  {module:echarts/model/Model} seriesModel\n * @return {module:echarts/data/List} list\n */\nfunction createList(seriesModel) {\n  var data = seriesModel.get('data');\n  return createListFromArray(data, seriesModel, seriesModel.ecModel);\n}\n/**\n * @see {module:echarts/data/helper/completeDimensions}\n */\n\n\n/**\n * Create scale\n * @param {Array.<number>} dataExtent\n * @param {Object|module:echarts/Model} option\n */\nfunction createScale(dataExtent, option) {\n  var axisModel = option;\n\n  if (!(option instanceof Model)) {\n    axisModel = new Model(option);\n    zrUtil.mixin(axisModel, axisModelCommonMixin);\n  }\n\n  var scale = axisHelper.createScaleByModel(axisModel);\n  scale.setExtent(dataExtent[0], dataExtent[1]);\n  axisHelper.niceScaleExtent(scale, axisModel);\n  return scale;\n}\n/**\n * Mixin common methods to axis model,\n *\n * Inlcude methods\n * `getFormattedLabels() => Array.<string>`\n * `getCategories() => Array.<string>`\n * `getMin(origin: boolean) => number`\n * `getMax(origin: boolean) => number`\n * `getNeedCrossZero() => boolean`\n * `setRange(start: number, end: number)`\n * `resetRange()`\n */\n\n\nfunction mixinAxisModelCommonMethods(Model) {\n  zrUtil.mixin(Model, axisModelCommonMixin);\n}\n\nexports.createList = createList;\nexports.createScale = createScale;\nexports.mixinAxisModelCommonMethods = mixinAxisModelCommonMethods;"]},"metadata":{},"sourceType":"script"}