{"ast":null,"code":"var _forceHelper = require(\"./forceHelper\");\n\nvar forceLayout = _forceHelper.forceLayout;\n\nvar _simpleLayoutHelper = require(\"./simpleLayoutHelper\");\n\nvar simpleLayout = _simpleLayoutHelper.simpleLayout;\n\nvar _circularLayoutHelper = require(\"./circularLayoutHelper\");\n\nvar circularLayout = _circularLayoutHelper.circularLayout;\n\nvar _number = require(\"../../util/number\");\n\nvar linearMap = _number.linearMap;\n\nvar vec2 = require(\"zrender/lib/core/vector\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nfunction _default(ecModel) {\n  ecModel.eachSeriesByType('graph', function (graphSeries) {\n    var coordSys = graphSeries.coordinateSystem;\n\n    if (coordSys && coordSys.type !== 'view') {\n      return;\n    }\n\n    if (graphSeries.get('layout') === 'force') {\n      var preservedPoints = graphSeries.preservedPoints || {};\n      var graph = graphSeries.getGraph();\n      var nodeData = graph.data;\n      var edgeData = graph.edgeData;\n      var forceModel = graphSeries.getModel('force');\n      var initLayout = forceModel.get('initLayout');\n\n      if (graphSeries.preservedPoints) {\n        nodeData.each(function (idx) {\n          var id = nodeData.getId(idx);\n          nodeData.setItemLayout(idx, preservedPoints[id] || [NaN, NaN]);\n        });\n      } else if (!initLayout || initLayout === 'none') {\n        simpleLayout(graphSeries);\n      } else if (initLayout === 'circular') {\n        circularLayout(graphSeries);\n      }\n\n      var nodeDataExtent = nodeData.getDataExtent('value');\n      var edgeDataExtent = edgeData.getDataExtent('value'); // var edgeDataExtent = edgeData.getDataExtent('value');\n\n      var repulsion = forceModel.get('repulsion');\n      var edgeLength = forceModel.get('edgeLength');\n\n      if (!zrUtil.isArray(repulsion)) {\n        repulsion = [repulsion, repulsion];\n      }\n\n      if (!zrUtil.isArray(edgeLength)) {\n        edgeLength = [edgeLength, edgeLength];\n      } // Larger value has smaller length\n\n\n      edgeLength = [edgeLength[1], edgeLength[0]];\n      var nodes = nodeData.mapArray('value', function (value, idx) {\n        var point = nodeData.getItemLayout(idx);\n        var rep = linearMap(value, nodeDataExtent, repulsion);\n\n        if (isNaN(rep)) {\n          rep = (repulsion[0] + repulsion[1]) / 2;\n        }\n\n        return {\n          w: rep,\n          rep: rep,\n          fixed: nodeData.getItemModel(idx).get('fixed'),\n          p: !point || isNaN(point[0]) || isNaN(point[1]) ? null : point\n        };\n      });\n      var edges = edgeData.mapArray('value', function (value, idx) {\n        var edge = graph.getEdgeByIndex(idx);\n        var d = linearMap(value, edgeDataExtent, edgeLength);\n\n        if (isNaN(d)) {\n          d = (edgeLength[0] + edgeLength[1]) / 2;\n        }\n\n        return {\n          n1: nodes[edge.node1.dataIndex],\n          n2: nodes[edge.node2.dataIndex],\n          d: d,\n          curveness: edge.getModel().get('lineStyle.normal.curveness') || 0\n        };\n      });\n      var coordSys = graphSeries.coordinateSystem;\n      var rect = coordSys.getBoundingRect();\n      var forceInstance = forceLayout(nodes, edges, {\n        rect: rect,\n        gravity: forceModel.get('gravity')\n      });\n      var oldStep = forceInstance.step;\n\n      forceInstance.step = function (cb) {\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          if (nodes[i].fixed) {\n            // Write back to layout instance\n            vec2.copy(nodes[i].p, graph.getNodeByIndex(i).getLayout());\n          }\n        }\n\n        oldStep(function (nodes, edges, stopped) {\n          for (var i = 0, l = nodes.length; i < l; i++) {\n            if (!nodes[i].fixed) {\n              graph.getNodeByIndex(i).setLayout(nodes[i].p);\n            }\n\n            preservedPoints[nodeData.getId(i)] = nodes[i].p;\n          }\n\n          for (var i = 0, l = edges.length; i < l; i++) {\n            var e = edges[i];\n            var edge = graph.getEdgeByIndex(i);\n            var p1 = e.n1.p;\n            var p2 = e.n2.p;\n            var points = edge.getLayout();\n            points = points ? points.slice() : [];\n            points[0] = points[0] || [];\n            points[1] = points[1] || [];\n            vec2.copy(points[0], p1);\n            vec2.copy(points[1], p2);\n\n            if (+e.curveness) {\n              points[2] = [(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness];\n            }\n\n            edge.setLayout(points);\n          } // Update layout\n\n\n          cb && cb(stopped);\n        });\n      };\n\n      graphSeries.forceLayout = forceInstance;\n      graphSeries.preservedPoints = preservedPoints; // Step to get the layout\n\n      forceInstance.step();\n    } else {\n      // Remove prev injected forceLayout instance\n      graphSeries.forceLayout = null;\n    }\n  });\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/graph/forceLayout.js"],"names":["_forceHelper","require","forceLayout","_simpleLayoutHelper","simpleLayout","_circularLayoutHelper","circularLayout","_number","linearMap","vec2","zrUtil","_default","ecModel","eachSeriesByType","graphSeries","coordSys","coordinateSystem","type","get","preservedPoints","graph","getGraph","nodeData","data","edgeData","forceModel","getModel","initLayout","each","idx","id","getId","setItemLayout","NaN","nodeDataExtent","getDataExtent","edgeDataExtent","repulsion","edgeLength","isArray","nodes","mapArray","value","point","getItemLayout","rep","isNaN","w","fixed","getItemModel","p","edges","edge","getEdgeByIndex","d","n1","node1","dataIndex","n2","node2","curveness","rect","getBoundingRect","forceInstance","gravity","oldStep","step","cb","i","l","length","copy","getNodeByIndex","getLayout","stopped","setLayout","e","p1","p2","points","slice","module","exports"],"mappings":"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","sourcesContent":["var _forceHelper = require(\"./forceHelper\");\n\nvar forceLayout = _forceHelper.forceLayout;\n\nvar _simpleLayoutHelper = require(\"./simpleLayoutHelper\");\n\nvar simpleLayout = _simpleLayoutHelper.simpleLayout;\n\nvar _circularLayoutHelper = require(\"./circularLayoutHelper\");\n\nvar circularLayout = _circularLayoutHelper.circularLayout;\n\nvar _number = require(\"../../util/number\");\n\nvar linearMap = _number.linearMap;\n\nvar vec2 = require(\"zrender/lib/core/vector\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nfunction _default(ecModel) {\n  ecModel.eachSeriesByType('graph', function (graphSeries) {\n    var coordSys = graphSeries.coordinateSystem;\n\n    if (coordSys && coordSys.type !== 'view') {\n      return;\n    }\n\n    if (graphSeries.get('layout') === 'force') {\n      var preservedPoints = graphSeries.preservedPoints || {};\n      var graph = graphSeries.getGraph();\n      var nodeData = graph.data;\n      var edgeData = graph.edgeData;\n      var forceModel = graphSeries.getModel('force');\n      var initLayout = forceModel.get('initLayout');\n\n      if (graphSeries.preservedPoints) {\n        nodeData.each(function (idx) {\n          var id = nodeData.getId(idx);\n          nodeData.setItemLayout(idx, preservedPoints[id] || [NaN, NaN]);\n        });\n      } else if (!initLayout || initLayout === 'none') {\n        simpleLayout(graphSeries);\n      } else if (initLayout === 'circular') {\n        circularLayout(graphSeries);\n      }\n\n      var nodeDataExtent = nodeData.getDataExtent('value');\n      var edgeDataExtent = edgeData.getDataExtent('value'); // var edgeDataExtent = edgeData.getDataExtent('value');\n\n      var repulsion = forceModel.get('repulsion');\n      var edgeLength = forceModel.get('edgeLength');\n\n      if (!zrUtil.isArray(repulsion)) {\n        repulsion = [repulsion, repulsion];\n      }\n\n      if (!zrUtil.isArray(edgeLength)) {\n        edgeLength = [edgeLength, edgeLength];\n      } // Larger value has smaller length\n\n\n      edgeLength = [edgeLength[1], edgeLength[0]];\n      var nodes = nodeData.mapArray('value', function (value, idx) {\n        var point = nodeData.getItemLayout(idx);\n        var rep = linearMap(value, nodeDataExtent, repulsion);\n\n        if (isNaN(rep)) {\n          rep = (repulsion[0] + repulsion[1]) / 2;\n        }\n\n        return {\n          w: rep,\n          rep: rep,\n          fixed: nodeData.getItemModel(idx).get('fixed'),\n          p: !point || isNaN(point[0]) || isNaN(point[1]) ? null : point\n        };\n      });\n      var edges = edgeData.mapArray('value', function (value, idx) {\n        var edge = graph.getEdgeByIndex(idx);\n        var d = linearMap(value, edgeDataExtent, edgeLength);\n\n        if (isNaN(d)) {\n          d = (edgeLength[0] + edgeLength[1]) / 2;\n        }\n\n        return {\n          n1: nodes[edge.node1.dataIndex],\n          n2: nodes[edge.node2.dataIndex],\n          d: d,\n          curveness: edge.getModel().get('lineStyle.normal.curveness') || 0\n        };\n      });\n      var coordSys = graphSeries.coordinateSystem;\n      var rect = coordSys.getBoundingRect();\n      var forceInstance = forceLayout(nodes, edges, {\n        rect: rect,\n        gravity: forceModel.get('gravity')\n      });\n      var oldStep = forceInstance.step;\n\n      forceInstance.step = function (cb) {\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          if (nodes[i].fixed) {\n            // Write back to layout instance\n            vec2.copy(nodes[i].p, graph.getNodeByIndex(i).getLayout());\n          }\n        }\n\n        oldStep(function (nodes, edges, stopped) {\n          for (var i = 0, l = nodes.length; i < l; i++) {\n            if (!nodes[i].fixed) {\n              graph.getNodeByIndex(i).setLayout(nodes[i].p);\n            }\n\n            preservedPoints[nodeData.getId(i)] = nodes[i].p;\n          }\n\n          for (var i = 0, l = edges.length; i < l; i++) {\n            var e = edges[i];\n            var edge = graph.getEdgeByIndex(i);\n            var p1 = e.n1.p;\n            var p2 = e.n2.p;\n            var points = edge.getLayout();\n            points = points ? points.slice() : [];\n            points[0] = points[0] || [];\n            points[1] = points[1] || [];\n            vec2.copy(points[0], p1);\n            vec2.copy(points[1], p2);\n\n            if (+e.curveness) {\n              points[2] = [(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness];\n            }\n\n            edge.setLayout(points);\n          } // Update layout\n\n\n          cb && cb(stopped);\n        });\n      };\n\n      graphSeries.forceLayout = forceInstance;\n      graphSeries.preservedPoints = preservedPoints; // Step to get the layout\n\n      forceInstance.step();\n    } else {\n      // Remove prev injected forceLayout instance\n      graphSeries.forceLayout = null;\n    }\n  });\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}