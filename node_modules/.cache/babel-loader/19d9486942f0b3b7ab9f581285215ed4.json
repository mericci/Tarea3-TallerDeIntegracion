{"ast":null,"code":"var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar SymbolDraw = require(\"../helper/SymbolDraw\");\n\nvar SymbolClz = require(\"../helper/Symbol\");\n\nvar lineAnimationDiff = require(\"./lineAnimationDiff\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar modelUtil = require(\"../../util/model\");\n\nvar _poly = require(\"./poly\");\n\nvar Polyline = _poly.Polyline;\nvar Polygon = _poly.Polygon;\n\nvar ChartView = require(\"../../view/Chart\"); // FIXME step not support polar\n\n\nfunction isPointsSame(points1, points2) {\n  if (points1.length !== points2.length) {\n    return;\n  }\n\n  for (var i = 0; i < points1.length; i++) {\n    var p1 = points1[i];\n    var p2 = points2[i];\n\n    if (p1[0] !== p2[0] || p1[1] !== p2[1]) {\n      return;\n    }\n  }\n\n  return true;\n}\n\nfunction getSmooth(smooth) {\n  return typeof smooth === 'number' ? smooth : smooth ? 0.3 : 0;\n}\n\nfunction getAxisExtentWithGap(axis) {\n  var extent = axis.getGlobalExtent();\n\n  if (axis.onBand) {\n    // Remove extra 1px to avoid line miter in clipped edge\n    var halfBandWidth = axis.getBandWidth() / 2 - 1;\n    var dir = extent[1] > extent[0] ? 1 : -1;\n    extent[0] += dir * halfBandWidth;\n    extent[1] -= dir * halfBandWidth;\n  }\n\n  return extent;\n}\n\nfunction sign(val) {\n  return val >= 0 ? 1 : -1;\n}\n/**\n * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys\n * @param {module:echarts/data/List} data\n * @param {Array.<Array.<number>>} points\n * @private\n */\n\n\nfunction getStackedOnPoints(coordSys, data) {\n  var baseAxis = coordSys.getBaseAxis();\n  var valueAxis = coordSys.getOtherAxis(baseAxis);\n  var valueStart = 0;\n\n  if (!baseAxis.onZero) {\n    var extent = valueAxis.scale.getExtent();\n\n    if (extent[0] > 0) {\n      // Both positive\n      valueStart = extent[0];\n    } else if (extent[1] < 0) {\n      // Both negative\n      valueStart = extent[1];\n    } // If is one positive, and one negative, onZero shall be true\n\n  }\n\n  var valueDim = valueAxis.dim;\n  var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n  return data.mapArray([valueDim], function (val, idx) {\n    var stackedOnSameSign;\n    var stackedOn = data.stackedOn; // Find first stacked value with same sign\n\n    while (stackedOn && sign(stackedOn.get(valueDim, idx)) === sign(val)) {\n      stackedOnSameSign = stackedOn;\n      break;\n    }\n\n    var stackedData = [];\n    stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n    stackedData[1 - baseDataOffset] = stackedOnSameSign ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n    return coordSys.dataToPoint(stackedData);\n  }, true);\n}\n\nfunction createGridClipShape(cartesian, hasAnimation, seriesModel) {\n  var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));\n  var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));\n  var isHorizontal = cartesian.getBaseAxis().isHorizontal();\n  var x = Math.min(xExtent[0], xExtent[1]);\n  var y = Math.min(yExtent[0], yExtent[1]);\n  var width = Math.max(xExtent[0], xExtent[1]) - x;\n  var height = Math.max(yExtent[0], yExtent[1]) - y;\n  var lineWidth = seriesModel.get('lineStyle.normal.width') || 2; // Expand clip shape to avoid clipping when line value exceeds axis\n\n  var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);\n\n  if (isHorizontal) {\n    y -= expandSize;\n    height += expandSize * 2;\n  } else {\n    x -= expandSize;\n    width += expandSize * 2;\n  }\n\n  var clipPath = new graphic.Rect({\n    shape: {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }\n  });\n\n  if (hasAnimation) {\n    clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\n    graphic.initProps(clipPath, {\n      shape: {\n        width: width,\n        height: height\n      }\n    }, seriesModel);\n  }\n\n  return clipPath;\n}\n\nfunction createPolarClipShape(polar, hasAnimation, seriesModel) {\n  var angleAxis = polar.getAngleAxis();\n  var radiusAxis = polar.getRadiusAxis();\n  var radiusExtent = radiusAxis.getExtent();\n  var angleExtent = angleAxis.getExtent();\n  var RADIAN = Math.PI / 180;\n  var clipPath = new graphic.Sector({\n    shape: {\n      cx: polar.cx,\n      cy: polar.cy,\n      r0: radiusExtent[0],\n      r: radiusExtent[1],\n      startAngle: -angleExtent[0] * RADIAN,\n      endAngle: -angleExtent[1] * RADIAN,\n      clockwise: angleAxis.inverse\n    }\n  });\n\n  if (hasAnimation) {\n    clipPath.shape.endAngle = -angleExtent[0] * RADIAN;\n    graphic.initProps(clipPath, {\n      shape: {\n        endAngle: -angleExtent[1] * RADIAN\n      }\n    }, seriesModel);\n  }\n\n  return clipPath;\n}\n\nfunction createClipShape(coordSys, hasAnimation, seriesModel) {\n  return coordSys.type === 'polar' ? createPolarClipShape(coordSys, hasAnimation, seriesModel) : createGridClipShape(coordSys, hasAnimation, seriesModel);\n}\n\nfunction turnPointsIntoStep(points, coordSys, stepTurnAt) {\n  var baseAxis = coordSys.getBaseAxis();\n  var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\n  var stepPoints = [];\n\n  for (var i = 0; i < points.length - 1; i++) {\n    var nextPt = points[i + 1];\n    var pt = points[i];\n    stepPoints.push(pt);\n    var stepPt = [];\n\n    switch (stepTurnAt) {\n      case 'end':\n        stepPt[baseIndex] = nextPt[baseIndex];\n        stepPt[1 - baseIndex] = pt[1 - baseIndex]; // default is start\n\n        stepPoints.push(stepPt);\n        break;\n\n      case 'middle':\n        // default is start\n        var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\n        var stepPt2 = [];\n        stepPt[baseIndex] = stepPt2[baseIndex] = middle;\n        stepPt[1 - baseIndex] = pt[1 - baseIndex];\n        stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\n        stepPoints.push(stepPt);\n        stepPoints.push(stepPt2);\n        break;\n\n      default:\n        stepPt[baseIndex] = pt[baseIndex];\n        stepPt[1 - baseIndex] = nextPt[1 - baseIndex]; // default is start\n\n        stepPoints.push(stepPt);\n    }\n  } // Last points\n\n\n  points[i] && stepPoints.push(points[i]);\n  return stepPoints;\n}\n\nfunction getVisualGradient(data, coordSys) {\n  var visualMetaList = data.getVisual('visualMeta');\n\n  if (!visualMetaList || !visualMetaList.length || !data.count()) {\n    // When data.count() is 0, gradient range can not be calculated.\n    return;\n  }\n\n  var visualMeta;\n\n  for (var i = visualMetaList.length - 1; i >= 0; i--) {\n    // Can only be x or y\n    if (visualMetaList[i].dimension < 2) {\n      visualMeta = visualMetaList[i];\n      break;\n    }\n  }\n\n  if (!visualMeta || coordSys.type !== 'cartesian2d') {\n    return;\n  } // If the area to be rendered is bigger than area defined by LinearGradient,\n  // the canvas spec prescribes that the color of the first stop and the last\n  // stop should be used. But if two stops are added at offset 0, in effect\n  // browsers use the color of the second stop to render area outside\n  // LinearGradient. So we can only infinitesimally extend area defined in\n  // LinearGradient to render `outerColors`.\n\n\n  var dimension = visualMeta.dimension;\n  var dimName = data.dimensions[dimension];\n  var axis = coordSys.getAxis(dimName); // dataToCoor mapping may not be linear, but must be monotonic.\n\n  var colorStops = zrUtil.map(visualMeta.stops, function (stop) {\n    return {\n      coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),\n      color: stop.color\n    };\n  });\n  var stopLen = colorStops.length;\n  var outerColors = visualMeta.outerColors.slice();\n\n  if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {\n    colorStops.reverse();\n    outerColors.reverse();\n  }\n\n  var tinyExtent = 10; // Arbitrary value: 10px\n\n  var minCoord = colorStops[0].coord - tinyExtent;\n  var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;\n  var coordSpan = maxCoord - minCoord;\n\n  if (coordSpan < 1e-3) {\n    return 'transparent';\n  }\n\n  zrUtil.each(colorStops, function (stop) {\n    stop.offset = (stop.coord - minCoord) / coordSpan;\n  });\n  colorStops.push({\n    offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,\n    color: outerColors[1] || 'transparent'\n  });\n  colorStops.unshift({\n    // notice colorStops.length have been changed.\n    offset: stopLen ? colorStops[0].offset : 0.5,\n    color: outerColors[0] || 'transparent'\n  }); // zrUtil.each(colorStops, function (colorStop) {\n  //     // Make sure each offset has rounded px to avoid not sharp edge\n  //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);\n  // });\n\n  var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);\n  gradient[dimName] = minCoord;\n  gradient[dimName + '2'] = maxCoord;\n  return gradient;\n}\n\nvar _default = ChartView.extend({\n  type: 'line',\n  init: function () {\n    var lineGroup = new graphic.Group();\n    var symbolDraw = new SymbolDraw();\n    this.group.add(symbolDraw.group);\n    this._symbolDraw = symbolDraw;\n    this._lineGroup = lineGroup;\n  },\n  render: function (seriesModel, ecModel, api) {\n    var coordSys = seriesModel.coordinateSystem;\n    var group = this.group;\n    var data = seriesModel.getData();\n    var lineStyleModel = seriesModel.getModel('lineStyle.normal');\n    var areaStyleModel = seriesModel.getModel('areaStyle.normal');\n    var points = data.mapArray(data.getItemLayout, true);\n    var isCoordSysPolar = coordSys.type === 'polar';\n    var prevCoordSys = this._coordSys;\n    var symbolDraw = this._symbolDraw;\n    var polyline = this._polyline;\n    var polygon = this._polygon;\n    var lineGroup = this._lineGroup;\n    var hasAnimation = seriesModel.get('animation');\n    var isAreaChart = !areaStyleModel.isEmpty();\n    var stackedOnPoints = getStackedOnPoints(coordSys, data);\n    var showSymbol = seriesModel.get('showSymbol');\n\n    var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol') && this._getSymbolIgnoreFunc(data, coordSys); // Remove temporary symbols\n\n\n    var oldData = this._data;\n    oldData && oldData.eachItemGraphicEl(function (el, idx) {\n      if (el.__temp) {\n        group.remove(el);\n        oldData.setItemGraphicEl(idx, null);\n      }\n    }); // Remove previous created symbols if showSymbol changed to false\n\n    if (!showSymbol) {\n      symbolDraw.remove();\n    }\n\n    group.add(lineGroup); // FIXME step not support polar\n\n    var step = !isCoordSysPolar && seriesModel.get('step'); // Initialization animation or coordinate system changed\n\n    if (!(polyline && prevCoordSys.type === coordSys.type && step === this._step)) {\n      showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n      if (step) {\n        // TODO If stacked series is not step\n        points = turnPointsIntoStep(points, coordSys, step);\n        stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n      }\n\n      polyline = this._newPolyline(points, coordSys, hasAnimation);\n\n      if (isAreaChart) {\n        polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);\n      }\n\n      lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));\n    } else {\n      if (isAreaChart && !polygon) {\n        // If areaStyle is added\n        polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);\n      } else if (polygon && !isAreaChart) {\n        // If areaStyle is removed\n        lineGroup.remove(polygon);\n        polygon = this._polygon = null;\n      } // Update clipPath\n\n\n      lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel)); // Always update, or it is wrong in the case turning on legend\n      // because points are not changed\n\n      showSymbol && symbolDraw.updateData(data, isSymbolIgnore); // Stop symbol animation and sync with line points\n      // FIXME performance?\n\n      data.eachItemGraphicEl(function (el) {\n        el.stopAnimation(true);\n      }); // In the case data zoom triggerred refreshing frequently\n      // Data may not change if line has a category axis. So it should animate nothing\n\n      if (!isPointsSame(this._stackedOnPoints, stackedOnPoints) || !isPointsSame(this._points, points)) {\n        if (hasAnimation) {\n          this._updateAnimation(data, stackedOnPoints, coordSys, api, step);\n        } else {\n          // Not do it in update with animation\n          if (step) {\n            // TODO If stacked series is not step\n            points = turnPointsIntoStep(points, coordSys, step);\n            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n          }\n\n          polyline.setShape({\n            points: points\n          });\n          polygon && polygon.setShape({\n            points: points,\n            stackedOnPoints: stackedOnPoints\n          });\n        }\n      }\n    }\n\n    var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');\n    polyline.useStyle(zrUtil.defaults( // Use color in lineStyle first\n    lineStyleModel.getLineStyle(), {\n      fill: 'none',\n      stroke: visualColor,\n      lineJoin: 'bevel'\n    }));\n    var smooth = seriesModel.get('smooth');\n    smooth = getSmooth(seriesModel.get('smooth'));\n    polyline.setShape({\n      smooth: smooth,\n      smoothMonotone: seriesModel.get('smoothMonotone'),\n      connectNulls: seriesModel.get('connectNulls')\n    });\n\n    if (polygon) {\n      var stackedOn = data.stackedOn;\n      var stackedOnSmooth = 0;\n      polygon.useStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {\n        fill: visualColor,\n        opacity: 0.7,\n        lineJoin: 'bevel'\n      }));\n\n      if (stackedOn) {\n        var stackedOnSeries = stackedOn.hostModel;\n        stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\n      }\n\n      polygon.setShape({\n        smooth: smooth,\n        stackedOnSmooth: stackedOnSmooth,\n        smoothMonotone: seriesModel.get('smoothMonotone'),\n        connectNulls: seriesModel.get('connectNulls')\n      });\n    }\n\n    this._data = data; // Save the coordinate system for transition animation when data changed\n\n    this._coordSys = coordSys;\n    this._stackedOnPoints = stackedOnPoints;\n    this._points = points;\n    this._step = step;\n  },\n  dispose: function () {},\n  highlight: function (seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n    if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\n      var symbol = data.getItemGraphicEl(dataIndex);\n\n      if (!symbol) {\n        // Create a temporary symbol if it is not exists\n        var pt = data.getItemLayout(dataIndex);\n\n        if (!pt) {\n          // Null data\n          return;\n        }\n\n        symbol = new SymbolClz(data, dataIndex);\n        symbol.position = pt;\n        symbol.setZ(seriesModel.get('zlevel'), seriesModel.get('z'));\n        symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);\n        symbol.__temp = true;\n        data.setItemGraphicEl(dataIndex, symbol); // Stop scale animation\n\n        symbol.stopSymbolAnimation(true);\n        this.group.add(symbol);\n      }\n\n      symbol.highlight();\n    } else {\n      // Highlight whole series\n      ChartView.prototype.highlight.call(this, seriesModel, ecModel, api, payload);\n    }\n  },\n  downplay: function (seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n    if (dataIndex != null && dataIndex >= 0) {\n      var symbol = data.getItemGraphicEl(dataIndex);\n\n      if (symbol) {\n        if (symbol.__temp) {\n          data.setItemGraphicEl(dataIndex, null);\n          this.group.remove(symbol);\n        } else {\n          symbol.downplay();\n        }\n      }\n    } else {\n      // FIXME\n      // can not downplay completely.\n      // Downplay whole series\n      ChartView.prototype.downplay.call(this, seriesModel, ecModel, api, payload);\n    }\n  },\n\n  /**\n   * @param {module:zrender/container/Group} group\n   * @param {Array.<Array.<number>>} points\n   * @private\n   */\n  _newPolyline: function (points) {\n    var polyline = this._polyline; // Remove previous created polyline\n\n    if (polyline) {\n      this._lineGroup.remove(polyline);\n    }\n\n    polyline = new Polyline({\n      shape: {\n        points: points\n      },\n      silent: true,\n      z2: 10\n    });\n\n    this._lineGroup.add(polyline);\n\n    this._polyline = polyline;\n    return polyline;\n  },\n\n  /**\n   * @param {module:zrender/container/Group} group\n   * @param {Array.<Array.<number>>} stackedOnPoints\n   * @param {Array.<Array.<number>>} points\n   * @private\n   */\n  _newPolygon: function (points, stackedOnPoints) {\n    var polygon = this._polygon; // Remove previous created polygon\n\n    if (polygon) {\n      this._lineGroup.remove(polygon);\n    }\n\n    polygon = new Polygon({\n      shape: {\n        points: points,\n        stackedOnPoints: stackedOnPoints\n      },\n      silent: true\n    });\n\n    this._lineGroup.add(polygon);\n\n    this._polygon = polygon;\n    return polygon;\n  },\n\n  /**\n   * @private\n   */\n  _getSymbolIgnoreFunc: function (data, coordSys) {\n    var categoryAxis = coordSys.getAxesByScale('ordinal')[0]; // `getLabelInterval` is provided by echarts/component/axis\n\n    if (categoryAxis && categoryAxis.isLabelIgnored) {\n      return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);\n    }\n  },\n\n  /**\n   * @private\n   */\n  // FIXME Two value axis\n  _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {\n    var polyline = this._polyline;\n    var polygon = this._polygon;\n    var seriesModel = data.hostModel;\n    var diff = lineAnimationDiff(this._data, data, this._stackedOnPoints, stackedOnPoints, this._coordSys, coordSys);\n    var current = diff.current;\n    var stackedOnCurrent = diff.stackedOnCurrent;\n    var next = diff.next;\n    var stackedOnNext = diff.stackedOnNext;\n\n    if (step) {\n      // TODO If stacked series is not step\n      current = turnPointsIntoStep(diff.current, coordSys, step);\n      stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\n      next = turnPointsIntoStep(diff.next, coordSys, step);\n      stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\n    } // `diff.current` is subset of `current` (which should be ensured by\n    // turnPointsIntoStep), so points in `__points` can be updated when\n    // points in `current` are update during animation.\n\n\n    polyline.shape.__points = diff.current;\n    polyline.shape.points = current;\n    graphic.updateProps(polyline, {\n      shape: {\n        points: next\n      }\n    }, seriesModel);\n\n    if (polygon) {\n      polygon.setShape({\n        points: current,\n        stackedOnPoints: stackedOnCurrent\n      });\n      graphic.updateProps(polygon, {\n        shape: {\n          points: next,\n          stackedOnPoints: stackedOnNext\n        }\n      }, seriesModel);\n    }\n\n    var updatedDataInfo = [];\n    var diffStatus = diff.status;\n\n    for (var i = 0; i < diffStatus.length; i++) {\n      var cmd = diffStatus[i].cmd;\n\n      if (cmd === '=') {\n        var el = data.getItemGraphicEl(diffStatus[i].idx1);\n\n        if (el) {\n          updatedDataInfo.push({\n            el: el,\n            ptIdx: i // Index of points\n\n          });\n        }\n      }\n    }\n\n    if (polyline.animators && polyline.animators.length) {\n      polyline.animators[0].during(function () {\n        for (var i = 0; i < updatedDataInfo.length; i++) {\n          var el = updatedDataInfo[i].el;\n          el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);\n        }\n      });\n    }\n  },\n  remove: function (ecModel) {\n    var group = this.group;\n    var oldData = this._data;\n\n    this._lineGroup.removeAll();\n\n    this._symbolDraw.remove(true); // Remove temporary created elements when highlighting\n\n\n    oldData && oldData.eachItemGraphicEl(function (el, idx) {\n      if (el.__temp) {\n        group.remove(el);\n        oldData.setItemGraphicEl(idx, null);\n      }\n    });\n    this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/line/LineView.js"],"names":["_config","require","__DEV__","zrUtil","SymbolDraw","SymbolClz","lineAnimationDiff","graphic","modelUtil","_poly","Polyline","Polygon","ChartView","isPointsSame","points1","points2","length","i","p1","p2","getSmooth","smooth","getAxisExtentWithGap","axis","extent","getGlobalExtent","onBand","halfBandWidth","getBandWidth","dir","sign","val","getStackedOnPoints","coordSys","data","baseAxis","getBaseAxis","valueAxis","getOtherAxis","valueStart","onZero","scale","getExtent","valueDim","dim","baseDataOffset","mapArray","idx","stackedOnSameSign","stackedOn","get","stackedData","dataToPoint","createGridClipShape","cartesian","hasAnimation","seriesModel","xExtent","getAxis","yExtent","isHorizontal","x","Math","min","y","width","max","height","lineWidth","expandSize","clipPath","Rect","shape","initProps","createPolarClipShape","polar","angleAxis","getAngleAxis","radiusAxis","getRadiusAxis","radiusExtent","angleExtent","RADIAN","PI","Sector","cx","cy","r0","r","startAngle","endAngle","clockwise","inverse","createClipShape","type","turnPointsIntoStep","points","stepTurnAt","baseIndex","stepPoints","nextPt","pt","push","stepPt","middle","stepPt2","getVisualGradient","visualMetaList","getVisual","count","visualMeta","dimension","dimName","dimensions","colorStops","map","stops","stop","coord","toGlobalCoord","dataToCoord","value","color","stopLen","outerColors","slice","reverse","tinyExtent","minCoord","maxCoord","coordSpan","each","offset","unshift","gradient","LinearGradient","_default","extend","init","lineGroup","Group","symbolDraw","group","add","_symbolDraw","_lineGroup","render","ecModel","api","coordinateSystem","getData","lineStyleModel","getModel","areaStyleModel","getItemLayout","isCoordSysPolar","prevCoordSys","_coordSys","polyline","_polyline","polygon","_polygon","isAreaChart","isEmpty","stackedOnPoints","showSymbol","isSymbolIgnore","_getSymbolIgnoreFunc","oldData","_data","eachItemGraphicEl","el","__temp","remove","setItemGraphicEl","step","_step","updateData","_newPolyline","_newPolygon","setClipPath","stopAnimation","_stackedOnPoints","_points","_updateAnimation","setShape","visualColor","useStyle","defaults","getLineStyle","fill","stroke","lineJoin","smoothMonotone","connectNulls","stackedOnSmooth","getAreaStyle","opacity","stackedOnSeries","hostModel","dispose","highlight","payload","dataIndex","queryDataIndex","Array","symbol","getItemGraphicEl","position","setZ","ignore","isNaN","stopSymbolAnimation","prototype","call","downplay","silent","z2","categoryAxis","getAxesByScale","isLabelIgnored","bind","diff","current","stackedOnCurrent","next","stackedOnNext","__points","updateProps","updatedDataInfo","diffStatus","status","cmd","idx1","ptIdx","animators","during","attr","removeAll","module","exports"],"mappings":"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","sourcesContent":["var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar SymbolDraw = require(\"../helper/SymbolDraw\");\n\nvar SymbolClz = require(\"../helper/Symbol\");\n\nvar lineAnimationDiff = require(\"./lineAnimationDiff\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar modelUtil = require(\"../../util/model\");\n\nvar _poly = require(\"./poly\");\n\nvar Polyline = _poly.Polyline;\nvar Polygon = _poly.Polygon;\n\nvar ChartView = require(\"../../view/Chart\");\n\n// FIXME step not support polar\nfunction isPointsSame(points1, points2) {\n  if (points1.length !== points2.length) {\n    return;\n  }\n\n  for (var i = 0; i < points1.length; i++) {\n    var p1 = points1[i];\n    var p2 = points2[i];\n\n    if (p1[0] !== p2[0] || p1[1] !== p2[1]) {\n      return;\n    }\n  }\n\n  return true;\n}\n\nfunction getSmooth(smooth) {\n  return typeof smooth === 'number' ? smooth : smooth ? 0.3 : 0;\n}\n\nfunction getAxisExtentWithGap(axis) {\n  var extent = axis.getGlobalExtent();\n\n  if (axis.onBand) {\n    // Remove extra 1px to avoid line miter in clipped edge\n    var halfBandWidth = axis.getBandWidth() / 2 - 1;\n    var dir = extent[1] > extent[0] ? 1 : -1;\n    extent[0] += dir * halfBandWidth;\n    extent[1] -= dir * halfBandWidth;\n  }\n\n  return extent;\n}\n\nfunction sign(val) {\n  return val >= 0 ? 1 : -1;\n}\n/**\n * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys\n * @param {module:echarts/data/List} data\n * @param {Array.<Array.<number>>} points\n * @private\n */\n\n\nfunction getStackedOnPoints(coordSys, data) {\n  var baseAxis = coordSys.getBaseAxis();\n  var valueAxis = coordSys.getOtherAxis(baseAxis);\n  var valueStart = 0;\n\n  if (!baseAxis.onZero) {\n    var extent = valueAxis.scale.getExtent();\n\n    if (extent[0] > 0) {\n      // Both positive\n      valueStart = extent[0];\n    } else if (extent[1] < 0) {\n      // Both negative\n      valueStart = extent[1];\n    } // If is one positive, and one negative, onZero shall be true\n\n  }\n\n  var valueDim = valueAxis.dim;\n  var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n  return data.mapArray([valueDim], function (val, idx) {\n    var stackedOnSameSign;\n    var stackedOn = data.stackedOn; // Find first stacked value with same sign\n\n    while (stackedOn && sign(stackedOn.get(valueDim, idx)) === sign(val)) {\n      stackedOnSameSign = stackedOn;\n      break;\n    }\n\n    var stackedData = [];\n    stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n    stackedData[1 - baseDataOffset] = stackedOnSameSign ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n    return coordSys.dataToPoint(stackedData);\n  }, true);\n}\n\nfunction createGridClipShape(cartesian, hasAnimation, seriesModel) {\n  var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));\n  var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));\n  var isHorizontal = cartesian.getBaseAxis().isHorizontal();\n  var x = Math.min(xExtent[0], xExtent[1]);\n  var y = Math.min(yExtent[0], yExtent[1]);\n  var width = Math.max(xExtent[0], xExtent[1]) - x;\n  var height = Math.max(yExtent[0], yExtent[1]) - y;\n  var lineWidth = seriesModel.get('lineStyle.normal.width') || 2; // Expand clip shape to avoid clipping when line value exceeds axis\n\n  var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);\n\n  if (isHorizontal) {\n    y -= expandSize;\n    height += expandSize * 2;\n  } else {\n    x -= expandSize;\n    width += expandSize * 2;\n  }\n\n  var clipPath = new graphic.Rect({\n    shape: {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }\n  });\n\n  if (hasAnimation) {\n    clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\n    graphic.initProps(clipPath, {\n      shape: {\n        width: width,\n        height: height\n      }\n    }, seriesModel);\n  }\n\n  return clipPath;\n}\n\nfunction createPolarClipShape(polar, hasAnimation, seriesModel) {\n  var angleAxis = polar.getAngleAxis();\n  var radiusAxis = polar.getRadiusAxis();\n  var radiusExtent = radiusAxis.getExtent();\n  var angleExtent = angleAxis.getExtent();\n  var RADIAN = Math.PI / 180;\n  var clipPath = new graphic.Sector({\n    shape: {\n      cx: polar.cx,\n      cy: polar.cy,\n      r0: radiusExtent[0],\n      r: radiusExtent[1],\n      startAngle: -angleExtent[0] * RADIAN,\n      endAngle: -angleExtent[1] * RADIAN,\n      clockwise: angleAxis.inverse\n    }\n  });\n\n  if (hasAnimation) {\n    clipPath.shape.endAngle = -angleExtent[0] * RADIAN;\n    graphic.initProps(clipPath, {\n      shape: {\n        endAngle: -angleExtent[1] * RADIAN\n      }\n    }, seriesModel);\n  }\n\n  return clipPath;\n}\n\nfunction createClipShape(coordSys, hasAnimation, seriesModel) {\n  return coordSys.type === 'polar' ? createPolarClipShape(coordSys, hasAnimation, seriesModel) : createGridClipShape(coordSys, hasAnimation, seriesModel);\n}\n\nfunction turnPointsIntoStep(points, coordSys, stepTurnAt) {\n  var baseAxis = coordSys.getBaseAxis();\n  var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\n  var stepPoints = [];\n\n  for (var i = 0; i < points.length - 1; i++) {\n    var nextPt = points[i + 1];\n    var pt = points[i];\n    stepPoints.push(pt);\n    var stepPt = [];\n\n    switch (stepTurnAt) {\n      case 'end':\n        stepPt[baseIndex] = nextPt[baseIndex];\n        stepPt[1 - baseIndex] = pt[1 - baseIndex]; // default is start\n\n        stepPoints.push(stepPt);\n        break;\n\n      case 'middle':\n        // default is start\n        var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\n        var stepPt2 = [];\n        stepPt[baseIndex] = stepPt2[baseIndex] = middle;\n        stepPt[1 - baseIndex] = pt[1 - baseIndex];\n        stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\n        stepPoints.push(stepPt);\n        stepPoints.push(stepPt2);\n        break;\n\n      default:\n        stepPt[baseIndex] = pt[baseIndex];\n        stepPt[1 - baseIndex] = nextPt[1 - baseIndex]; // default is start\n\n        stepPoints.push(stepPt);\n    }\n  } // Last points\n\n\n  points[i] && stepPoints.push(points[i]);\n  return stepPoints;\n}\n\nfunction getVisualGradient(data, coordSys) {\n  var visualMetaList = data.getVisual('visualMeta');\n\n  if (!visualMetaList || !visualMetaList.length || !data.count()) {\n    // When data.count() is 0, gradient range can not be calculated.\n    return;\n  }\n\n  var visualMeta;\n\n  for (var i = visualMetaList.length - 1; i >= 0; i--) {\n    // Can only be x or y\n    if (visualMetaList[i].dimension < 2) {\n      visualMeta = visualMetaList[i];\n      break;\n    }\n  }\n\n  if (!visualMeta || coordSys.type !== 'cartesian2d') {\n    return;\n  } // If the area to be rendered is bigger than area defined by LinearGradient,\n  // the canvas spec prescribes that the color of the first stop and the last\n  // stop should be used. But if two stops are added at offset 0, in effect\n  // browsers use the color of the second stop to render area outside\n  // LinearGradient. So we can only infinitesimally extend area defined in\n  // LinearGradient to render `outerColors`.\n\n\n  var dimension = visualMeta.dimension;\n  var dimName = data.dimensions[dimension];\n  var axis = coordSys.getAxis(dimName); // dataToCoor mapping may not be linear, but must be monotonic.\n\n  var colorStops = zrUtil.map(visualMeta.stops, function (stop) {\n    return {\n      coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),\n      color: stop.color\n    };\n  });\n  var stopLen = colorStops.length;\n  var outerColors = visualMeta.outerColors.slice();\n\n  if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {\n    colorStops.reverse();\n    outerColors.reverse();\n  }\n\n  var tinyExtent = 10; // Arbitrary value: 10px\n\n  var minCoord = colorStops[0].coord - tinyExtent;\n  var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;\n  var coordSpan = maxCoord - minCoord;\n\n  if (coordSpan < 1e-3) {\n    return 'transparent';\n  }\n\n  zrUtil.each(colorStops, function (stop) {\n    stop.offset = (stop.coord - minCoord) / coordSpan;\n  });\n  colorStops.push({\n    offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,\n    color: outerColors[1] || 'transparent'\n  });\n  colorStops.unshift({\n    // notice colorStops.length have been changed.\n    offset: stopLen ? colorStops[0].offset : 0.5,\n    color: outerColors[0] || 'transparent'\n  }); // zrUtil.each(colorStops, function (colorStop) {\n  //     // Make sure each offset has rounded px to avoid not sharp edge\n  //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);\n  // });\n\n  var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);\n  gradient[dimName] = minCoord;\n  gradient[dimName + '2'] = maxCoord;\n  return gradient;\n}\n\nvar _default = ChartView.extend({\n  type: 'line',\n  init: function () {\n    var lineGroup = new graphic.Group();\n    var symbolDraw = new SymbolDraw();\n    this.group.add(symbolDraw.group);\n    this._symbolDraw = symbolDraw;\n    this._lineGroup = lineGroup;\n  },\n  render: function (seriesModel, ecModel, api) {\n    var coordSys = seriesModel.coordinateSystem;\n    var group = this.group;\n    var data = seriesModel.getData();\n    var lineStyleModel = seriesModel.getModel('lineStyle.normal');\n    var areaStyleModel = seriesModel.getModel('areaStyle.normal');\n    var points = data.mapArray(data.getItemLayout, true);\n    var isCoordSysPolar = coordSys.type === 'polar';\n    var prevCoordSys = this._coordSys;\n    var symbolDraw = this._symbolDraw;\n    var polyline = this._polyline;\n    var polygon = this._polygon;\n    var lineGroup = this._lineGroup;\n    var hasAnimation = seriesModel.get('animation');\n    var isAreaChart = !areaStyleModel.isEmpty();\n    var stackedOnPoints = getStackedOnPoints(coordSys, data);\n    var showSymbol = seriesModel.get('showSymbol');\n\n    var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol') && this._getSymbolIgnoreFunc(data, coordSys); // Remove temporary symbols\n\n\n    var oldData = this._data;\n    oldData && oldData.eachItemGraphicEl(function (el, idx) {\n      if (el.__temp) {\n        group.remove(el);\n        oldData.setItemGraphicEl(idx, null);\n      }\n    }); // Remove previous created symbols if showSymbol changed to false\n\n    if (!showSymbol) {\n      symbolDraw.remove();\n    }\n\n    group.add(lineGroup); // FIXME step not support polar\n\n    var step = !isCoordSysPolar && seriesModel.get('step'); // Initialization animation or coordinate system changed\n\n    if (!(polyline && prevCoordSys.type === coordSys.type && step === this._step)) {\n      showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n      if (step) {\n        // TODO If stacked series is not step\n        points = turnPointsIntoStep(points, coordSys, step);\n        stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n      }\n\n      polyline = this._newPolyline(points, coordSys, hasAnimation);\n\n      if (isAreaChart) {\n        polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);\n      }\n\n      lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));\n    } else {\n      if (isAreaChart && !polygon) {\n        // If areaStyle is added\n        polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);\n      } else if (polygon && !isAreaChart) {\n        // If areaStyle is removed\n        lineGroup.remove(polygon);\n        polygon = this._polygon = null;\n      } // Update clipPath\n\n\n      lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel)); // Always update, or it is wrong in the case turning on legend\n      // because points are not changed\n\n      showSymbol && symbolDraw.updateData(data, isSymbolIgnore); // Stop symbol animation and sync with line points\n      // FIXME performance?\n\n      data.eachItemGraphicEl(function (el) {\n        el.stopAnimation(true);\n      }); // In the case data zoom triggerred refreshing frequently\n      // Data may not change if line has a category axis. So it should animate nothing\n\n      if (!isPointsSame(this._stackedOnPoints, stackedOnPoints) || !isPointsSame(this._points, points)) {\n        if (hasAnimation) {\n          this._updateAnimation(data, stackedOnPoints, coordSys, api, step);\n        } else {\n          // Not do it in update with animation\n          if (step) {\n            // TODO If stacked series is not step\n            points = turnPointsIntoStep(points, coordSys, step);\n            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n          }\n\n          polyline.setShape({\n            points: points\n          });\n          polygon && polygon.setShape({\n            points: points,\n            stackedOnPoints: stackedOnPoints\n          });\n        }\n      }\n    }\n\n    var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');\n    polyline.useStyle(zrUtil.defaults( // Use color in lineStyle first\n    lineStyleModel.getLineStyle(), {\n      fill: 'none',\n      stroke: visualColor,\n      lineJoin: 'bevel'\n    }));\n    var smooth = seriesModel.get('smooth');\n    smooth = getSmooth(seriesModel.get('smooth'));\n    polyline.setShape({\n      smooth: smooth,\n      smoothMonotone: seriesModel.get('smoothMonotone'),\n      connectNulls: seriesModel.get('connectNulls')\n    });\n\n    if (polygon) {\n      var stackedOn = data.stackedOn;\n      var stackedOnSmooth = 0;\n      polygon.useStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {\n        fill: visualColor,\n        opacity: 0.7,\n        lineJoin: 'bevel'\n      }));\n\n      if (stackedOn) {\n        var stackedOnSeries = stackedOn.hostModel;\n        stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\n      }\n\n      polygon.setShape({\n        smooth: smooth,\n        stackedOnSmooth: stackedOnSmooth,\n        smoothMonotone: seriesModel.get('smoothMonotone'),\n        connectNulls: seriesModel.get('connectNulls')\n      });\n    }\n\n    this._data = data; // Save the coordinate system for transition animation when data changed\n\n    this._coordSys = coordSys;\n    this._stackedOnPoints = stackedOnPoints;\n    this._points = points;\n    this._step = step;\n  },\n  dispose: function () {},\n  highlight: function (seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n    if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\n      var symbol = data.getItemGraphicEl(dataIndex);\n\n      if (!symbol) {\n        // Create a temporary symbol if it is not exists\n        var pt = data.getItemLayout(dataIndex);\n\n        if (!pt) {\n          // Null data\n          return;\n        }\n\n        symbol = new SymbolClz(data, dataIndex);\n        symbol.position = pt;\n        symbol.setZ(seriesModel.get('zlevel'), seriesModel.get('z'));\n        symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);\n        symbol.__temp = true;\n        data.setItemGraphicEl(dataIndex, symbol); // Stop scale animation\n\n        symbol.stopSymbolAnimation(true);\n        this.group.add(symbol);\n      }\n\n      symbol.highlight();\n    } else {\n      // Highlight whole series\n      ChartView.prototype.highlight.call(this, seriesModel, ecModel, api, payload);\n    }\n  },\n  downplay: function (seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n    if (dataIndex != null && dataIndex >= 0) {\n      var symbol = data.getItemGraphicEl(dataIndex);\n\n      if (symbol) {\n        if (symbol.__temp) {\n          data.setItemGraphicEl(dataIndex, null);\n          this.group.remove(symbol);\n        } else {\n          symbol.downplay();\n        }\n      }\n    } else {\n      // FIXME\n      // can not downplay completely.\n      // Downplay whole series\n      ChartView.prototype.downplay.call(this, seriesModel, ecModel, api, payload);\n    }\n  },\n\n  /**\n   * @param {module:zrender/container/Group} group\n   * @param {Array.<Array.<number>>} points\n   * @private\n   */\n  _newPolyline: function (points) {\n    var polyline = this._polyline; // Remove previous created polyline\n\n    if (polyline) {\n      this._lineGroup.remove(polyline);\n    }\n\n    polyline = new Polyline({\n      shape: {\n        points: points\n      },\n      silent: true,\n      z2: 10\n    });\n\n    this._lineGroup.add(polyline);\n\n    this._polyline = polyline;\n    return polyline;\n  },\n\n  /**\n   * @param {module:zrender/container/Group} group\n   * @param {Array.<Array.<number>>} stackedOnPoints\n   * @param {Array.<Array.<number>>} points\n   * @private\n   */\n  _newPolygon: function (points, stackedOnPoints) {\n    var polygon = this._polygon; // Remove previous created polygon\n\n    if (polygon) {\n      this._lineGroup.remove(polygon);\n    }\n\n    polygon = new Polygon({\n      shape: {\n        points: points,\n        stackedOnPoints: stackedOnPoints\n      },\n      silent: true\n    });\n\n    this._lineGroup.add(polygon);\n\n    this._polygon = polygon;\n    return polygon;\n  },\n\n  /**\n   * @private\n   */\n  _getSymbolIgnoreFunc: function (data, coordSys) {\n    var categoryAxis = coordSys.getAxesByScale('ordinal')[0]; // `getLabelInterval` is provided by echarts/component/axis\n\n    if (categoryAxis && categoryAxis.isLabelIgnored) {\n      return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);\n    }\n  },\n\n  /**\n   * @private\n   */\n  // FIXME Two value axis\n  _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {\n    var polyline = this._polyline;\n    var polygon = this._polygon;\n    var seriesModel = data.hostModel;\n    var diff = lineAnimationDiff(this._data, data, this._stackedOnPoints, stackedOnPoints, this._coordSys, coordSys);\n    var current = diff.current;\n    var stackedOnCurrent = diff.stackedOnCurrent;\n    var next = diff.next;\n    var stackedOnNext = diff.stackedOnNext;\n\n    if (step) {\n      // TODO If stacked series is not step\n      current = turnPointsIntoStep(diff.current, coordSys, step);\n      stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\n      next = turnPointsIntoStep(diff.next, coordSys, step);\n      stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\n    } // `diff.current` is subset of `current` (which should be ensured by\n    // turnPointsIntoStep), so points in `__points` can be updated when\n    // points in `current` are update during animation.\n\n\n    polyline.shape.__points = diff.current;\n    polyline.shape.points = current;\n    graphic.updateProps(polyline, {\n      shape: {\n        points: next\n      }\n    }, seriesModel);\n\n    if (polygon) {\n      polygon.setShape({\n        points: current,\n        stackedOnPoints: stackedOnCurrent\n      });\n      graphic.updateProps(polygon, {\n        shape: {\n          points: next,\n          stackedOnPoints: stackedOnNext\n        }\n      }, seriesModel);\n    }\n\n    var updatedDataInfo = [];\n    var diffStatus = diff.status;\n\n    for (var i = 0; i < diffStatus.length; i++) {\n      var cmd = diffStatus[i].cmd;\n\n      if (cmd === '=') {\n        var el = data.getItemGraphicEl(diffStatus[i].idx1);\n\n        if (el) {\n          updatedDataInfo.push({\n            el: el,\n            ptIdx: i // Index of points\n\n          });\n        }\n      }\n    }\n\n    if (polyline.animators && polyline.animators.length) {\n      polyline.animators[0].during(function () {\n        for (var i = 0; i < updatedDataInfo.length; i++) {\n          var el = updatedDataInfo[i].el;\n          el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);\n        }\n      });\n    }\n  },\n  remove: function (ecModel) {\n    var group = this.group;\n    var oldData = this._data;\n\n    this._lineGroup.removeAll();\n\n    this._symbolDraw.remove(true); // Remove temporary created elements when highlighting\n\n\n    oldData && oldData.eachItemGraphicEl(function (el, idx) {\n      if (el.__temp) {\n        group.remove(el);\n        oldData.setItemGraphicEl(idx, null);\n      }\n    });\n    this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;\n  }\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}