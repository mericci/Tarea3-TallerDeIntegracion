{"ast":null,"code":"var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Polar = require(\"./Polar\");\n\nvar _number = require(\"../../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar _axisHelper = require(\"../../coord/axisHelper\");\n\nvar createScaleByModel = _axisHelper.createScaleByModel;\nvar niceScaleExtent = _axisHelper.niceScaleExtent;\n\nvar CoordinateSystem = require(\"../../CoordinateSystem\");\n\nrequire(\"./PolarModel\"); // TODO Axis scale\n// 依赖 PolarModel 做预处理\n\n/**\n * Resize method bound to the polar\n * @param {module:echarts/coord/polar/PolarModel} polarModel\n * @param {module:echarts/ExtensionAPI} api\n */\n\n\nfunction resizePolar(polar, polarModel, api) {\n  var center = polarModel.get('center');\n  var width = api.getWidth();\n  var height = api.getHeight();\n  polar.cx = parsePercent(center[0], width);\n  polar.cy = parsePercent(center[1], height);\n  var radiusAxis = polar.getRadiusAxis();\n  var size = Math.min(width, height) / 2;\n  var radius = parsePercent(polarModel.get('radius'), size);\n  radiusAxis.inverse ? radiusAxis.setExtent(radius, 0) : radiusAxis.setExtent(0, radius);\n}\n/**\n * Update polar\n */\n\n\nfunction updatePolarScale(ecModel, api) {\n  var polar = this;\n  var angleAxis = polar.getAngleAxis();\n  var radiusAxis = polar.getRadiusAxis(); // Reset scale\n\n  angleAxis.scale.setExtent(Infinity, -Infinity);\n  radiusAxis.scale.setExtent(Infinity, -Infinity);\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem === polar) {\n      var data = seriesModel.getData();\n      radiusAxis.scale.unionExtentFromData(data, 'radius');\n      angleAxis.scale.unionExtentFromData(data, 'angle');\n    }\n  });\n  niceScaleExtent(angleAxis.scale, angleAxis.model);\n  niceScaleExtent(radiusAxis.scale, radiusAxis.model); // Fix extent of category angle axis\n\n  if (angleAxis.type === 'category' && !angleAxis.onBand) {\n    var extent = angleAxis.getExtent();\n    var diff = 360 / angleAxis.scale.count();\n    angleAxis.inverse ? extent[1] += diff : extent[1] -= diff;\n    angleAxis.setExtent(extent[0], extent[1]);\n  }\n}\n/**\n * Set common axis properties\n * @param {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\n * @param {module:echarts/coord/polar/AxisModel}\n * @inner\n */\n\n\nfunction setAxis(axis, axisModel) {\n  axis.type = axisModel.get('type');\n  axis.scale = createScaleByModel(axisModel);\n  axis.onBand = axisModel.get('boundaryGap') && axis.type === 'category';\n  axis.inverse = axisModel.get('inverse');\n\n  if (axisModel.mainType === 'angleAxis') {\n    axis.inverse ^= axisModel.get('clockwise');\n    var startAngle = axisModel.get('startAngle');\n    axis.setExtent(startAngle, startAngle + (axis.inverse ? -360 : 360));\n  } // Inject axis instance\n\n\n  axisModel.axis = axis;\n  axis.model = axisModel;\n}\n\nvar polarCreator = {\n  dimensions: Polar.prototype.dimensions,\n  create: function (ecModel, api) {\n    var polarList = [];\n    ecModel.eachComponent('polar', function (polarModel, idx) {\n      var polar = new Polar(idx); // Inject resize and update method\n\n      polar.update = updatePolarScale;\n      var radiusAxis = polar.getRadiusAxis();\n      var angleAxis = polar.getAngleAxis();\n      var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n      var angleAxisModel = polarModel.findAxisModel('angleAxis');\n      setAxis(radiusAxis, radiusAxisModel);\n      setAxis(angleAxis, angleAxisModel);\n      resizePolar(polar, polarModel, api);\n      polarList.push(polar);\n      polarModel.coordinateSystem = polar;\n      polar.model = polarModel;\n    }); // Inject coordinateSystem to series\n\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') === 'polar') {\n        var polarModel = ecModel.queryComponents({\n          mainType: 'polar',\n          index: seriesModel.get('polarIndex'),\n          id: seriesModel.get('polarId')\n        })[0];\n        seriesModel.coordinateSystem = polarModel.coordinateSystem;\n      }\n    });\n    return polarList;\n  }\n};\nCoordinateSystem.register('polar', polarCreator);","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/coord/polar/polarCreator.js"],"names":["_config","require","__DEV__","zrUtil","Polar","_number","parsePercent","_axisHelper","createScaleByModel","niceScaleExtent","CoordinateSystem","resizePolar","polar","polarModel","api","center","get","width","getWidth","height","getHeight","cx","cy","radiusAxis","getRadiusAxis","size","Math","min","radius","inverse","setExtent","updatePolarScale","ecModel","angleAxis","getAngleAxis","scale","Infinity","eachSeries","seriesModel","coordinateSystem","data","getData","unionExtentFromData","model","type","onBand","extent","getExtent","diff","count","setAxis","axis","axisModel","mainType","startAngle","polarCreator","dimensions","prototype","create","polarList","eachComponent","idx","update","radiusAxisModel","findAxisModel","angleAxisModel","push","queryComponents","index","id","register"],"mappings":"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","sourcesContent":["var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Polar = require(\"./Polar\");\n\nvar _number = require(\"../../util/number\");\n\nvar parsePercent = _number.parsePercent;\n\nvar _axisHelper = require(\"../../coord/axisHelper\");\n\nvar createScaleByModel = _axisHelper.createScaleByModel;\nvar niceScaleExtent = _axisHelper.niceScaleExtent;\n\nvar CoordinateSystem = require(\"../../CoordinateSystem\");\n\nrequire(\"./PolarModel\");\n\n// TODO Axis scale\n// 依赖 PolarModel 做预处理\n\n/**\n * Resize method bound to the polar\n * @param {module:echarts/coord/polar/PolarModel} polarModel\n * @param {module:echarts/ExtensionAPI} api\n */\nfunction resizePolar(polar, polarModel, api) {\n  var center = polarModel.get('center');\n  var width = api.getWidth();\n  var height = api.getHeight();\n  polar.cx = parsePercent(center[0], width);\n  polar.cy = parsePercent(center[1], height);\n  var radiusAxis = polar.getRadiusAxis();\n  var size = Math.min(width, height) / 2;\n  var radius = parsePercent(polarModel.get('radius'), size);\n  radiusAxis.inverse ? radiusAxis.setExtent(radius, 0) : radiusAxis.setExtent(0, radius);\n}\n/**\n * Update polar\n */\n\n\nfunction updatePolarScale(ecModel, api) {\n  var polar = this;\n  var angleAxis = polar.getAngleAxis();\n  var radiusAxis = polar.getRadiusAxis(); // Reset scale\n\n  angleAxis.scale.setExtent(Infinity, -Infinity);\n  radiusAxis.scale.setExtent(Infinity, -Infinity);\n  ecModel.eachSeries(function (seriesModel) {\n    if (seriesModel.coordinateSystem === polar) {\n      var data = seriesModel.getData();\n      radiusAxis.scale.unionExtentFromData(data, 'radius');\n      angleAxis.scale.unionExtentFromData(data, 'angle');\n    }\n  });\n  niceScaleExtent(angleAxis.scale, angleAxis.model);\n  niceScaleExtent(radiusAxis.scale, radiusAxis.model); // Fix extent of category angle axis\n\n  if (angleAxis.type === 'category' && !angleAxis.onBand) {\n    var extent = angleAxis.getExtent();\n    var diff = 360 / angleAxis.scale.count();\n    angleAxis.inverse ? extent[1] += diff : extent[1] -= diff;\n    angleAxis.setExtent(extent[0], extent[1]);\n  }\n}\n/**\n * Set common axis properties\n * @param {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\n * @param {module:echarts/coord/polar/AxisModel}\n * @inner\n */\n\n\nfunction setAxis(axis, axisModel) {\n  axis.type = axisModel.get('type');\n  axis.scale = createScaleByModel(axisModel);\n  axis.onBand = axisModel.get('boundaryGap') && axis.type === 'category';\n  axis.inverse = axisModel.get('inverse');\n\n  if (axisModel.mainType === 'angleAxis') {\n    axis.inverse ^= axisModel.get('clockwise');\n    var startAngle = axisModel.get('startAngle');\n    axis.setExtent(startAngle, startAngle + (axis.inverse ? -360 : 360));\n  } // Inject axis instance\n\n\n  axisModel.axis = axis;\n  axis.model = axisModel;\n}\n\nvar polarCreator = {\n  dimensions: Polar.prototype.dimensions,\n  create: function (ecModel, api) {\n    var polarList = [];\n    ecModel.eachComponent('polar', function (polarModel, idx) {\n      var polar = new Polar(idx); // Inject resize and update method\n\n      polar.update = updatePolarScale;\n      var radiusAxis = polar.getRadiusAxis();\n      var angleAxis = polar.getAngleAxis();\n      var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n      var angleAxisModel = polarModel.findAxisModel('angleAxis');\n      setAxis(radiusAxis, radiusAxisModel);\n      setAxis(angleAxis, angleAxisModel);\n      resizePolar(polar, polarModel, api);\n      polarList.push(polar);\n      polarModel.coordinateSystem = polar;\n      polar.model = polarModel;\n    }); // Inject coordinateSystem to series\n\n    ecModel.eachSeries(function (seriesModel) {\n      if (seriesModel.get('coordinateSystem') === 'polar') {\n        var polarModel = ecModel.queryComponents({\n          mainType: 'polar',\n          index: seriesModel.get('polarIndex'),\n          id: seriesModel.get('polarId')\n        })[0];\n        seriesModel.coordinateSystem = polarModel.coordinateSystem;\n      }\n    });\n    return polarList;\n  }\n};\nCoordinateSystem.register('polar', polarCreator);"]},"metadata":{},"sourceType":"script"}