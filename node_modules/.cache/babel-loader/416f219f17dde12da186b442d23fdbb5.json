{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar Model = require(\"../../model/Model\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];\n\nfunction getAxisLineShape(polar, rExtent, angle) {\n  rExtent[1] > rExtent[0] && (rExtent = rExtent.slice().reverse());\n  var start = polar.coordToPoint([rExtent[0], angle]);\n  var end = polar.coordToPoint([rExtent[1], angle]);\n  return {\n    x1: start[0],\n    y1: start[1],\n    x2: end[0],\n    y2: end[1]\n  };\n}\n\nfunction getRadiusIdx(polar) {\n  var radiusAxis = polar.getRadiusAxis();\n  return radiusAxis.inverse ? 0 : 1;\n}\n\nvar _default = AxisView.extend({\n  type: 'angleAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function (angleAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!angleAxisModel.get('show')) {\n      return;\n    }\n\n    var angleAxis = angleAxisModel.axis;\n    var polar = angleAxis.polar;\n    var radiusExtent = polar.getRadiusAxis().getExtent();\n    var ticksAngles = angleAxis.getTicksCoords();\n\n    if (angleAxis.type !== 'category') {\n      // Remove the last tick which will overlap the first tick\n      ticksAngles.pop();\n    }\n\n    zrUtil.each(elementList, function (name) {\n      if (angleAxisModel.get(name + '.show') && (!angleAxis.scale.isBlank() || name === 'axisLine')) {\n        this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _axisLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');\n    var circle = new graphic.Circle({\n      shape: {\n        cx: polar.cx,\n        cy: polar.cy,\n        r: radiusExtent[getRadiusIdx(polar)]\n      },\n      style: lineStyleModel.getLineStyle(),\n      z2: 1,\n      silent: true\n    });\n    circle.style.fill = null;\n    this.group.add(circle);\n  },\n\n  /**\n   * @private\n   */\n  _axisTick: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var tickModel = angleAxisModel.getModel('axisTick');\n    var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');\n    var radius = radiusExtent[getRadiusIdx(polar)];\n    var lines = zrUtil.map(ticksAngles, function (tickAngle) {\n      return new graphic.Line({\n        shape: getAxisLineShape(polar, [radius, radius + tickLen], tickAngle)\n      });\n    });\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults(tickModel.getModel('lineStyle').getLineStyle(), {\n        stroke: angleAxisModel.get('axisLine.lineStyle.color')\n      })\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _axisLabel: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var axis = angleAxisModel.axis;\n    var categoryData = angleAxisModel.get('data');\n    var labelModel = angleAxisModel.getModel('axisLabel');\n    var labels = angleAxisModel.getFormattedLabels();\n    var labelMargin = labelModel.get('margin');\n    var labelsAngles = axis.getLabelsCoords(); // Use length of ticksAngles because it may remove the last tick to avoid overlapping\n\n    for (var i = 0; i < ticksAngles.length; i++) {\n      var r = radiusExtent[getRadiusIdx(polar)];\n      var p = polar.coordToPoint([r + labelMargin, labelsAngles[i]]);\n      var cx = polar.cx;\n      var cy = polar.cy;\n      var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? 'center' : p[0] > cx ? 'left' : 'right';\n      var labelTextVerticalAlign = Math.abs(p[1] - cy) / r < 0.3 ? 'middle' : p[1] > cy ? 'top' : 'bottom';\n\n      if (categoryData && categoryData[i] && categoryData[i].textStyle) {\n        labelModel = new Model(categoryData[i].textStyle, labelModel, labelModel.ecModel);\n      }\n\n      var textEl = new graphic.Text({\n        silent: true\n      });\n      this.group.add(textEl);\n      graphic.setTextStyle(textEl.style, labelModel, {\n        x: p[0],\n        y: p[1],\n        textFill: labelModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),\n        text: labels[i],\n        textAlign: labelTextAlign,\n        textVerticalAlign: labelTextVerticalAlign\n      });\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var splitLineModel = angleAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line({\n        shape: getAxisLineShape(polar, radiusExtent, ticksAngles[i])\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length]\n        }, lineStyleModel.getLineStyle()),\n        silent: true,\n        z: angleAxisModel.get('z')\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var splitAreaModel = angleAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var RADIAN = Math.PI / 180;\n    var prevAngle = -ticksAngles[0] * RADIAN;\n    var r0 = Math.min(radiusExtent[0], radiusExtent[1]);\n    var r1 = Math.max(radiusExtent[0], radiusExtent[1]);\n    var clockwise = angleAxisModel.get('clockwise');\n\n    for (var i = 1; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: r0,\n          r: r1,\n          startAngle: prevAngle,\n          endAngle: -ticksAngles[i] * RADIAN,\n          clockwise: clockwise\n        },\n        silent: true\n      }));\n      prevAngle = -ticksAngles[i] * RADIAN;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/axis/AngleAxisView.js"],"names":["zrUtil","require","graphic","Model","AxisView","elementList","getAxisLineShape","polar","rExtent","angle","slice","reverse","start","coordToPoint","end","x1","y1","x2","y2","getRadiusIdx","radiusAxis","getRadiusAxis","inverse","_default","extend","type","axisPointerClass","render","angleAxisModel","ecModel","group","removeAll","get","angleAxis","axis","radiusExtent","getExtent","ticksAngles","getTicksCoords","pop","each","name","scale","isBlank","_axisLine","lineStyleModel","getModel","circle","Circle","shape","cx","cy","r","style","getLineStyle","z2","silent","fill","add","_axisTick","tickModel","tickLen","radius","lines","map","tickAngle","Line","mergePath","defaults","stroke","_axisLabel","categoryData","labelModel","labels","getFormattedLabels","labelMargin","labelsAngles","getLabelsCoords","i","length","p","labelTextAlign","Math","abs","labelTextVerticalAlign","textStyle","textEl","Text","setTextStyle","x","y","textFill","getTextColor","text","textAlign","textVerticalAlign","_splitLine","splitLineModel","lineColors","lineCount","Array","splitLines","colorIndex","push","z","_splitArea","splitAreaModel","areaStyleModel","areaColors","splitAreas","RADIAN","PI","prevAngle","r0","min","r1","max","clockwise","Sector","startAngle","endAngle","getAreaStyle","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar Model = require(\"../../model/Model\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];\n\nfunction getAxisLineShape(polar, rExtent, angle) {\n  rExtent[1] > rExtent[0] && (rExtent = rExtent.slice().reverse());\n  var start = polar.coordToPoint([rExtent[0], angle]);\n  var end = polar.coordToPoint([rExtent[1], angle]);\n  return {\n    x1: start[0],\n    y1: start[1],\n    x2: end[0],\n    y2: end[1]\n  };\n}\n\nfunction getRadiusIdx(polar) {\n  var radiusAxis = polar.getRadiusAxis();\n  return radiusAxis.inverse ? 0 : 1;\n}\n\nvar _default = AxisView.extend({\n  type: 'angleAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function (angleAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!angleAxisModel.get('show')) {\n      return;\n    }\n\n    var angleAxis = angleAxisModel.axis;\n    var polar = angleAxis.polar;\n    var radiusExtent = polar.getRadiusAxis().getExtent();\n    var ticksAngles = angleAxis.getTicksCoords();\n\n    if (angleAxis.type !== 'category') {\n      // Remove the last tick which will overlap the first tick\n      ticksAngles.pop();\n    }\n\n    zrUtil.each(elementList, function (name) {\n      if (angleAxisModel.get(name + '.show') && (!angleAxis.scale.isBlank() || name === 'axisLine')) {\n        this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _axisLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');\n    var circle = new graphic.Circle({\n      shape: {\n        cx: polar.cx,\n        cy: polar.cy,\n        r: radiusExtent[getRadiusIdx(polar)]\n      },\n      style: lineStyleModel.getLineStyle(),\n      z2: 1,\n      silent: true\n    });\n    circle.style.fill = null;\n    this.group.add(circle);\n  },\n\n  /**\n   * @private\n   */\n  _axisTick: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var tickModel = angleAxisModel.getModel('axisTick');\n    var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');\n    var radius = radiusExtent[getRadiusIdx(polar)];\n    var lines = zrUtil.map(ticksAngles, function (tickAngle) {\n      return new graphic.Line({\n        shape: getAxisLineShape(polar, [radius, radius + tickLen], tickAngle)\n      });\n    });\n    this.group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults(tickModel.getModel('lineStyle').getLineStyle(), {\n        stroke: angleAxisModel.get('axisLine.lineStyle.color')\n      })\n    }));\n  },\n\n  /**\n   * @private\n   */\n  _axisLabel: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var axis = angleAxisModel.axis;\n    var categoryData = angleAxisModel.get('data');\n    var labelModel = angleAxisModel.getModel('axisLabel');\n    var labels = angleAxisModel.getFormattedLabels();\n    var labelMargin = labelModel.get('margin');\n    var labelsAngles = axis.getLabelsCoords(); // Use length of ticksAngles because it may remove the last tick to avoid overlapping\n\n    for (var i = 0; i < ticksAngles.length; i++) {\n      var r = radiusExtent[getRadiusIdx(polar)];\n      var p = polar.coordToPoint([r + labelMargin, labelsAngles[i]]);\n      var cx = polar.cx;\n      var cy = polar.cy;\n      var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? 'center' : p[0] > cx ? 'left' : 'right';\n      var labelTextVerticalAlign = Math.abs(p[1] - cy) / r < 0.3 ? 'middle' : p[1] > cy ? 'top' : 'bottom';\n\n      if (categoryData && categoryData[i] && categoryData[i].textStyle) {\n        labelModel = new Model(categoryData[i].textStyle, labelModel, labelModel.ecModel);\n      }\n\n      var textEl = new graphic.Text({\n        silent: true\n      });\n      this.group.add(textEl);\n      graphic.setTextStyle(textEl.style, labelModel, {\n        x: p[0],\n        y: p[1],\n        textFill: labelModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),\n        text: labels[i],\n        textAlign: labelTextAlign,\n        textVerticalAlign: labelTextVerticalAlign\n      });\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var splitLineModel = angleAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line({\n        shape: getAxisLineShape(polar, radiusExtent, ticksAngles[i])\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length]\n        }, lineStyleModel.getLineStyle()),\n        silent: true,\n        z: angleAxisModel.get('z')\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n    var splitAreaModel = angleAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var RADIAN = Math.PI / 180;\n    var prevAngle = -ticksAngles[0] * RADIAN;\n    var r0 = Math.min(radiusExtent[0], radiusExtent[1]);\n    var r1 = Math.max(radiusExtent[0], radiusExtent[1]);\n    var clockwise = angleAxisModel.get('clockwise');\n\n    for (var i = 1; i < ticksAngles.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: r0,\n          r: r1,\n          startAngle: prevAngle,\n          endAngle: -ticksAngles[i] * RADIAN,\n          clockwise: clockwise\n        },\n        silent: true\n      }));\n      prevAngle = -ticksAngles[i] * RADIAN;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}