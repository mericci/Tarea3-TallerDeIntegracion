{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar Tree = require(\"../../data/Tree\");\n\nvar Model = require(\"../../model/Model\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\nvar addCommas = _format.addCommas;\n\nvar _helper = require(\"./helper\");\n\nvar wrapTreePathInfo = _helper.wrapTreePathInfo;\n\nvar _default = SeriesModel.extend({\n  type: 'series.treemap',\n  layoutMode: 'box',\n  dependencies: ['grid', 'polar'],\n\n  /**\n   * @type {module:echarts/data/Tree~Node}\n   */\n  _viewRoot: null,\n  defaultOption: {\n    // Disable progressive rendering\n    progressive: 0,\n    hoverLayerThreshold: Infinity,\n    // center: ['50%', '50%'],          // not supported in ec3.\n    // size: ['80%', '80%'],            // deprecated, compatible with ec2.\n    left: 'center',\n    top: 'middle',\n    right: null,\n    bottom: null,\n    width: '80%',\n    height: '80%',\n    sort: true,\n    // Can be null or false or true\n    // (order by desc default, asc not supported yet (strange effect))\n    clipWindow: 'origin',\n    // Size of clipped window when zooming. 'origin' or 'fullscreen'\n    squareRatio: 0.5 * (1 + Math.sqrt(5)),\n    // golden ratio\n    leafDepth: null,\n    // Nodes on depth from root are regarded as leaves.\n    // Count from zero (zero represents only view root).\n    drillDownIcon: '▶',\n    // Use html character temporarily because it is complicated\n    // to align specialized icon. ▷▶❒❐▼✚\n    zoomToNodeRatio: 0.32 * 0.32,\n    // Be effective when using zoomToNode. Specify the proportion of the\n    // target node area in the view area.\n    roam: true,\n    // true, false, 'scale' or 'zoom', 'move'.\n    nodeClick: 'zoomToNode',\n    // Leaf node click behaviour: 'zoomToNode', 'link', false.\n    // If leafDepth is set and clicking a node which has children but\n    // be on left depth, the behaviour would be changing root. Otherwise\n    // use behavious defined above.\n    animation: true,\n    animationDurationUpdate: 900,\n    animationEasing: 'quinticInOut',\n    breadcrumb: {\n      show: true,\n      height: 22,\n      left: 'center',\n      top: 'bottom',\n      // right\n      // bottom\n      emptyItemWidth: 25,\n      // Width of empty node.\n      itemStyle: {\n        normal: {\n          color: 'rgba(0,0,0,0.7)',\n          //'#5793f3',\n          borderColor: 'rgba(255,255,255,0.7)',\n          borderWidth: 1,\n          shadowColor: 'rgba(150,150,150,1)',\n          shadowBlur: 3,\n          shadowOffsetX: 0,\n          shadowOffsetY: 0,\n          textStyle: {\n            color: '#fff'\n          }\n        },\n        emphasis: {\n          textStyle: {}\n        }\n      }\n    },\n    label: {\n      normal: {\n        show: true,\n        // Do not use textDistance, for ellipsis rect just the same as treemap node rect.\n        distance: 0,\n        padding: 5,\n        position: 'inside',\n        // Can be [5, '5%'] or position stirng like 'insideTopLeft', ...\n        // formatter: null,\n        color: '#fff',\n        ellipsis: true // align\n        // verticalAlign\n\n      }\n    },\n    upperLabel: {\n      // Label when node is parent.\n      normal: {\n        show: false,\n        position: [0, '50%'],\n        height: 20,\n        // formatter: null,\n        color: '#fff',\n        ellipsis: true,\n        // align: null,\n        verticalAlign: 'middle'\n      },\n      emphasis: {\n        show: true,\n        position: [0, '50%'],\n        color: '#fff',\n        ellipsis: true,\n        verticalAlign: 'middle'\n      }\n    },\n    itemStyle: {\n      normal: {\n        color: null,\n        // Can be 'none' if not necessary.\n        colorAlpha: null,\n        // Can be 'none' if not necessary.\n        colorSaturation: null,\n        // Can be 'none' if not necessary.\n        borderWidth: 0,\n        gapWidth: 0,\n        borderColor: '#fff',\n        borderColorSaturation: null // If specified, borderColor will be ineffective, and the\n        // border color is evaluated by color of current node and\n        // borderColorSaturation.\n\n      },\n      emphasis: {}\n    },\n    visualDimension: 0,\n    // Can be 0, 1, 2, 3.\n    visualMin: null,\n    visualMax: null,\n    color: [],\n    // + treemapSeries.color should not be modified. Please only modified\n    // level[n].color (if necessary).\n    // + Specify color list of each level. level[0].color would be global\n    // color list if not specified. (see method `setDefault`).\n    // + But set as a empty array to forbid fetch color from global palette\n    // when using nodeModel.get('color'), otherwise nodes on deep level\n    // will always has color palette set and are not able to inherit color\n    // from parent node.\n    // + TreemapSeries.color can not be set as 'none', otherwise effect\n    // legend color fetching (see seriesColor.js).\n    colorAlpha: null,\n    // Array. Specify color alpha range of each level, like [0.2, 0.8]\n    colorSaturation: null,\n    // Array. Specify color saturation of each level, like [0.2, 0.5]\n    colorMappingBy: 'index',\n    // 'value' or 'index' or 'id'.\n    visibleMin: 10,\n    // If area less than this threshold (unit: pixel^2), node will not\n    // be rendered. Only works when sort is 'asc' or 'desc'.\n    childrenVisibleMin: null,\n    // If area of a node less than this threshold (unit: pixel^2),\n    // grandchildren will not show.\n    // Why grandchildren? If not grandchildren but children,\n    // some siblings show children and some not,\n    // the appearance may be mess and not consistent,\n    levels: [] // Each item: {\n    //     visibleMin, itemStyle, visualDimension, label\n    // }\n    // data: {\n    //      value: [],\n    //      children: [],\n    //      link: 'http://xxx.xxx.xxx',\n    //      target: 'blank' or 'self'\n    // }\n\n  },\n\n  /**\n   * @override\n   */\n  getInitialData: function (option, ecModel) {\n    // Create a virtual root.\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    completeTreeValue(root);\n    var levels = option.levels || [];\n    levels = option.levels = setDefault(levels, ecModel);\n    var treeOption = {};\n    treeOption.levels = levels; // Make sure always a new tree is created when setOption,\n    // in TreemapView, we check whether oldTree === newTree\n    // to choose mappings approach among old shapes and new shapes.\n\n    return Tree.createTree(root, this, treeOption).data;\n  },\n  optionUpdated: function () {\n    this.resetViewRoot();\n  },\n\n  /**\n   * @override\n   * @param {number} dataIndex\n   * @param {boolean} [mutipleSeries=false]\n   */\n  formatTooltip: function (dataIndex) {\n    var data = this.getData();\n    var value = this.getRawValue(dataIndex);\n    var formattedValue = zrUtil.isArray(value) ? addCommas(value[0]) : addCommas(value);\n    var name = data.getName(dataIndex);\n    return encodeHTML(name + ': ' + formattedValue);\n  },\n\n  /**\n   * Add tree path to tooltip param\n   *\n   * @override\n   * @param {number} dataIndex\n   * @return {Object}\n   */\n  getDataParams: function (dataIndex) {\n    var params = SeriesModel.prototype.getDataParams.apply(this, arguments);\n    var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n    params.treePathInfo = wrapTreePathInfo(node, this);\n    return params;\n  },\n\n  /**\n   * @public\n   * @param {Object} layoutInfo {\n   *                                x: containerGroup x\n   *                                y: containerGroup y\n   *                                width: containerGroup width\n   *                                height: containerGroup height\n   *                            }\n   */\n  setLayoutInfo: function (layoutInfo) {\n    /**\n     * @readOnly\n     * @type {Object}\n     */\n    this.layoutInfo = this.layoutInfo || {};\n    zrUtil.extend(this.layoutInfo, layoutInfo);\n  },\n\n  /**\n   * @param  {string} id\n   * @return {number} index\n   */\n  mapIdToIndex: function (id) {\n    // A feature is implemented:\n    // index is monotone increasing with the sequence of\n    // input id at the first time.\n    // This feature can make sure that each data item and its\n    // mapped color have the same index between data list and\n    // color list at the beginning, which is useful for user\n    // to adjust data-color mapping.\n\n    /**\n     * @private\n     * @type {Object}\n     */\n    var idIndexMap = this._idIndexMap;\n\n    if (!idIndexMap) {\n      idIndexMap = this._idIndexMap = zrUtil.createHashMap();\n      /**\n       * @private\n       * @type {number}\n       */\n\n      this._idIndexMapCount = 0;\n    }\n\n    var index = idIndexMap.get(id);\n\n    if (index == null) {\n      idIndexMap.set(id, index = this._idIndexMapCount++);\n    }\n\n    return index;\n  },\n  getViewRoot: function () {\n    return this._viewRoot;\n  },\n\n  /**\n   * @param {module:echarts/data/Tree~Node} [viewRoot]\n   */\n  resetViewRoot: function (viewRoot) {\n    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;\n    var root = this.getData().tree.root;\n\n    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {\n      this._viewRoot = root;\n    }\n  }\n});\n/**\n * @param {Object} dataNode\n */\n\n\nfunction completeTreeValue(dataNode) {\n  // Postorder travel tree.\n  // If value of none-leaf node is not set,\n  // calculate it by suming up the value of all children.\n  var sum = 0;\n  zrUtil.each(dataNode.children, function (child) {\n    completeTreeValue(child);\n    var childValue = child.value;\n    zrUtil.isArray(childValue) && (childValue = childValue[0]);\n    sum += childValue;\n  });\n  var thisValue = dataNode.value;\n\n  if (zrUtil.isArray(thisValue)) {\n    thisValue = thisValue[0];\n  }\n\n  if (thisValue == null || isNaN(thisValue)) {\n    thisValue = sum;\n  } // Value should not less than 0.\n\n\n  if (thisValue < 0) {\n    thisValue = 0;\n  }\n\n  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;\n}\n/**\n * set default to level configuration\n */\n\n\nfunction setDefault(levels, ecModel) {\n  var globalColorList = ecModel.get('color');\n\n  if (!globalColorList) {\n    return;\n  }\n\n  levels = levels || [];\n  var hasColorDefine;\n  zrUtil.each(levels, function (levelDefine) {\n    var model = new Model(levelDefine);\n    var modelColor = model.get('color');\n\n    if (model.get('itemStyle.normal.color') || modelColor && modelColor !== 'none') {\n      hasColorDefine = true;\n    }\n  });\n\n  if (!hasColorDefine) {\n    var level0 = levels[0] || (levels[0] = {});\n    level0.color = globalColorList.slice();\n  }\n\n  return levels;\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/treemap/TreemapSeries.js"],"names":["zrUtil","require","SeriesModel","Tree","Model","_format","encodeHTML","addCommas","_helper","wrapTreePathInfo","_default","extend","type","layoutMode","dependencies","_viewRoot","defaultOption","progressive","hoverLayerThreshold","Infinity","left","top","right","bottom","width","height","sort","clipWindow","squareRatio","Math","sqrt","leafDepth","drillDownIcon","zoomToNodeRatio","roam","nodeClick","animation","animationDurationUpdate","animationEasing","breadcrumb","show","emptyItemWidth","itemStyle","normal","color","borderColor","borderWidth","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","textStyle","emphasis","label","distance","padding","position","ellipsis","upperLabel","verticalAlign","colorAlpha","colorSaturation","gapWidth","borderColorSaturation","visualDimension","visualMin","visualMax","colorMappingBy","visibleMin","childrenVisibleMin","levels","getInitialData","option","ecModel","root","name","children","data","completeTreeValue","setDefault","treeOption","createTree","optionUpdated","resetViewRoot","formatTooltip","dataIndex","getData","value","getRawValue","formattedValue","isArray","getName","getDataParams","params","prototype","apply","arguments","node","tree","getNodeByDataIndex","treePathInfo","setLayoutInfo","layoutInfo","mapIdToIndex","id","idIndexMap","_idIndexMap","createHashMap","_idIndexMapCount","index","get","set","getViewRoot","viewRoot","contains","dataNode","sum","each","child","childValue","thisValue","isNaN","globalColorList","hasColorDefine","levelDefine","model","modelColor","level0","slice","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar Tree = require(\"../../data/Tree\");\n\nvar Model = require(\"../../model/Model\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\nvar addCommas = _format.addCommas;\n\nvar _helper = require(\"./helper\");\n\nvar wrapTreePathInfo = _helper.wrapTreePathInfo;\n\nvar _default = SeriesModel.extend({\n  type: 'series.treemap',\n  layoutMode: 'box',\n  dependencies: ['grid', 'polar'],\n\n  /**\n   * @type {module:echarts/data/Tree~Node}\n   */\n  _viewRoot: null,\n  defaultOption: {\n    // Disable progressive rendering\n    progressive: 0,\n    hoverLayerThreshold: Infinity,\n    // center: ['50%', '50%'],          // not supported in ec3.\n    // size: ['80%', '80%'],            // deprecated, compatible with ec2.\n    left: 'center',\n    top: 'middle',\n    right: null,\n    bottom: null,\n    width: '80%',\n    height: '80%',\n    sort: true,\n    // Can be null or false or true\n    // (order by desc default, asc not supported yet (strange effect))\n    clipWindow: 'origin',\n    // Size of clipped window when zooming. 'origin' or 'fullscreen'\n    squareRatio: 0.5 * (1 + Math.sqrt(5)),\n    // golden ratio\n    leafDepth: null,\n    // Nodes on depth from root are regarded as leaves.\n    // Count from zero (zero represents only view root).\n    drillDownIcon: '▶',\n    // Use html character temporarily because it is complicated\n    // to align specialized icon. ▷▶❒❐▼✚\n    zoomToNodeRatio: 0.32 * 0.32,\n    // Be effective when using zoomToNode. Specify the proportion of the\n    // target node area in the view area.\n    roam: true,\n    // true, false, 'scale' or 'zoom', 'move'.\n    nodeClick: 'zoomToNode',\n    // Leaf node click behaviour: 'zoomToNode', 'link', false.\n    // If leafDepth is set and clicking a node which has children but\n    // be on left depth, the behaviour would be changing root. Otherwise\n    // use behavious defined above.\n    animation: true,\n    animationDurationUpdate: 900,\n    animationEasing: 'quinticInOut',\n    breadcrumb: {\n      show: true,\n      height: 22,\n      left: 'center',\n      top: 'bottom',\n      // right\n      // bottom\n      emptyItemWidth: 25,\n      // Width of empty node.\n      itemStyle: {\n        normal: {\n          color: 'rgba(0,0,0,0.7)',\n          //'#5793f3',\n          borderColor: 'rgba(255,255,255,0.7)',\n          borderWidth: 1,\n          shadowColor: 'rgba(150,150,150,1)',\n          shadowBlur: 3,\n          shadowOffsetX: 0,\n          shadowOffsetY: 0,\n          textStyle: {\n            color: '#fff'\n          }\n        },\n        emphasis: {\n          textStyle: {}\n        }\n      }\n    },\n    label: {\n      normal: {\n        show: true,\n        // Do not use textDistance, for ellipsis rect just the same as treemap node rect.\n        distance: 0,\n        padding: 5,\n        position: 'inside',\n        // Can be [5, '5%'] or position stirng like 'insideTopLeft', ...\n        // formatter: null,\n        color: '#fff',\n        ellipsis: true // align\n        // verticalAlign\n\n      }\n    },\n    upperLabel: {\n      // Label when node is parent.\n      normal: {\n        show: false,\n        position: [0, '50%'],\n        height: 20,\n        // formatter: null,\n        color: '#fff',\n        ellipsis: true,\n        // align: null,\n        verticalAlign: 'middle'\n      },\n      emphasis: {\n        show: true,\n        position: [0, '50%'],\n        color: '#fff',\n        ellipsis: true,\n        verticalAlign: 'middle'\n      }\n    },\n    itemStyle: {\n      normal: {\n        color: null,\n        // Can be 'none' if not necessary.\n        colorAlpha: null,\n        // Can be 'none' if not necessary.\n        colorSaturation: null,\n        // Can be 'none' if not necessary.\n        borderWidth: 0,\n        gapWidth: 0,\n        borderColor: '#fff',\n        borderColorSaturation: null // If specified, borderColor will be ineffective, and the\n        // border color is evaluated by color of current node and\n        // borderColorSaturation.\n\n      },\n      emphasis: {}\n    },\n    visualDimension: 0,\n    // Can be 0, 1, 2, 3.\n    visualMin: null,\n    visualMax: null,\n    color: [],\n    // + treemapSeries.color should not be modified. Please only modified\n    // level[n].color (if necessary).\n    // + Specify color list of each level. level[0].color would be global\n    // color list if not specified. (see method `setDefault`).\n    // + But set as a empty array to forbid fetch color from global palette\n    // when using nodeModel.get('color'), otherwise nodes on deep level\n    // will always has color palette set and are not able to inherit color\n    // from parent node.\n    // + TreemapSeries.color can not be set as 'none', otherwise effect\n    // legend color fetching (see seriesColor.js).\n    colorAlpha: null,\n    // Array. Specify color alpha range of each level, like [0.2, 0.8]\n    colorSaturation: null,\n    // Array. Specify color saturation of each level, like [0.2, 0.5]\n    colorMappingBy: 'index',\n    // 'value' or 'index' or 'id'.\n    visibleMin: 10,\n    // If area less than this threshold (unit: pixel^2), node will not\n    // be rendered. Only works when sort is 'asc' or 'desc'.\n    childrenVisibleMin: null,\n    // If area of a node less than this threshold (unit: pixel^2),\n    // grandchildren will not show.\n    // Why grandchildren? If not grandchildren but children,\n    // some siblings show children and some not,\n    // the appearance may be mess and not consistent,\n    levels: [] // Each item: {\n    //     visibleMin, itemStyle, visualDimension, label\n    // }\n    // data: {\n    //      value: [],\n    //      children: [],\n    //      link: 'http://xxx.xxx.xxx',\n    //      target: 'blank' or 'self'\n    // }\n\n  },\n\n  /**\n   * @override\n   */\n  getInitialData: function (option, ecModel) {\n    // Create a virtual root.\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    completeTreeValue(root);\n    var levels = option.levels || [];\n    levels = option.levels = setDefault(levels, ecModel);\n    var treeOption = {};\n    treeOption.levels = levels; // Make sure always a new tree is created when setOption,\n    // in TreemapView, we check whether oldTree === newTree\n    // to choose mappings approach among old shapes and new shapes.\n\n    return Tree.createTree(root, this, treeOption).data;\n  },\n  optionUpdated: function () {\n    this.resetViewRoot();\n  },\n\n  /**\n   * @override\n   * @param {number} dataIndex\n   * @param {boolean} [mutipleSeries=false]\n   */\n  formatTooltip: function (dataIndex) {\n    var data = this.getData();\n    var value = this.getRawValue(dataIndex);\n    var formattedValue = zrUtil.isArray(value) ? addCommas(value[0]) : addCommas(value);\n    var name = data.getName(dataIndex);\n    return encodeHTML(name + ': ' + formattedValue);\n  },\n\n  /**\n   * Add tree path to tooltip param\n   *\n   * @override\n   * @param {number} dataIndex\n   * @return {Object}\n   */\n  getDataParams: function (dataIndex) {\n    var params = SeriesModel.prototype.getDataParams.apply(this, arguments);\n    var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n    params.treePathInfo = wrapTreePathInfo(node, this);\n    return params;\n  },\n\n  /**\n   * @public\n   * @param {Object} layoutInfo {\n   *                                x: containerGroup x\n   *                                y: containerGroup y\n   *                                width: containerGroup width\n   *                                height: containerGroup height\n   *                            }\n   */\n  setLayoutInfo: function (layoutInfo) {\n    /**\n     * @readOnly\n     * @type {Object}\n     */\n    this.layoutInfo = this.layoutInfo || {};\n    zrUtil.extend(this.layoutInfo, layoutInfo);\n  },\n\n  /**\n   * @param  {string} id\n   * @return {number} index\n   */\n  mapIdToIndex: function (id) {\n    // A feature is implemented:\n    // index is monotone increasing with the sequence of\n    // input id at the first time.\n    // This feature can make sure that each data item and its\n    // mapped color have the same index between data list and\n    // color list at the beginning, which is useful for user\n    // to adjust data-color mapping.\n\n    /**\n     * @private\n     * @type {Object}\n     */\n    var idIndexMap = this._idIndexMap;\n\n    if (!idIndexMap) {\n      idIndexMap = this._idIndexMap = zrUtil.createHashMap();\n      /**\n       * @private\n       * @type {number}\n       */\n\n      this._idIndexMapCount = 0;\n    }\n\n    var index = idIndexMap.get(id);\n\n    if (index == null) {\n      idIndexMap.set(id, index = this._idIndexMapCount++);\n    }\n\n    return index;\n  },\n  getViewRoot: function () {\n    return this._viewRoot;\n  },\n\n  /**\n   * @param {module:echarts/data/Tree~Node} [viewRoot]\n   */\n  resetViewRoot: function (viewRoot) {\n    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;\n    var root = this.getData().tree.root;\n\n    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {\n      this._viewRoot = root;\n    }\n  }\n});\n/**\n * @param {Object} dataNode\n */\n\n\nfunction completeTreeValue(dataNode) {\n  // Postorder travel tree.\n  // If value of none-leaf node is not set,\n  // calculate it by suming up the value of all children.\n  var sum = 0;\n  zrUtil.each(dataNode.children, function (child) {\n    completeTreeValue(child);\n    var childValue = child.value;\n    zrUtil.isArray(childValue) && (childValue = childValue[0]);\n    sum += childValue;\n  });\n  var thisValue = dataNode.value;\n\n  if (zrUtil.isArray(thisValue)) {\n    thisValue = thisValue[0];\n  }\n\n  if (thisValue == null || isNaN(thisValue)) {\n    thisValue = sum;\n  } // Value should not less than 0.\n\n\n  if (thisValue < 0) {\n    thisValue = 0;\n  }\n\n  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;\n}\n/**\n * set default to level configuration\n */\n\n\nfunction setDefault(levels, ecModel) {\n  var globalColorList = ecModel.get('color');\n\n  if (!globalColorList) {\n    return;\n  }\n\n  levels = levels || [];\n  var hasColorDefine;\n  zrUtil.each(levels, function (levelDefine) {\n    var model = new Model(levelDefine);\n    var modelColor = model.get('color');\n\n    if (model.get('itemStyle.normal.color') || modelColor && modelColor !== 'none') {\n      hasColorDefine = true;\n    }\n  });\n\n  if (!hasColorDefine) {\n    var level0 = levels[0] || (levels[0] = {});\n    level0.color = globalColorList.slice();\n  }\n\n  return levels;\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}