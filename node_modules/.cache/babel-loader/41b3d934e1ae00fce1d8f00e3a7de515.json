{"ast":null,"code":"var _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar env = require(\"zrender/lib/core/env\");\n\nvar _format = require(\"../util/format\");\n\nvar formatTime = _format.formatTime;\nvar encodeHTML = _format.encodeHTML;\nvar addCommas = _format.addCommas;\nvar getTooltipMarker = _format.getTooltipMarker;\n\nvar _clazz = require(\"../util/clazz\");\n\nvar set = _clazz.set;\nvar get = _clazz.get;\n\nvar modelUtil = require(\"../util/model\");\n\nvar ComponentModel = require(\"./Component\");\n\nvar colorPaletteMixin = require(\"./mixin/colorPalette\");\n\nvar _layout = require(\"../util/layout\");\n\nvar getLayoutParams = _layout.getLayoutParams;\nvar mergeLayoutParam = _layout.mergeLayoutParam;\nvar SeriesModel = ComponentModel.extend({\n  type: 'series.__base__',\n\n  /**\n   * @readOnly\n   */\n  seriesIndex: 0,\n  // coodinateSystem will be injected in the echarts/CoordinateSystem\n  coordinateSystem: null,\n\n  /**\n   * @type {Object}\n   * @protected\n   */\n  defaultOption: null,\n\n  /**\n   * Data provided for legend\n   * @type {Function}\n   */\n  // PENDING\n  legendDataProvider: null,\n\n  /**\n   * Access path of color for visual\n   */\n  visualColorAccessPath: 'itemStyle.normal.color',\n\n  /**\n   * Support merge layout params.\n   * Only support 'box' now (left/right/top/bottom/width/height).\n   * @type {string|Object} Object can be {ignoreSize: true}\n   * @readOnly\n   */\n  layoutMode: null,\n  init: function (option, parentModel, ecModel, extraOpt) {\n    /**\n     * @type {number}\n     * @readOnly\n     */\n    this.seriesIndex = this.componentIndex;\n    this.mergeDefaultAndTheme(option, ecModel);\n    var data = this.getInitialData(option, ecModel);\n    /**\n     * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n     * @private\n     */\n\n    set(this, 'dataBeforeProcessed', data); // If we reverse the order (make data firstly, and then make\n    // dataBeforeProcessed by cloneShallow), cloneShallow will\n    // cause data.graph.data !== data when using\n    // module:echarts/data/Graph or module:echarts/data/Tree.\n    // See module:echarts/data/helper/linkList\n\n    this.restoreData();\n  },\n\n  /**\n   * Util for merge default and theme to option\n   * @param  {Object} option\n   * @param  {module:echarts/model/Global} ecModel\n   */\n  mergeDefaultAndTheme: function (option, ecModel) {\n    var layoutMode = this.layoutMode;\n    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.\n    // But if name duplicate between series subType\n    // (for example: parallel) add component mainType,\n    // add suffix 'Series'.\n\n    var themeSubType = this.subType;\n\n    if (ComponentModel.hasClass(themeSubType)) {\n      themeSubType += 'Series';\n    }\n\n    zrUtil.merge(option, ecModel.getTheme().get(this.subType));\n    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`\n\n    modelUtil.defaultEmphasis(option.label, ['show']);\n    this.fillDataTextStyle(option.data);\n\n    if (layoutMode) {\n      mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  },\n  mergeOption: function (newSeriesOption, ecModel) {\n    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n    this.fillDataTextStyle(newSeriesOption.data);\n    var layoutMode = this.layoutMode;\n\n    if (layoutMode) {\n      mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n    }\n\n    var data = this.getInitialData(newSeriesOption, ecModel); // TODO Merge data?\n\n    if (data) {\n      set(this, 'data', data);\n      set(this, 'dataBeforeProcessed', data.cloneShallow());\n    }\n  },\n  fillDataTextStyle: function (data) {\n    // Default data label emphasis `show`\n    // FIXME Tree structure data ?\n    // FIXME Performance ?\n    if (data) {\n      var props = ['show'];\n\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] && data[i].label) {\n          modelUtil.defaultEmphasis(data[i].label, props);\n        }\n      }\n    }\n  },\n\n  /**\n   * Init a data structure from data related option in series\n   * Must be overwritten\n   */\n  getInitialData: function () {},\n\n  /**\n   * @param {string} [dataType]\n   * @return {module:echarts/data/List}\n   */\n  getData: function (dataType) {\n    var data = get(this, 'data');\n    return dataType == null ? data : data.getLinkedData(dataType);\n  },\n\n  /**\n   * @param {module:echarts/data/List} data\n   */\n  setData: function (data) {\n    set(this, 'data', data);\n  },\n\n  /**\n   * Get data before processed\n   * @return {module:echarts/data/List}\n   */\n  getRawData: function () {\n    return get(this, 'dataBeforeProcessed');\n  },\n\n  /**\n   * Coord dimension to data dimension.\n   *\n   * By default the result is the same as dimensions of series data.\n   * But in some series data dimensions are different from coord dimensions (i.e.\n   * candlestick and boxplot). Override this method to handle those cases.\n   *\n   * Coord dimension to data dimension can be one-to-many\n   *\n   * @param {string} coordDim\n   * @return {Array.<string>} dimensions on the axis.\n   */\n  coordDimToDataDim: function (coordDim) {\n    return modelUtil.coordDimToDataDim(this.getData(), coordDim);\n  },\n\n  /**\n   * Convert data dimension to coord dimension.\n   *\n   * @param {string|number} dataDim\n   * @return {string}\n   */\n  dataDimToCoordDim: function (dataDim) {\n    return modelUtil.dataDimToCoordDim(this.getData(), dataDim);\n  },\n\n  /**\n   * Get base axis if has coordinate system and has axis.\n   * By default use coordSys.getBaseAxis();\n   * Can be overrided for some chart.\n   * @return {type} description\n   */\n  getBaseAxis: function () {\n    var coordSys = this.coordinateSystem;\n    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n  },\n  // FIXME\n\n  /**\n   * Default tooltip formatter\n   *\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {number} [dataType]\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\n    function formatArrayValue(value) {\n      var vertially = zrUtil.reduce(value, function (vertially, val, idx) {\n        var dimItem = data.getDimensionInfo(idx);\n        return vertially |= dimItem && dimItem.tooltip !== false && dimItem.tooltipName != null;\n      }, 0);\n      var result = [];\n      var tooltipDims = modelUtil.otherDimToDataDim(data, 'tooltip');\n      tooltipDims.length ? zrUtil.each(tooltipDims, function (dimIdx) {\n        setEachItem(data.get(dimIdx, dataIndex), dimIdx);\n      }) // By default, all dims is used on tooltip.\n      : zrUtil.each(value, setEachItem);\n\n      function setEachItem(val, dimIdx) {\n        var dimInfo = data.getDimensionInfo(dimIdx); // If `dimInfo.tooltip` is not set, show tooltip.\n\n        if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n          return;\n        }\n\n        var dimType = dimInfo.type;\n        var valStr = (vertially ? '- ' + (dimInfo.tooltipName || dimInfo.name) + ': ' : '') + (dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : formatTime('yyyy/MM/dd hh:mm:ss', val) : addCommas(val));\n        valStr && result.push(encodeHTML(valStr));\n      }\n\n      return (vertially ? '<br/>' : '') + result.join(vertially ? '<br/>' : ', ');\n    }\n\n    var data = get(this, 'data');\n    var value = this.getRawValue(dataIndex);\n    var formattedValue = zrUtil.isArray(value) ? formatArrayValue(value) : encodeHTML(addCommas(value));\n    var name = data.getName(dataIndex);\n    var color = data.getItemVisual(dataIndex, 'color');\n\n    if (zrUtil.isObject(color) && color.colorStops) {\n      color = (color.colorStops[0] || {}).color;\n    }\n\n    color = color || 'transparent';\n    var colorEl = getTooltipMarker(color);\n    var seriesName = this.name; // FIXME\n\n    if (seriesName === '\\0-') {\n      // Not show '-'\n      seriesName = '';\n    }\n\n    seriesName = seriesName ? encodeHTML(seriesName) + (!multipleSeries ? '<br/>' : ': ') : '';\n    return !multipleSeries ? seriesName + colorEl + (name ? encodeHTML(name) + ': ' + formattedValue : formattedValue) : colorEl + seriesName + formattedValue;\n  },\n\n  /**\n   * @return {boolean}\n   */\n  isAnimationEnabled: function () {\n    if (env.node) {\n      return false;\n    }\n\n    var animationEnabled = this.getShallow('animation');\n\n    if (animationEnabled) {\n      if (this.getData().count() > this.getShallow('animationThreshold')) {\n        animationEnabled = false;\n      }\n    }\n\n    return animationEnabled;\n  },\n  restoreData: function () {\n    set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());\n  },\n  getColorFromPalette: function (name, scope) {\n    var ecModel = this.ecModel; // PENDING\n\n    var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);\n\n    if (!color) {\n      color = ecModel.getColorFromPalette(name, scope);\n    }\n\n    return color;\n  },\n\n  /**\n   * Get data indices for show tooltip content. See tooltip.\n   * @abstract\n   * @param {Array.<string>|string} dim\n   * @param {Array.<number>} value\n   * @param {module:echarts/coord/single/SingleAxis} baseAxis\n   * @return {Object} {dataIndices, nestestValue}.\n   */\n  getAxisTooltipData: null,\n\n  /**\n   * See tooltip.\n   * @abstract\n   * @param {number} dataIndex\n   * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n   */\n  getTooltipPosition: null\n});\nzrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);\nzrUtil.mixin(SeriesModel, colorPaletteMixin);\nvar _default = SeriesModel;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/model/Series.js"],"names":["_config","require","__DEV__","zrUtil","env","_format","formatTime","encodeHTML","addCommas","getTooltipMarker","_clazz","set","get","modelUtil","ComponentModel","colorPaletteMixin","_layout","getLayoutParams","mergeLayoutParam","SeriesModel","extend","type","seriesIndex","coordinateSystem","defaultOption","legendDataProvider","visualColorAccessPath","layoutMode","init","option","parentModel","ecModel","extraOpt","componentIndex","mergeDefaultAndTheme","data","getInitialData","restoreData","inputPositionParams","themeSubType","subType","hasClass","merge","getTheme","getDefaultOption","defaultEmphasis","label","fillDataTextStyle","mergeOption","newSeriesOption","cloneShallow","props","i","length","getData","dataType","getLinkedData","setData","getRawData","coordDimToDataDim","coordDim","dataDimToCoordDim","dataDim","getBaseAxis","coordSys","formatTooltip","dataIndex","multipleSeries","formatArrayValue","value","vertially","reduce","val","idx","dimItem","getDimensionInfo","tooltip","tooltipName","result","tooltipDims","otherDimToDataDim","each","dimIdx","setEachItem","dimInfo","otherDims","dimType","valStr","name","push","join","getRawValue","formattedValue","isArray","getName","color","getItemVisual","isObject","colorStops","colorEl","seriesName","isAnimationEnabled","node","animationEnabled","getShallow","count","getColorFromPalette","scope","call","getAxisTooltipData","getTooltipPosition","mixin","dataFormatMixin","_default","module","exports"],"mappings":"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","sourcesContent":["var _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar env = require(\"zrender/lib/core/env\");\n\nvar _format = require(\"../util/format\");\n\nvar formatTime = _format.formatTime;\nvar encodeHTML = _format.encodeHTML;\nvar addCommas = _format.addCommas;\nvar getTooltipMarker = _format.getTooltipMarker;\n\nvar _clazz = require(\"../util/clazz\");\n\nvar set = _clazz.set;\nvar get = _clazz.get;\n\nvar modelUtil = require(\"../util/model\");\n\nvar ComponentModel = require(\"./Component\");\n\nvar colorPaletteMixin = require(\"./mixin/colorPalette\");\n\nvar _layout = require(\"../util/layout\");\n\nvar getLayoutParams = _layout.getLayoutParams;\nvar mergeLayoutParam = _layout.mergeLayoutParam;\nvar SeriesModel = ComponentModel.extend({\n  type: 'series.__base__',\n\n  /**\n   * @readOnly\n   */\n  seriesIndex: 0,\n  // coodinateSystem will be injected in the echarts/CoordinateSystem\n  coordinateSystem: null,\n\n  /**\n   * @type {Object}\n   * @protected\n   */\n  defaultOption: null,\n\n  /**\n   * Data provided for legend\n   * @type {Function}\n   */\n  // PENDING\n  legendDataProvider: null,\n\n  /**\n   * Access path of color for visual\n   */\n  visualColorAccessPath: 'itemStyle.normal.color',\n\n  /**\n   * Support merge layout params.\n   * Only support 'box' now (left/right/top/bottom/width/height).\n   * @type {string|Object} Object can be {ignoreSize: true}\n   * @readOnly\n   */\n  layoutMode: null,\n  init: function (option, parentModel, ecModel, extraOpt) {\n    /**\n     * @type {number}\n     * @readOnly\n     */\n    this.seriesIndex = this.componentIndex;\n    this.mergeDefaultAndTheme(option, ecModel);\n    var data = this.getInitialData(option, ecModel);\n\n    /**\n     * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n     * @private\n     */\n    set(this, 'dataBeforeProcessed', data); // If we reverse the order (make data firstly, and then make\n    // dataBeforeProcessed by cloneShallow), cloneShallow will\n    // cause data.graph.data !== data when using\n    // module:echarts/data/Graph or module:echarts/data/Tree.\n    // See module:echarts/data/helper/linkList\n\n    this.restoreData();\n  },\n\n  /**\n   * Util for merge default and theme to option\n   * @param  {Object} option\n   * @param  {module:echarts/model/Global} ecModel\n   */\n  mergeDefaultAndTheme: function (option, ecModel) {\n    var layoutMode = this.layoutMode;\n    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.\n    // But if name duplicate between series subType\n    // (for example: parallel) add component mainType,\n    // add suffix 'Series'.\n\n    var themeSubType = this.subType;\n\n    if (ComponentModel.hasClass(themeSubType)) {\n      themeSubType += 'Series';\n    }\n\n    zrUtil.merge(option, ecModel.getTheme().get(this.subType));\n    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`\n\n    modelUtil.defaultEmphasis(option.label, ['show']);\n    this.fillDataTextStyle(option.data);\n\n    if (layoutMode) {\n      mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  },\n  mergeOption: function (newSeriesOption, ecModel) {\n    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n    this.fillDataTextStyle(newSeriesOption.data);\n    var layoutMode = this.layoutMode;\n\n    if (layoutMode) {\n      mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n    }\n\n    var data = this.getInitialData(newSeriesOption, ecModel); // TODO Merge data?\n\n    if (data) {\n      set(this, 'data', data);\n      set(this, 'dataBeforeProcessed', data.cloneShallow());\n    }\n  },\n  fillDataTextStyle: function (data) {\n    // Default data label emphasis `show`\n    // FIXME Tree structure data ?\n    // FIXME Performance ?\n    if (data) {\n      var props = ['show'];\n\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] && data[i].label) {\n          modelUtil.defaultEmphasis(data[i].label, props);\n        }\n      }\n    }\n  },\n\n  /**\n   * Init a data structure from data related option in series\n   * Must be overwritten\n   */\n  getInitialData: function () {},\n\n  /**\n   * @param {string} [dataType]\n   * @return {module:echarts/data/List}\n   */\n  getData: function (dataType) {\n    var data = get(this, 'data');\n    return dataType == null ? data : data.getLinkedData(dataType);\n  },\n\n  /**\n   * @param {module:echarts/data/List} data\n   */\n  setData: function (data) {\n    set(this, 'data', data);\n  },\n\n  /**\n   * Get data before processed\n   * @return {module:echarts/data/List}\n   */\n  getRawData: function () {\n    return get(this, 'dataBeforeProcessed');\n  },\n\n  /**\n   * Coord dimension to data dimension.\n   *\n   * By default the result is the same as dimensions of series data.\n   * But in some series data dimensions are different from coord dimensions (i.e.\n   * candlestick and boxplot). Override this method to handle those cases.\n   *\n   * Coord dimension to data dimension can be one-to-many\n   *\n   * @param {string} coordDim\n   * @return {Array.<string>} dimensions on the axis.\n   */\n  coordDimToDataDim: function (coordDim) {\n    return modelUtil.coordDimToDataDim(this.getData(), coordDim);\n  },\n\n  /**\n   * Convert data dimension to coord dimension.\n   *\n   * @param {string|number} dataDim\n   * @return {string}\n   */\n  dataDimToCoordDim: function (dataDim) {\n    return modelUtil.dataDimToCoordDim(this.getData(), dataDim);\n  },\n\n  /**\n   * Get base axis if has coordinate system and has axis.\n   * By default use coordSys.getBaseAxis();\n   * Can be overrided for some chart.\n   * @return {type} description\n   */\n  getBaseAxis: function () {\n    var coordSys = this.coordinateSystem;\n    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n  },\n  // FIXME\n\n  /**\n   * Default tooltip formatter\n   *\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {number} [dataType]\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\n    function formatArrayValue(value) {\n      var vertially = zrUtil.reduce(value, function (vertially, val, idx) {\n        var dimItem = data.getDimensionInfo(idx);\n        return vertially |= dimItem && dimItem.tooltip !== false && dimItem.tooltipName != null;\n      }, 0);\n      var result = [];\n      var tooltipDims = modelUtil.otherDimToDataDim(data, 'tooltip');\n      tooltipDims.length ? zrUtil.each(tooltipDims, function (dimIdx) {\n        setEachItem(data.get(dimIdx, dataIndex), dimIdx);\n      }) // By default, all dims is used on tooltip.\n      : zrUtil.each(value, setEachItem);\n\n      function setEachItem(val, dimIdx) {\n        var dimInfo = data.getDimensionInfo(dimIdx); // If `dimInfo.tooltip` is not set, show tooltip.\n\n        if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n          return;\n        }\n\n        var dimType = dimInfo.type;\n        var valStr = (vertially ? '- ' + (dimInfo.tooltipName || dimInfo.name) + ': ' : '') + (dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : formatTime('yyyy/MM/dd hh:mm:ss', val) : addCommas(val));\n        valStr && result.push(encodeHTML(valStr));\n      }\n\n      return (vertially ? '<br/>' : '') + result.join(vertially ? '<br/>' : ', ');\n    }\n\n    var data = get(this, 'data');\n    var value = this.getRawValue(dataIndex);\n    var formattedValue = zrUtil.isArray(value) ? formatArrayValue(value) : encodeHTML(addCommas(value));\n    var name = data.getName(dataIndex);\n    var color = data.getItemVisual(dataIndex, 'color');\n\n    if (zrUtil.isObject(color) && color.colorStops) {\n      color = (color.colorStops[0] || {}).color;\n    }\n\n    color = color || 'transparent';\n    var colorEl = getTooltipMarker(color);\n    var seriesName = this.name; // FIXME\n\n    if (seriesName === '\\0-') {\n      // Not show '-'\n      seriesName = '';\n    }\n\n    seriesName = seriesName ? encodeHTML(seriesName) + (!multipleSeries ? '<br/>' : ': ') : '';\n    return !multipleSeries ? seriesName + colorEl + (name ? encodeHTML(name) + ': ' + formattedValue : formattedValue) : colorEl + seriesName + formattedValue;\n  },\n\n  /**\n   * @return {boolean}\n   */\n  isAnimationEnabled: function () {\n    if (env.node) {\n      return false;\n    }\n\n    var animationEnabled = this.getShallow('animation');\n\n    if (animationEnabled) {\n      if (this.getData().count() > this.getShallow('animationThreshold')) {\n        animationEnabled = false;\n      }\n    }\n\n    return animationEnabled;\n  },\n  restoreData: function () {\n    set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());\n  },\n  getColorFromPalette: function (name, scope) {\n    var ecModel = this.ecModel; // PENDING\n\n    var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);\n\n    if (!color) {\n      color = ecModel.getColorFromPalette(name, scope);\n    }\n\n    return color;\n  },\n\n  /**\n   * Get data indices for show tooltip content. See tooltip.\n   * @abstract\n   * @param {Array.<string>|string} dim\n   * @param {Array.<number>} value\n   * @param {module:echarts/coord/single/SingleAxis} baseAxis\n   * @return {Object} {dataIndices, nestestValue}.\n   */\n  getAxisTooltipData: null,\n\n  /**\n   * See tooltip.\n   * @abstract\n   * @param {number} dataIndex\n   * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n   */\n  getTooltipPosition: null\n});\nzrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);\nzrUtil.mixin(SeriesModel, colorPaletteMixin);\nvar _default = SeriesModel;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}