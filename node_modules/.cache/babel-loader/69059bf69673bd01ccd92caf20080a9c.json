{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitLine', 'splitArea'];\n\nvar _default = AxisView.extend({\n  type: 'radiusAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function (radiusAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!radiusAxisModel.get('show')) {\n      return;\n    }\n\n    var radiusAxis = radiusAxisModel.axis;\n    var polar = radiusAxis.polar;\n    var angleAxis = polar.getAngleAxis();\n    var ticksCoords = radiusAxis.getTicksCoords();\n    var axisAngle = angleAxis.getExtent()[0];\n    var radiusExtent = radiusAxis.getExtent();\n    var layout = layoutAxis(polar, radiusAxisModel, axisAngle);\n    var axisBuilder = new AxisBuilder(radiusAxisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    this.group.add(axisBuilder.getGroup());\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (radiusAxisModel.get(name + '.show') && !radiusAxis.scale.isBlank()) {\n        this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    var splitLineModel = radiusAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Circle({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r: ticksCoords[i]\n        },\n        silent: true\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length],\n          fill: null\n        }, lineStyleModel.getLineStyle()),\n        silent: true\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    var splitAreaModel = radiusAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var prevRadius = ticksCoords[0];\n\n    for (var i = 1; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: prevRadius,\n          r: ticksCoords[i],\n          startAngle: 0,\n          endAngle: Math.PI * 2\n        },\n        silent: true\n      }));\n      prevRadius = ticksCoords[i];\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n/**\n * @inner\n */\n\n\nfunction layoutAxis(polar, radiusAxisModel, axisAngle) {\n  return {\n    position: [polar.cx, polar.cy],\n    rotation: axisAngle / 180 * Math.PI,\n    labelDirection: -1,\n    tickDirection: -1,\n    nameDirection: 1,\n    labelRotate: radiusAxisModel.getModel('axisLabel').get('rotate'),\n    // Over splitLine and splitArea\n    z2: 1\n  };\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/axis/RadiusAxisView.js"],"names":["zrUtil","require","graphic","AxisBuilder","AxisView","axisBuilderAttrs","selfBuilderAttrs","_default","extend","type","axisPointerClass","render","radiusAxisModel","ecModel","group","removeAll","get","radiusAxis","axis","polar","angleAxis","getAngleAxis","ticksCoords","getTicksCoords","axisAngle","getExtent","radiusExtent","layout","layoutAxis","axisBuilder","each","add","getGroup","name","scale","isBlank","_splitLine","splitLineModel","getModel","lineStyleModel","lineColors","lineCount","Array","splitLines","i","length","colorIndex","push","Circle","shape","cx","cy","r","silent","mergePath","style","defaults","stroke","fill","getLineStyle","_splitArea","splitAreaModel","areaStyleModel","areaColors","splitAreas","prevRadius","Sector","r0","startAngle","endAngle","Math","PI","getAreaStyle","position","rotation","labelDirection","tickDirection","nameDirection","labelRotate","z2","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitLine', 'splitArea'];\n\nvar _default = AxisView.extend({\n  type: 'radiusAxis',\n  axisPointerClass: 'PolarAxisPointer',\n  render: function (radiusAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!radiusAxisModel.get('show')) {\n      return;\n    }\n\n    var radiusAxis = radiusAxisModel.axis;\n    var polar = radiusAxis.polar;\n    var angleAxis = polar.getAngleAxis();\n    var ticksCoords = radiusAxis.getTicksCoords();\n    var axisAngle = angleAxis.getExtent()[0];\n    var radiusExtent = radiusAxis.getExtent();\n    var layout = layoutAxis(polar, radiusAxisModel, axisAngle);\n    var axisBuilder = new AxisBuilder(radiusAxisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    this.group.add(axisBuilder.getGroup());\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (radiusAxisModel.get(name + '.show') && !radiusAxis.scale.isBlank()) {\n        this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);\n      }\n    }, this);\n  },\n\n  /**\n   * @private\n   */\n  _splitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    var splitLineModel = radiusAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Circle({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r: ticksCoords[i]\n        },\n        silent: true\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length],\n          fill: null\n        }, lineStyleModel.getLineStyle()),\n        silent: true\n      }));\n    }\n  },\n\n  /**\n   * @private\n   */\n  _splitArea: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    var splitAreaModel = radiusAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var prevRadius = ticksCoords[0];\n\n    for (var i = 1; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: prevRadius,\n          r: ticksCoords[i],\n          startAngle: 0,\n          endAngle: Math.PI * 2\n        },\n        silent: true\n      }));\n      prevRadius = ticksCoords[i];\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      this.group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n});\n/**\n * @inner\n */\n\n\nfunction layoutAxis(polar, radiusAxisModel, axisAngle) {\n  return {\n    position: [polar.cx, polar.cy],\n    rotation: axisAngle / 180 * Math.PI,\n    labelDirection: -1,\n    tickDirection: -1,\n    nameDirection: 1,\n    labelRotate: radiusAxisModel.getModel('axisLabel').get('rotate'),\n    // Over splitLine and splitArea\n    z2: 1\n  };\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}