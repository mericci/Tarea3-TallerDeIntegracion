{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar List = require(\"../../data/List\");\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar completeDimensions = require(\"../../data/helper/completeDimensions\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\nvar addCommas = _format.addCommas;\n\nvar dataSelectableMixin = require(\"../../component/helper/selectableMixin\");\n\nvar geoCreator = require(\"../../coord/geo/geoCreator\");\n\nvar MapSeries = SeriesModel.extend({\n  type: 'series.map',\n  dependencies: ['geo'],\n  layoutMode: 'box',\n\n  /**\n   * Only first map series of same mapType will drawMap\n   * @type {boolean}\n   */\n  needsDrawMap: false,\n\n  /**\n   * Group of all map series with same mapType\n   * @type {boolean}\n   */\n  seriesGroup: [],\n  init: function (option) {\n    this._fillOption(option, this.getMapType()); // this.option = option;\n\n\n    MapSeries.superApply(this, 'init', arguments);\n    this.updateSelectedMap(option.data);\n  },\n  getInitialData: function (option) {\n    var dimensions = completeDimensions(['value'], option.data || []);\n    var list = new List(dimensions, this);\n    list.initData(option.data);\n    return list;\n  },\n  mergeOption: function (newOption) {\n    this._fillOption(newOption, this.getMapType());\n\n    MapSeries.superApply(this, 'mergeOption', arguments);\n    this.updateSelectedMap(this.option.data);\n  },\n\n  /**\n   * If no host geo model, return null, which means using a\n   * inner exclusive geo model.\n   */\n  getHostGeoModel: function () {\n    var geoIndex = this.option.geoIndex;\n    return geoIndex != null ? this.dependentModels.geo[geoIndex] : null;\n  },\n  getMapType: function () {\n    return (this.getHostGeoModel() || this).option.map;\n  },\n  _fillOption: function (option, mapName) {\n    // Shallow clone\n    // option = zrUtil.extend({}, option);\n    option.data = geoCreator.getFilledRegions(option.data, mapName, option.nameMap); // return option;\n  },\n  getRawValue: function (dataIndex) {\n    // Use value stored in data instead because it is calculated from multiple series\n    // FIXME Provide all value of multiple series ?\n    return this.getData().get('value', dataIndex);\n  },\n\n  /**\n   * Get model of region\n   * @param  {string} name\n   * @return {module:echarts/model/Model}\n   */\n  getRegionModel: function (regionName) {\n    var data = this.getData();\n    return data.getItemModel(data.indexOfName(regionName));\n  },\n\n  /**\n   * Map tooltip formatter\n   *\n   * @param {number} dataIndex\n   */\n  formatTooltip: function (dataIndex) {\n    // FIXME orignalData and data is a bit confusing\n    var data = this.getData();\n    var formattedValue = addCommas(this.getRawValue(dataIndex));\n    var name = data.getName(dataIndex);\n    var seriesGroup = this.seriesGroup;\n    var seriesNames = [];\n\n    for (var i = 0; i < seriesGroup.length; i++) {\n      var otherIndex = seriesGroup[i].originalData.indexOfName(name);\n\n      if (!isNaN(seriesGroup[i].originalData.get('value', otherIndex))) {\n        seriesNames.push(encodeHTML(seriesGroup[i].name));\n      }\n    }\n\n    return seriesNames.join(', ') + '<br />' + encodeHTML(name + ' : ' + formattedValue);\n  },\n\n  /**\n   * @implement\n   */\n  getTooltipPosition: function (dataIndex) {\n    if (dataIndex != null) {\n      var name = this.getData().getName(dataIndex);\n      var geo = this.coordinateSystem;\n      var region = geo.getRegion(name);\n      return region && geo.dataToPoint(region.center);\n    }\n  },\n  setZoom: function (zoom) {\n    this.option.zoom = zoom;\n  },\n  setCenter: function (center) {\n    this.option.center = center;\n  },\n  defaultOption: {\n    // 一级层叠\n    zlevel: 0,\n    // 二级层叠\n    z: 2,\n    coordinateSystem: 'geo',\n    // map should be explicitly specified since ec3.\n    map: '',\n    // If `geoIndex` is not specified, a exclusive geo will be\n    // created. Otherwise use the specified geo component, and\n    // `map` and `mapType` are ignored.\n    // geoIndex: 0,\n    // 'center' | 'left' | 'right' | 'x%' | {number}\n    left: 'center',\n    // 'center' | 'top' | 'bottom' | 'x%' | {number}\n    top: 'center',\n    // right\n    // bottom\n    // width:\n    // height\n    // Aspect is width / height. Inited to be geoJson bbox aspect\n    // This parameter is used for scale this aspect\n    aspectScale: 0.75,\n    ///// Layout with center and size\n    // If you wan't to put map in a fixed size box with right aspect ratio\n    // This two properties may more conveninet\n    // layoutCenter: [50%, 50%]\n    // layoutSize: 100\n    // 数值合并方式，默认加和，可选为：\n    // 'sum' | 'average' | 'max' | 'min'\n    // mapValueCalculation: 'sum',\n    // 地图数值计算结果小数精度\n    // mapValuePrecision: 0,\n    // 显示图例颜色标识（系列标识的小圆点），图例开启时有效\n    showLegendSymbol: true,\n    // 选择模式，默认关闭，可选single，multiple\n    // selectedMode: false,\n    dataRangeHoverLink: true,\n    // 是否开启缩放及漫游模式\n    // roam: false,\n    // Define left-top, right-bottom coords to control view\n    // For example, [ [180, 90], [-180, -90] ],\n    // higher priority than center and zoom\n    boundingCoords: null,\n    // Default on center of map\n    center: null,\n    zoom: 1,\n    scaleLimit: null,\n    label: {\n      normal: {\n        show: false,\n        color: '#000'\n      },\n      emphasis: {\n        show: true,\n        color: 'rgb(100,0,0)'\n      }\n    },\n    // scaleLimit: null,\n    itemStyle: {\n      normal: {\n        // color: 各异,\n        borderWidth: 0.5,\n        borderColor: '#444',\n        areaColor: '#eee'\n      },\n      // 也是选中样式\n      emphasis: {\n        areaColor: 'rgba(255,215,0,0.8)'\n      }\n    }\n  }\n});\nzrUtil.mixin(MapSeries, dataSelectableMixin);\nvar _default = MapSeries;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/map/MapSeries.js"],"names":["zrUtil","require","List","SeriesModel","completeDimensions","_format","encodeHTML","addCommas","dataSelectableMixin","geoCreator","MapSeries","extend","type","dependencies","layoutMode","needsDrawMap","seriesGroup","init","option","_fillOption","getMapType","superApply","arguments","updateSelectedMap","data","getInitialData","dimensions","list","initData","mergeOption","newOption","getHostGeoModel","geoIndex","dependentModels","geo","map","mapName","getFilledRegions","nameMap","getRawValue","dataIndex","getData","get","getRegionModel","regionName","getItemModel","indexOfName","formatTooltip","formattedValue","name","getName","seriesNames","i","length","otherIndex","originalData","isNaN","push","join","getTooltipPosition","coordinateSystem","region","getRegion","dataToPoint","center","setZoom","zoom","setCenter","defaultOption","zlevel","z","left","top","aspectScale","showLegendSymbol","dataRangeHoverLink","boundingCoords","scaleLimit","label","normal","show","color","emphasis","itemStyle","borderWidth","borderColor","areaColor","mixin","_default","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar List = require(\"../../data/List\");\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar completeDimensions = require(\"../../data/helper/completeDimensions\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\nvar addCommas = _format.addCommas;\n\nvar dataSelectableMixin = require(\"../../component/helper/selectableMixin\");\n\nvar geoCreator = require(\"../../coord/geo/geoCreator\");\n\nvar MapSeries = SeriesModel.extend({\n  type: 'series.map',\n  dependencies: ['geo'],\n  layoutMode: 'box',\n\n  /**\n   * Only first map series of same mapType will drawMap\n   * @type {boolean}\n   */\n  needsDrawMap: false,\n\n  /**\n   * Group of all map series with same mapType\n   * @type {boolean}\n   */\n  seriesGroup: [],\n  init: function (option) {\n    this._fillOption(option, this.getMapType()); // this.option = option;\n\n\n    MapSeries.superApply(this, 'init', arguments);\n    this.updateSelectedMap(option.data);\n  },\n  getInitialData: function (option) {\n    var dimensions = completeDimensions(['value'], option.data || []);\n    var list = new List(dimensions, this);\n    list.initData(option.data);\n    return list;\n  },\n  mergeOption: function (newOption) {\n    this._fillOption(newOption, this.getMapType());\n\n    MapSeries.superApply(this, 'mergeOption', arguments);\n    this.updateSelectedMap(this.option.data);\n  },\n\n  /**\n   * If no host geo model, return null, which means using a\n   * inner exclusive geo model.\n   */\n  getHostGeoModel: function () {\n    var geoIndex = this.option.geoIndex;\n    return geoIndex != null ? this.dependentModels.geo[geoIndex] : null;\n  },\n  getMapType: function () {\n    return (this.getHostGeoModel() || this).option.map;\n  },\n  _fillOption: function (option, mapName) {\n    // Shallow clone\n    // option = zrUtil.extend({}, option);\n    option.data = geoCreator.getFilledRegions(option.data, mapName, option.nameMap); // return option;\n  },\n  getRawValue: function (dataIndex) {\n    // Use value stored in data instead because it is calculated from multiple series\n    // FIXME Provide all value of multiple series ?\n    return this.getData().get('value', dataIndex);\n  },\n\n  /**\n   * Get model of region\n   * @param  {string} name\n   * @return {module:echarts/model/Model}\n   */\n  getRegionModel: function (regionName) {\n    var data = this.getData();\n    return data.getItemModel(data.indexOfName(regionName));\n  },\n\n  /**\n   * Map tooltip formatter\n   *\n   * @param {number} dataIndex\n   */\n  formatTooltip: function (dataIndex) {\n    // FIXME orignalData and data is a bit confusing\n    var data = this.getData();\n    var formattedValue = addCommas(this.getRawValue(dataIndex));\n    var name = data.getName(dataIndex);\n    var seriesGroup = this.seriesGroup;\n    var seriesNames = [];\n\n    for (var i = 0; i < seriesGroup.length; i++) {\n      var otherIndex = seriesGroup[i].originalData.indexOfName(name);\n\n      if (!isNaN(seriesGroup[i].originalData.get('value', otherIndex))) {\n        seriesNames.push(encodeHTML(seriesGroup[i].name));\n      }\n    }\n\n    return seriesNames.join(', ') + '<br />' + encodeHTML(name + ' : ' + formattedValue);\n  },\n\n  /**\n   * @implement\n   */\n  getTooltipPosition: function (dataIndex) {\n    if (dataIndex != null) {\n      var name = this.getData().getName(dataIndex);\n      var geo = this.coordinateSystem;\n      var region = geo.getRegion(name);\n      return region && geo.dataToPoint(region.center);\n    }\n  },\n  setZoom: function (zoom) {\n    this.option.zoom = zoom;\n  },\n  setCenter: function (center) {\n    this.option.center = center;\n  },\n  defaultOption: {\n    // 一级层叠\n    zlevel: 0,\n    // 二级层叠\n    z: 2,\n    coordinateSystem: 'geo',\n    // map should be explicitly specified since ec3.\n    map: '',\n    // If `geoIndex` is not specified, a exclusive geo will be\n    // created. Otherwise use the specified geo component, and\n    // `map` and `mapType` are ignored.\n    // geoIndex: 0,\n    // 'center' | 'left' | 'right' | 'x%' | {number}\n    left: 'center',\n    // 'center' | 'top' | 'bottom' | 'x%' | {number}\n    top: 'center',\n    // right\n    // bottom\n    // width:\n    // height\n    // Aspect is width / height. Inited to be geoJson bbox aspect\n    // This parameter is used for scale this aspect\n    aspectScale: 0.75,\n    ///// Layout with center and size\n    // If you wan't to put map in a fixed size box with right aspect ratio\n    // This two properties may more conveninet\n    // layoutCenter: [50%, 50%]\n    // layoutSize: 100\n    // 数值合并方式，默认加和，可选为：\n    // 'sum' | 'average' | 'max' | 'min'\n    // mapValueCalculation: 'sum',\n    // 地图数值计算结果小数精度\n    // mapValuePrecision: 0,\n    // 显示图例颜色标识（系列标识的小圆点），图例开启时有效\n    showLegendSymbol: true,\n    // 选择模式，默认关闭，可选single，multiple\n    // selectedMode: false,\n    dataRangeHoverLink: true,\n    // 是否开启缩放及漫游模式\n    // roam: false,\n    // Define left-top, right-bottom coords to control view\n    // For example, [ [180, 90], [-180, -90] ],\n    // higher priority than center and zoom\n    boundingCoords: null,\n    // Default on center of map\n    center: null,\n    zoom: 1,\n    scaleLimit: null,\n    label: {\n      normal: {\n        show: false,\n        color: '#000'\n      },\n      emphasis: {\n        show: true,\n        color: 'rgb(100,0,0)'\n      }\n    },\n    // scaleLimit: null,\n    itemStyle: {\n      normal: {\n        // color: 各异,\n        borderWidth: 0.5,\n        borderColor: '#444',\n        areaColor: '#eee'\n      },\n      // 也是选中样式\n      emphasis: {\n        areaColor: 'rgba(255,215,0,0.8)'\n      }\n    }\n  }\n});\nzrUtil.mixin(MapSeries, dataSelectableMixin);\nvar _default = MapSeries;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}