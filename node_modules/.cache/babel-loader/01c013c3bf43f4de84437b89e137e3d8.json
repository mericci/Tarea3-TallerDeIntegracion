{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nfunction _default(ecModel) {\n  var processedMapType = {};\n  ecModel.eachSeriesByType('map', function (mapSeries) {\n    var mapType = mapSeries.getMapType();\n\n    if (mapSeries.getHostGeoModel() || processedMapType[mapType]) {\n      return;\n    }\n\n    var mapSymbolOffsets = {};\n    zrUtil.each(mapSeries.seriesGroup, function (subMapSeries) {\n      var geo = subMapSeries.coordinateSystem;\n      var data = subMapSeries.originalData;\n\n      if (subMapSeries.get('showLegendSymbol') && ecModel.getComponent('legend')) {\n        data.each('value', function (value, idx) {\n          var name = data.getName(idx);\n          var region = geo.getRegion(name); // If input series.data is [11, 22, '-'/null/undefined, 44],\n          // it will be filled with NaN: [11, 22, NaN, 44] and NaN will\n          // not be drawn. So here must validate if value is NaN.\n\n          if (!region || isNaN(value)) {\n            return;\n          }\n\n          var offset = mapSymbolOffsets[name] || 0;\n          var point = geo.dataToPoint(region.center);\n          mapSymbolOffsets[name] = offset + 1;\n          data.setItemLayout(idx, {\n            point: point,\n            offset: offset\n          });\n        });\n      }\n    }); // Show label of those region not has legendSymbol(which is offset 0)\n\n    var data = mapSeries.getData();\n    data.each(function (idx) {\n      var name = data.getName(idx);\n      var layout = data.getItemLayout(idx) || {};\n      layout.showLabel = !mapSymbolOffsets[name];\n      data.setItemLayout(idx, layout);\n    });\n    processedMapType[mapType] = true;\n  });\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/map/mapSymbolLayout.js"],"names":["zrUtil","require","_default","ecModel","processedMapType","eachSeriesByType","mapSeries","mapType","getMapType","getHostGeoModel","mapSymbolOffsets","each","seriesGroup","subMapSeries","geo","coordinateSystem","data","originalData","get","getComponent","value","idx","name","getName","region","getRegion","isNaN","offset","point","dataToPoint","center","setItemLayout","getData","layout","getItemLayout","showLabel","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAApB;;AAEA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACzB,MAAIC,gBAAgB,GAAG,EAAvB;AACAD,EAAAA,OAAO,CAACE,gBAAR,CAAyB,KAAzB,EAAgC,UAAUC,SAAV,EAAqB;AACnD,QAAIC,OAAO,GAAGD,SAAS,CAACE,UAAV,EAAd;;AAEA,QAAIF,SAAS,CAACG,eAAV,MAA+BL,gBAAgB,CAACG,OAAD,CAAnD,EAA8D;AAC5D;AACD;;AAED,QAAIG,gBAAgB,GAAG,EAAvB;AACAV,IAAAA,MAAM,CAACW,IAAP,CAAYL,SAAS,CAACM,WAAtB,EAAmC,UAAUC,YAAV,EAAwB;AACzD,UAAIC,GAAG,GAAGD,YAAY,CAACE,gBAAvB;AACA,UAAIC,IAAI,GAAGH,YAAY,CAACI,YAAxB;;AAEA,UAAIJ,YAAY,CAACK,GAAb,CAAiB,kBAAjB,KAAwCf,OAAO,CAACgB,YAAR,CAAqB,QAArB,CAA5C,EAA4E;AAC1EH,QAAAA,IAAI,CAACL,IAAL,CAAU,OAAV,EAAmB,UAAUS,KAAV,EAAiBC,GAAjB,EAAsB;AACvC,cAAIC,IAAI,GAAGN,IAAI,CAACO,OAAL,CAAaF,GAAb,CAAX;AACA,cAAIG,MAAM,GAAGV,GAAG,CAACW,SAAJ,CAAcH,IAAd,CAAb,CAFuC,CAEL;AAClC;AACA;;AAEA,cAAI,CAACE,MAAD,IAAWE,KAAK,CAACN,KAAD,CAApB,EAA6B;AAC3B;AACD;;AAED,cAAIO,MAAM,GAAGjB,gBAAgB,CAACY,IAAD,CAAhB,IAA0B,CAAvC;AACA,cAAIM,KAAK,GAAGd,GAAG,CAACe,WAAJ,CAAgBL,MAAM,CAACM,MAAvB,CAAZ;AACApB,UAAAA,gBAAgB,CAACY,IAAD,CAAhB,GAAyBK,MAAM,GAAG,CAAlC;AACAX,UAAAA,IAAI,CAACe,aAAL,CAAmBV,GAAnB,EAAwB;AACtBO,YAAAA,KAAK,EAAEA,KADe;AAEtBD,YAAAA,MAAM,EAAEA;AAFc,WAAxB;AAID,SAjBD;AAkBD;AACF,KAxBD,EARmD,CAgC/C;;AAEJ,QAAIX,IAAI,GAAGV,SAAS,CAAC0B,OAAV,EAAX;AACAhB,IAAAA,IAAI,CAACL,IAAL,CAAU,UAAUU,GAAV,EAAe;AACvB,UAAIC,IAAI,GAAGN,IAAI,CAACO,OAAL,CAAaF,GAAb,CAAX;AACA,UAAIY,MAAM,GAAGjB,IAAI,CAACkB,aAAL,CAAmBb,GAAnB,KAA2B,EAAxC;AACAY,MAAAA,MAAM,CAACE,SAAP,GAAmB,CAACzB,gBAAgB,CAACY,IAAD,CAApC;AACAN,MAAAA,IAAI,CAACe,aAAL,CAAmBV,GAAnB,EAAwBY,MAAxB;AACD,KALD;AAMA7B,IAAAA,gBAAgB,CAACG,OAAD,CAAhB,GAA4B,IAA5B;AACD,GA1CD;AA2CD;;AAED6B,MAAM,CAACC,OAAP,GAAiBnC,QAAjB","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nfunction _default(ecModel) {\n  var processedMapType = {};\n  ecModel.eachSeriesByType('map', function (mapSeries) {\n    var mapType = mapSeries.getMapType();\n\n    if (mapSeries.getHostGeoModel() || processedMapType[mapType]) {\n      return;\n    }\n\n    var mapSymbolOffsets = {};\n    zrUtil.each(mapSeries.seriesGroup, function (subMapSeries) {\n      var geo = subMapSeries.coordinateSystem;\n      var data = subMapSeries.originalData;\n\n      if (subMapSeries.get('showLegendSymbol') && ecModel.getComponent('legend')) {\n        data.each('value', function (value, idx) {\n          var name = data.getName(idx);\n          var region = geo.getRegion(name); // If input series.data is [11, 22, '-'/null/undefined, 44],\n          // it will be filled with NaN: [11, 22, NaN, 44] and NaN will\n          // not be drawn. So here must validate if value is NaN.\n\n          if (!region || isNaN(value)) {\n            return;\n          }\n\n          var offset = mapSymbolOffsets[name] || 0;\n          var point = geo.dataToPoint(region.center);\n          mapSymbolOffsets[name] = offset + 1;\n          data.setItemLayout(idx, {\n            point: point,\n            offset: offset\n          });\n        });\n      }\n    }); // Show label of those region not has legendSymbol(which is offset 0)\n\n    var data = mapSeries.getData();\n    data.each(function (idx) {\n      var name = data.getName(idx);\n      var layout = data.getItemLayout(idx) || {};\n      layout.showLabel = !mapSymbolOffsets[name];\n      data.setItemLayout(idx, layout);\n    });\n    processedMapType[mapType] = true;\n  });\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}