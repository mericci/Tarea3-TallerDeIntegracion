{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar numberUtil = require(\"../../util/number\");\n/**\n * @file  Using layout algorithm transform the raw data to layout information.\n * @author Deqing Li(annong035@gmail.com)\n */\n\n\nfunction _default(ecModel, api) {\n  ecModel.eachSeriesByType('themeRiver', function (seriesModel) {\n    var data = seriesModel.getData();\n    var single = seriesModel.coordinateSystem;\n    var layoutInfo = {}; // use the axis boundingRect for view\n\n    var rect = single.getRect();\n    layoutInfo.rect = rect;\n    var boundaryGap = seriesModel.get('boundaryGap');\n    var axis = single.getAxis();\n    layoutInfo.boundaryGap = boundaryGap;\n\n    if (axis.orient === 'horizontal') {\n      boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.height);\n      boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.height);\n      var height = rect.height - boundaryGap[0] - boundaryGap[1];\n      themeRiverLayout(data, seriesModel, height);\n    } else {\n      boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.width);\n      boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.width);\n      var width = rect.width - boundaryGap[0] - boundaryGap[1];\n      themeRiverLayout(data, seriesModel, width);\n    }\n\n    data.setLayout('layoutInfo', layoutInfo);\n  });\n}\n/**\n * The layout information about themeriver\n *\n * @param {module:echarts/data/List} data  data in the series\n * @param {module:echarts/model/Series} seriesModel  the model object of themeRiver series\n * @param {number} height  value used to compute every series height\n */\n\n\nfunction themeRiverLayout(data, seriesModel, height) {\n  if (!data.count()) {\n    return;\n  }\n\n  var coordSys = seriesModel.coordinateSystem; // the data in each layer are organized into a series.\n\n  var layerSeries = seriesModel.getLayerSeries(); // the points in each layer.\n\n  var layerPoints = zrUtil.map(layerSeries, function (singleLayer) {\n    return zrUtil.map(singleLayer.indices, function (idx) {\n      var pt = coordSys.dataToPoint(data.get('time', idx));\n      pt[1] = data.get('value', idx);\n      return pt;\n    });\n  });\n  var base = computeBaseline(layerPoints);\n  var baseLine = base.y0;\n  var ky = height / base.max; // set layout information for each item.\n\n  var n = layerSeries.length;\n  var m = layerSeries[0].indices.length;\n  var baseY0;\n\n  for (var j = 0; j < m; ++j) {\n    baseY0 = baseLine[j] * ky;\n    data.setItemLayout(layerSeries[0].indices[j], {\n      layerIndex: 0,\n      x: layerPoints[0][j][0],\n      y0: baseY0,\n      y: layerPoints[0][j][1] * ky\n    });\n\n    for (var i = 1; i < n; ++i) {\n      baseY0 += layerPoints[i - 1][j][1] * ky;\n      data.setItemLayout(layerSeries[i].indices[j], {\n        layerIndex: i,\n        x: layerPoints[i][j][0],\n        y0: baseY0,\n        y: layerPoints[i][j][1] * ky\n      });\n    }\n  }\n}\n/**\n * Compute the baseLine of the rawdata\n * Inspired by Lee Byron's paper Stacked Graphs - Geometry & Aesthetics\n *\n * @param  {Array.<Array>} data  the points in each layer\n * @return {Object}\n */\n\n\nfunction computeBaseline(data) {\n  var layerNum = data.length;\n  var pointNum = data[0].length;\n  var sums = [];\n  var y0 = [];\n  var max = 0;\n  var temp;\n  var base = {};\n\n  for (var i = 0; i < pointNum; ++i) {\n    for (var j = 0, temp = 0; j < layerNum; ++j) {\n      temp += data[j][i][1];\n    }\n\n    if (temp > max) {\n      max = temp;\n    }\n\n    sums.push(temp);\n  }\n\n  for (var k = 0; k < pointNum; ++k) {\n    y0[k] = (max - sums[k]) / 2;\n  }\n\n  max = 0;\n\n  for (var l = 0; l < pointNum; ++l) {\n    var sum = sums[l] + y0[l];\n\n    if (sum > max) {\n      max = sum;\n    }\n  }\n\n  base.y0 = y0;\n  base.max = max;\n  return base;\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/themeRiver/themeRiverLayout.js"],"names":["zrUtil","require","numberUtil","_default","ecModel","api","eachSeriesByType","seriesModel","data","getData","single","coordinateSystem","layoutInfo","rect","getRect","boundaryGap","get","axis","getAxis","orient","parsePercent","height","themeRiverLayout","width","setLayout","count","coordSys","layerSeries","getLayerSeries","layerPoints","map","singleLayer","indices","idx","pt","dataToPoint","base","computeBaseline","baseLine","y0","ky","max","n","length","m","baseY0","j","setItemLayout","layerIndex","x","y","i","layerNum","pointNum","sums","temp","push","k","l","sum","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar numberUtil = require(\"../../util/number\");\n\n/**\n * @file  Using layout algorithm transform the raw data to layout information.\n * @author Deqing Li(annong035@gmail.com)\n */\nfunction _default(ecModel, api) {\n  ecModel.eachSeriesByType('themeRiver', function (seriesModel) {\n    var data = seriesModel.getData();\n    var single = seriesModel.coordinateSystem;\n    var layoutInfo = {}; // use the axis boundingRect for view\n\n    var rect = single.getRect();\n    layoutInfo.rect = rect;\n    var boundaryGap = seriesModel.get('boundaryGap');\n    var axis = single.getAxis();\n    layoutInfo.boundaryGap = boundaryGap;\n\n    if (axis.orient === 'horizontal') {\n      boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.height);\n      boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.height);\n      var height = rect.height - boundaryGap[0] - boundaryGap[1];\n      themeRiverLayout(data, seriesModel, height);\n    } else {\n      boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.width);\n      boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.width);\n      var width = rect.width - boundaryGap[0] - boundaryGap[1];\n      themeRiverLayout(data, seriesModel, width);\n    }\n\n    data.setLayout('layoutInfo', layoutInfo);\n  });\n}\n/**\n * The layout information about themeriver\n *\n * @param {module:echarts/data/List} data  data in the series\n * @param {module:echarts/model/Series} seriesModel  the model object of themeRiver series\n * @param {number} height  value used to compute every series height\n */\n\n\nfunction themeRiverLayout(data, seriesModel, height) {\n  if (!data.count()) {\n    return;\n  }\n\n  var coordSys = seriesModel.coordinateSystem; // the data in each layer are organized into a series.\n\n  var layerSeries = seriesModel.getLayerSeries(); // the points in each layer.\n\n  var layerPoints = zrUtil.map(layerSeries, function (singleLayer) {\n    return zrUtil.map(singleLayer.indices, function (idx) {\n      var pt = coordSys.dataToPoint(data.get('time', idx));\n      pt[1] = data.get('value', idx);\n      return pt;\n    });\n  });\n  var base = computeBaseline(layerPoints);\n  var baseLine = base.y0;\n  var ky = height / base.max; // set layout information for each item.\n\n  var n = layerSeries.length;\n  var m = layerSeries[0].indices.length;\n  var baseY0;\n\n  for (var j = 0; j < m; ++j) {\n    baseY0 = baseLine[j] * ky;\n    data.setItemLayout(layerSeries[0].indices[j], {\n      layerIndex: 0,\n      x: layerPoints[0][j][0],\n      y0: baseY0,\n      y: layerPoints[0][j][1] * ky\n    });\n\n    for (var i = 1; i < n; ++i) {\n      baseY0 += layerPoints[i - 1][j][1] * ky;\n      data.setItemLayout(layerSeries[i].indices[j], {\n        layerIndex: i,\n        x: layerPoints[i][j][0],\n        y0: baseY0,\n        y: layerPoints[i][j][1] * ky\n      });\n    }\n  }\n}\n/**\n * Compute the baseLine of the rawdata\n * Inspired by Lee Byron's paper Stacked Graphs - Geometry & Aesthetics\n *\n * @param  {Array.<Array>} data  the points in each layer\n * @return {Object}\n */\n\n\nfunction computeBaseline(data) {\n  var layerNum = data.length;\n  var pointNum = data[0].length;\n  var sums = [];\n  var y0 = [];\n  var max = 0;\n  var temp;\n  var base = {};\n\n  for (var i = 0; i < pointNum; ++i) {\n    for (var j = 0, temp = 0; j < layerNum; ++j) {\n      temp += data[j][i][1];\n    }\n\n    if (temp > max) {\n      max = temp;\n    }\n\n    sums.push(temp);\n  }\n\n  for (var k = 0; k < pointNum; ++k) {\n    y0[k] = (max - sums[k]) / 2;\n  }\n\n  max = 0;\n\n  for (var l = 0; l < pointNum; ++l) {\n    var sum = sums[l] + y0[l];\n\n    if (sum > max) {\n      max = sum;\n    }\n  }\n\n  base.y0 = y0;\n  base.max = max;\n  return base;\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}