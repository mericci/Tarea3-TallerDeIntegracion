{"ast":null,"code":"var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar env = require(\"zrender/lib/core/env\");\n\nvar modelUtil = require(\"../../util/model\");\n\nvar formatUtil = require(\"../../util/format\");\n\nvar addCommas = formatUtil.addCommas;\nvar encodeHTML = formatUtil.encodeHTML;\n\nfunction fillLabel(opt) {\n  modelUtil.defaultEmphasis(opt.label, ['show']);\n}\n\nvar MarkerModel = echarts.extendComponentModel({\n  type: 'marker',\n  dependencies: ['series', 'grid', 'polar', 'geo'],\n\n  /**\n   * @overrite\n   */\n  init: function (option, parentModel, ecModel, extraOpt) {\n    this.mergeDefaultAndTheme(option, ecModel);\n    this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);\n  },\n\n  /**\n   * @return {boolean}\n   */\n  isAnimationEnabled: function () {\n    if (env.node) {\n      return false;\n    }\n\n    var hostSeries = this.__hostSeries;\n    return this.getShallow('animation') && hostSeries && hostSeries.isAnimationEnabled();\n  },\n  mergeOption: function (newOpt, ecModel, createdBySelf, isInit) {\n    var MarkerModel = this.constructor;\n    var modelPropName = this.mainType + 'Model';\n\n    if (!createdBySelf) {\n      ecModel.eachSeries(function (seriesModel) {\n        var markerOpt = seriesModel.get(this.mainType);\n        var markerModel = seriesModel[modelPropName];\n\n        if (!markerOpt || !markerOpt.data) {\n          seriesModel[modelPropName] = null;\n          return;\n        }\n\n        if (!markerModel) {\n          if (isInit) {\n            // Default label emphasis `position` and `show`\n            fillLabel(markerOpt);\n          }\n\n          zrUtil.each(markerOpt.data, function (item) {\n            // FIXME Overwrite fillLabel method ?\n            if (item instanceof Array) {\n              fillLabel(item[0]);\n              fillLabel(item[1]);\n            } else {\n              fillLabel(item);\n            }\n          });\n          markerModel = new MarkerModel(markerOpt, this, ecModel);\n          zrUtil.extend(markerModel, {\n            mainType: this.mainType,\n            // Use the same series index and name\n            seriesIndex: seriesModel.seriesIndex,\n            name: seriesModel.name,\n            createdBySelf: true\n          });\n          markerModel.__hostSeries = seriesModel;\n        } else {\n          markerModel.mergeOption(markerOpt, ecModel, true);\n        }\n\n        seriesModel[modelPropName] = markerModel;\n      }, this);\n    }\n  },\n  formatTooltip: function (dataIndex) {\n    var data = this.getData();\n    var value = this.getRawValue(dataIndex);\n    var formattedValue = zrUtil.isArray(value) ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);\n    var name = data.getName(dataIndex);\n    var html = encodeHTML(this.name);\n\n    if (value != null || name) {\n      html += '<br />';\n    }\n\n    if (name) {\n      html += encodeHTML(name);\n\n      if (value != null) {\n        html += ' : ';\n      }\n    }\n\n    if (value != null) {\n      html += encodeHTML(formattedValue);\n    }\n\n    return html;\n  },\n  getData: function () {\n    return this._data;\n  },\n  setData: function (data) {\n    this._data = data;\n  }\n});\nzrUtil.mixin(MarkerModel, modelUtil.dataFormatMixin);\nvar _default = MarkerModel;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/marker/MarkerModel.js"],"names":["_config","require","__DEV__","echarts","zrUtil","env","modelUtil","formatUtil","addCommas","encodeHTML","fillLabel","opt","defaultEmphasis","label","MarkerModel","extendComponentModel","type","dependencies","init","option","parentModel","ecModel","extraOpt","mergeDefaultAndTheme","mergeOption","createdBySelf","isAnimationEnabled","node","hostSeries","__hostSeries","getShallow","newOpt","isInit","constructor","modelPropName","mainType","eachSeries","seriesModel","markerOpt","get","markerModel","data","each","item","Array","extend","seriesIndex","name","formatTooltip","dataIndex","getData","value","getRawValue","formattedValue","isArray","map","join","getName","html","_data","setData","mixin","dataFormatMixin","_default","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIC,OAAO,GAAGF,OAAO,CAACE,OAAtB;;AAEA,IAAIC,OAAO,GAAGF,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIG,MAAM,GAAGH,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAII,GAAG,GAAGJ,OAAO,CAAC,sBAAD,CAAjB;;AAEA,IAAIK,SAAS,GAAGL,OAAO,CAAC,kBAAD,CAAvB;;AAEA,IAAIM,UAAU,GAAGN,OAAO,CAAC,mBAAD,CAAxB;;AAEA,IAAIO,SAAS,GAAGD,UAAU,CAACC,SAA3B;AACA,IAAIC,UAAU,GAAGF,UAAU,CAACE,UAA5B;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACtBL,EAAAA,SAAS,CAACM,eAAV,CAA0BD,GAAG,CAACE,KAA9B,EAAqC,CAAC,MAAD,CAArC;AACD;;AAED,IAAIC,WAAW,GAAGX,OAAO,CAACY,oBAAR,CAA6B;AAC7CC,EAAAA,IAAI,EAAE,QADuC;AAE7CC,EAAAA,YAAY,EAAE,CAAC,QAAD,EAAW,MAAX,EAAmB,OAAnB,EAA4B,KAA5B,CAF+B;;AAI7C;;;AAGAC,EAAAA,IAAI,EAAE,UAAUC,MAAV,EAAkBC,WAAlB,EAA+BC,OAA/B,EAAwCC,QAAxC,EAAkD;AACtD,SAAKC,oBAAL,CAA0BJ,MAA1B,EAAkCE,OAAlC;AACA,SAAKG,WAAL,CAAiBL,MAAjB,EAAyBE,OAAzB,EAAkCC,QAAQ,CAACG,aAA3C,EAA0D,IAA1D;AACD,GAV4C;;AAY7C;;;AAGAC,EAAAA,kBAAkB,EAAE,YAAY;AAC9B,QAAIrB,GAAG,CAACsB,IAAR,EAAc;AACZ,aAAO,KAAP;AACD;;AAED,QAAIC,UAAU,GAAG,KAAKC,YAAtB;AACA,WAAO,KAAKC,UAAL,CAAgB,WAAhB,KAAgCF,UAAhC,IAA8CA,UAAU,CAACF,kBAAX,EAArD;AACD,GAtB4C;AAuB7CF,EAAAA,WAAW,EAAE,UAAUO,MAAV,EAAkBV,OAAlB,EAA2BI,aAA3B,EAA0CO,MAA1C,EAAkD;AAC7D,QAAIlB,WAAW,GAAG,KAAKmB,WAAvB;AACA,QAAIC,aAAa,GAAG,KAAKC,QAAL,GAAgB,OAApC;;AAEA,QAAI,CAACV,aAAL,EAAoB;AAClBJ,MAAAA,OAAO,CAACe,UAAR,CAAmB,UAAUC,WAAV,EAAuB;AACxC,YAAIC,SAAS,GAAGD,WAAW,CAACE,GAAZ,CAAgB,KAAKJ,QAArB,CAAhB;AACA,YAAIK,WAAW,GAAGH,WAAW,CAACH,aAAD,CAA7B;;AAEA,YAAI,CAACI,SAAD,IAAc,CAACA,SAAS,CAACG,IAA7B,EAAmC;AACjCJ,UAAAA,WAAW,CAACH,aAAD,CAAX,GAA6B,IAA7B;AACA;AACD;;AAED,YAAI,CAACM,WAAL,EAAkB;AAChB,cAAIR,MAAJ,EAAY;AACV;AACAtB,YAAAA,SAAS,CAAC4B,SAAD,CAAT;AACD;;AAEDlC,UAAAA,MAAM,CAACsC,IAAP,CAAYJ,SAAS,CAACG,IAAtB,EAA4B,UAAUE,IAAV,EAAgB;AAC1C;AACA,gBAAIA,IAAI,YAAYC,KAApB,EAA2B;AACzBlC,cAAAA,SAAS,CAACiC,IAAI,CAAC,CAAD,CAAL,CAAT;AACAjC,cAAAA,SAAS,CAACiC,IAAI,CAAC,CAAD,CAAL,CAAT;AACD,aAHD,MAGO;AACLjC,cAAAA,SAAS,CAACiC,IAAD,CAAT;AACD;AACF,WARD;AASAH,UAAAA,WAAW,GAAG,IAAI1B,WAAJ,CAAgBwB,SAAhB,EAA2B,IAA3B,EAAiCjB,OAAjC,CAAd;AACAjB,UAAAA,MAAM,CAACyC,MAAP,CAAcL,WAAd,EAA2B;AACzBL,YAAAA,QAAQ,EAAE,KAAKA,QADU;AAEzB;AACAW,YAAAA,WAAW,EAAET,WAAW,CAACS,WAHA;AAIzBC,YAAAA,IAAI,EAAEV,WAAW,CAACU,IAJO;AAKzBtB,YAAAA,aAAa,EAAE;AALU,WAA3B;AAOAe,UAAAA,WAAW,CAACX,YAAZ,GAA2BQ,WAA3B;AACD,SAxBD,MAwBO;AACLG,UAAAA,WAAW,CAAChB,WAAZ,CAAwBc,SAAxB,EAAmCjB,OAAnC,EAA4C,IAA5C;AACD;;AAEDgB,QAAAA,WAAW,CAACH,aAAD,CAAX,GAA6BM,WAA7B;AACD,OAtCD,EAsCG,IAtCH;AAuCD;AACF,GApE4C;AAqE7CQ,EAAAA,aAAa,EAAE,UAAUC,SAAV,EAAqB;AAClC,QAAIR,IAAI,GAAG,KAAKS,OAAL,EAAX;AACA,QAAIC,KAAK,GAAG,KAAKC,WAAL,CAAiBH,SAAjB,CAAZ;AACA,QAAII,cAAc,GAAGjD,MAAM,CAACkD,OAAP,CAAeH,KAAf,IAAwB/C,MAAM,CAACmD,GAAP,CAAWJ,KAAX,EAAkB3C,SAAlB,EAA6BgD,IAA7B,CAAkC,IAAlC,CAAxB,GAAkEhD,SAAS,CAAC2C,KAAD,CAAhG;AACA,QAAIJ,IAAI,GAAGN,IAAI,CAACgB,OAAL,CAAaR,SAAb,CAAX;AACA,QAAIS,IAAI,GAAGjD,UAAU,CAAC,KAAKsC,IAAN,CAArB;;AAEA,QAAII,KAAK,IAAI,IAAT,IAAiBJ,IAArB,EAA2B;AACzBW,MAAAA,IAAI,IAAI,QAAR;AACD;;AAED,QAAIX,IAAJ,EAAU;AACRW,MAAAA,IAAI,IAAIjD,UAAU,CAACsC,IAAD,CAAlB;;AAEA,UAAII,KAAK,IAAI,IAAb,EAAmB;AACjBO,QAAAA,IAAI,IAAI,KAAR;AACD;AACF;;AAED,QAAIP,KAAK,IAAI,IAAb,EAAmB;AACjBO,MAAAA,IAAI,IAAIjD,UAAU,CAAC4C,cAAD,CAAlB;AACD;;AAED,WAAOK,IAAP;AACD,GA7F4C;AA8F7CR,EAAAA,OAAO,EAAE,YAAY;AACnB,WAAO,KAAKS,KAAZ;AACD,GAhG4C;AAiG7CC,EAAAA,OAAO,EAAE,UAAUnB,IAAV,EAAgB;AACvB,SAAKkB,KAAL,GAAalB,IAAb;AACD;AAnG4C,CAA7B,CAAlB;AAqGArC,MAAM,CAACyD,KAAP,CAAa/C,WAAb,EAA0BR,SAAS,CAACwD,eAApC;AACA,IAAIC,QAAQ,GAAGjD,WAAf;AACAkD,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar env = require(\"zrender/lib/core/env\");\n\nvar modelUtil = require(\"../../util/model\");\n\nvar formatUtil = require(\"../../util/format\");\n\nvar addCommas = formatUtil.addCommas;\nvar encodeHTML = formatUtil.encodeHTML;\n\nfunction fillLabel(opt) {\n  modelUtil.defaultEmphasis(opt.label, ['show']);\n}\n\nvar MarkerModel = echarts.extendComponentModel({\n  type: 'marker',\n  dependencies: ['series', 'grid', 'polar', 'geo'],\n\n  /**\n   * @overrite\n   */\n  init: function (option, parentModel, ecModel, extraOpt) {\n    this.mergeDefaultAndTheme(option, ecModel);\n    this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);\n  },\n\n  /**\n   * @return {boolean}\n   */\n  isAnimationEnabled: function () {\n    if (env.node) {\n      return false;\n    }\n\n    var hostSeries = this.__hostSeries;\n    return this.getShallow('animation') && hostSeries && hostSeries.isAnimationEnabled();\n  },\n  mergeOption: function (newOpt, ecModel, createdBySelf, isInit) {\n    var MarkerModel = this.constructor;\n    var modelPropName = this.mainType + 'Model';\n\n    if (!createdBySelf) {\n      ecModel.eachSeries(function (seriesModel) {\n        var markerOpt = seriesModel.get(this.mainType);\n        var markerModel = seriesModel[modelPropName];\n\n        if (!markerOpt || !markerOpt.data) {\n          seriesModel[modelPropName] = null;\n          return;\n        }\n\n        if (!markerModel) {\n          if (isInit) {\n            // Default label emphasis `position` and `show`\n            fillLabel(markerOpt);\n          }\n\n          zrUtil.each(markerOpt.data, function (item) {\n            // FIXME Overwrite fillLabel method ?\n            if (item instanceof Array) {\n              fillLabel(item[0]);\n              fillLabel(item[1]);\n            } else {\n              fillLabel(item);\n            }\n          });\n          markerModel = new MarkerModel(markerOpt, this, ecModel);\n          zrUtil.extend(markerModel, {\n            mainType: this.mainType,\n            // Use the same series index and name\n            seriesIndex: seriesModel.seriesIndex,\n            name: seriesModel.name,\n            createdBySelf: true\n          });\n          markerModel.__hostSeries = seriesModel;\n        } else {\n          markerModel.mergeOption(markerOpt, ecModel, true);\n        }\n\n        seriesModel[modelPropName] = markerModel;\n      }, this);\n    }\n  },\n  formatTooltip: function (dataIndex) {\n    var data = this.getData();\n    var value = this.getRawValue(dataIndex);\n    var formattedValue = zrUtil.isArray(value) ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);\n    var name = data.getName(dataIndex);\n    var html = encodeHTML(this.name);\n\n    if (value != null || name) {\n      html += '<br />';\n    }\n\n    if (name) {\n      html += encodeHTML(name);\n\n      if (value != null) {\n        html += ' : ';\n      }\n    }\n\n    if (value != null) {\n      html += encodeHTML(formattedValue);\n    }\n\n    return html;\n  },\n  getData: function () {\n    return this._data;\n  },\n  setData: function (data) {\n    this._data = data;\n  }\n});\nzrUtil.mixin(MarkerModel, modelUtil.dataFormatMixin);\nvar _default = MarkerModel;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}