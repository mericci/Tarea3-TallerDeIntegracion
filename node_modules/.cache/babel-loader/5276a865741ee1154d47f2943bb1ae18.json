{"ast":null,"code":"var _jsxFileName = \"/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ExchangeDetail from './components/ExchangeDetail';\nimport io from 'socket.io-client';\nconst server = 'wss://le-18262636.bitzonte.com';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.wait = () => {};\n\n    this.wait_funct = () => {\n      for (var i = 0; i < 1000; i++) {}\n    };\n\n    this.state = {\n      stock_exchange: {},\n      exchanges: [],\n      is_loading: false,\n      prueba: [],\n      big_updates: {},\n      small_updates: {},\n      last_updates: {},\n      total_volume: {},\n      all_exchange_volume: 0,\n      buy_volume: {},\n      sell_volume: {},\n      exchange_volume: {}\n    };\n  }\n\n  componentDidMount() {\n    const socket = io(server, {\n      path: '/stocks'\n    });\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', data => {\n      socket.emit('STOCKS');\n      socket.on('STOCKS', stocks_info => {\n        const exchange_info = Object.entries(data).map(([key, value]) => {\n          return value;\n        });\n        exchange_info.map(exchange => {\n          this.setState({\n            exchange_volume: {\n              [exchange.name]: 0,\n              ...this.state.exchange_volume\n            }\n          });\n          exchange.listed_companies.map(comp => {\n            stocks_info.map(stock => {\n              if (comp === stock.company_name) {\n                this.setState({\n                  stock_exchange: {\n                    [stock.ticker]: exchange.name,\n                    ...this.state.stock_exchange\n                  }\n                });\n              }\n            });\n          });\n        });\n        this.setState({\n          exchanges: Object.entries(data).map(([key, value]) => {\n            return {\n              name: value.name,\n              exchange_ticker: value.exchange_ticker,\n              stocks: value.listed_companies.map(company => {\n                var tick = '';\n                stocks_info.map(stock => {\n                  if (company === stock.company_name) {\n                    tick = stock.ticker;\n                  }\n                });\n                return {\n                  company: company,\n                  update: [],\n                  update_time: [],\n                  buy: [],\n                  sell: [],\n                  ticker: tick\n                };\n              }),\n              buy_volume: 0,\n              sell_volume: 0\n            };\n          })\n        });\n        stocks_info.map(stock => {\n          this.setState({\n            big_updates: {\n              [stock.ticker]: 0,\n              ...this.state.big_updates\n            },\n            small_updates: {\n              [stock.ticker]: Infinity,\n              ...this.state.small_updates\n            },\n            last_updates: {\n              [stock.ticker]: 0,\n              ...this.state.last_updates\n            },\n            total_volume: {\n              [stock.ticker]: 0,\n              ...this.state.total_volume\n            },\n            buy_volume: {\n              [stock.ticker]: 0,\n              ...this.state.buy_volume\n            },\n            sell_volume: {\n              [stock.ticker]: 0,\n              ...this.state.sell_volume\n            }\n          });\n        }); //console.log(this.state.total_volume)\n      });\n    });\n    socket.on('UPDATE', data => {\n      var exchange_input = this.state.stock_exchange[data.ticker];\n      this.state.exchanges.map(exchange => {\n        if (exchange.name === exchange_input) {\n          exchange.stocks.map(stock => {\n            if (stock.ticker === data.ticker) {\n              stock.update.push({\n                date: data.time,\n                value: data.value\n              }); //update.length - 1\n            }\n          });\n        }\n      });\n      this.state.last_updates[data.ticker] = data.value;\n\n      if (data.value > this.state.big_updates[data.ticker]) {\n        this.state.big_updates[data.ticker] = data.value;\n      }\n\n      if (data.value < this.state.small_updates[data.ticker]) {\n        this.state.small_updates[data.ticker] = data.value;\n      }\n\n      this.setState({\n        prueba: [{\n          date: data.time,\n          value: data.value\n        }, ...this.state.prueba]\n      }); //console.log(this.state.prueba)\n    });\n    socket.on('BUY', data => {\n      this.state.all_exchange_volume += data.volume;\n\n      if (isNaN(this.state.total_volume[data.ticker])) {\n        this.state.total_volume[data.ticker] = 0;\n      }\n\n      this.state.total_volume[data.ticker] += data.volume;\n      this.state.buy_volume[data.ticker] += data.volume;\n      var exchange_input = this.state.stock_exchange[data.ticker];\n      this.state.exchanges.map(exchange => {\n        if (exchange.name === exchange_input) {\n          if (exchange.name === exchange_input) {\n            exchange.buy_volume += data.volume;\n          }\n        }\n      });\n      this.setState({\n        buy_sell: true\n      });\n    });\n    socket.on('SELL', data => {\n      this.state.all_exchange_volume += data.volume;\n\n      if (isNaN(this.state.total_volume[data.ticker])) {\n        this.state.total_volume[data.ticker] = 0;\n      }\n\n      this.state.total_volume[data.ticker] += data.volume;\n      this.state.sell_volume[data.ticker] += data.volume;\n      var exchange_input = this.state.stock_exchange[data.ticker];\n      this.state.exchanges.map(exchange => {\n        if (exchange.name === exchange_input) {\n          exchange.sell_volume += data.volume;\n        }\n      });\n      this.setState({\n        buy_sell: true\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 7\n      }\n    }, this.state.exchanges.map(exchange => {\n      this.wait_funct();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"exchange\",\n        key: exchange.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ExchangeDetail, {\n        key: exchange.name,\n        exchange: exchange,\n        prueba: this.state.prueba,\n        bigs: this.state.big_updates,\n        smalls: this.state.small_updates,\n        lasts: this.state.last_updates,\n        volume: this.state.total_volume,\n        total_volume: this.state.all_exchange_volume,\n        buy_volume: this.state.buy_volume,\n        sell_volume: this.state.sell_volume,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }\n      }));\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/App.js"],"names":["React","Component","ExchangeDetail","io","server","App","constructor","wait","wait_funct","i","state","stock_exchange","exchanges","is_loading","prueba","big_updates","small_updates","last_updates","total_volume","all_exchange_volume","buy_volume","sell_volume","exchange_volume","componentDidMount","socket","path","emit","on","data","stocks_info","exchange_info","Object","entries","map","key","value","exchange","setState","name","listed_companies","comp","stock","company_name","ticker","exchange_ticker","stocks","company","tick","update","update_time","buy","sell","Infinity","exchange_input","push","date","time","volume","isNaN","buy_sell","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport ExchangeDetail from './components/ExchangeDetail';\n\nimport io from 'socket.io-client'\n\n\nconst server = 'wss://le-18262636.bitzonte.com';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n\n    this.state = {\n      stock_exchange: {},\n      exchanges: [],\n      is_loading: false,\n      prueba: [],\n      big_updates: {},\n      small_updates: {},\n      last_updates: {},\n      total_volume: {},\n      all_exchange_volume: 0,\n      buy_volume: {},\n      sell_volume: {},\n      exchange_volume: {}\n\n    };    \n  }\n\n  wait = () => {\n\n  }\n\n  componentDidMount() {\n      const socket = io(server, {  \n        path: '/stocks'\n      });\n     \n      socket.emit('EXCHANGES')\n      socket.on('EXCHANGES', (data) => {\n        socket.emit('STOCKS');\n        socket.on('STOCKS', (stocks_info) => {\n          const exchange_info = Object.entries(data).map(([key,value])=>{return(value)});\n          exchange_info.map(exchange => {\n            this.setState({exchange_volume: {[exchange.name]: 0, ...this.state.exchange_volume}})\n            exchange.listed_companies.map(comp => {\n              stocks_info.map(stock => {\n                if(comp === stock.company_name) {\n                  this.setState({stock_exchange: {[stock.ticker]: exchange.name, ...this.state.stock_exchange}})\n                }\n              })\n            })\n          })\n\n          this.setState({exchanges: Object.entries(data).map(([key,value])=>{\n              \n              return({\n                name: value.name,\n                exchange_ticker: value.exchange_ticker,\n                stocks: \n                  value.listed_companies.map(company => {\n                    var tick = '';\n                    stocks_info.map(stock => {\n                      if (company === stock.company_name){\n                        tick = stock.ticker;\n                      }\n                    })\n                    return {\n                      company: company,\n                      update: [],\n                      update_time: [],\n                      buy: [],\n                      sell: [],\n                      ticker: tick,\n          \n                    }\n                  }),\n                  buy_volume: 0,\n                  sell_volume: 0,\n              })\n            })\n          });\n        \n          stocks_info.map(stock => {\n            this.setState({\n              big_updates: {[stock.ticker]: 0, ...this.state.big_updates},\n              small_updates: {[stock.ticker]: Infinity, ...this.state.small_updates},\n              last_updates: {[stock.ticker]: 0, ...this.state.last_updates},\n              total_volume: {[stock.ticker]: 0, ...this.state.total_volume},\n              buy_volume: {[stock.ticker]: 0, ...this.state.buy_volume},\n              sell_volume: {[stock.ticker]: 0, ...this.state.sell_volume},\n            })\n          })\n          //console.log(this.state.total_volume)\n\n        \n          \n        \n        \n        });\n      });\n      \n      socket.on('UPDATE', (data) => {\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n            exchange.stocks.map(stock => {\n              if(stock.ticker === data.ticker) {\n                stock.update.push({date: data.time, value: data.value }) //update.length - 1\n              }\n            })\n          }\n        });\n\n        \n        this.state.last_updates[data.ticker] = data.value;\n        if(data.value > this.state.big_updates[data.ticker]) {\n          this.state.big_updates[data.ticker] = data.value;\n        } \n        if(data.value < this.state.small_updates[data.ticker]) {\n          this.state.small_updates[data.ticker] = data.value;\n        }\n\n        this.setState({prueba: [{date: data.time, value: data.value }, ...this.state.prueba] })\n\n        //console.log(this.state.prueba)\n\n        \n        \n\n        \n\n      });\n\n      socket.on('BUY', (data) => {\n        this.state.all_exchange_volume += data.volume;\n        if(isNaN(this.state.total_volume[data.ticker])){\n          this.state.total_volume[data.ticker] = 0;\n        }\n        this.state.total_volume[data.ticker] += data.volume;\n        this.state.buy_volume[data.ticker] += data.volume;\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n            if(exchange.name === exchange_input) {\n              exchange.buy_volume += data.volume\n            }\n          }\n        });\n        this.setState({buy_sell: true})\n      \n      });\n\n      socket.on('SELL', (data) => {\n        this.state.all_exchange_volume += data.volume;\n        if(isNaN(this.state.total_volume[data.ticker])){\n          this.state.total_volume[data.ticker] = 0;\n        }\n        this.state.total_volume[data.ticker] += data.volume;\n        this.state.sell_volume[data.ticker] += data.volume;\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n              exchange.sell_volume += data.volume\n            }\n        \n          }\n        );\n        this.setState({buy_sell: true})\n      });\n      \n  }\n\n  wait_funct = () => {\n    for(var i= 0; i< 1000; i++){\n    }\n  }\n\n\n  \n  render() {\n    return(\n      <div className=\"App\">\n          {this.state.exchanges.map(exchange => {\n            this.wait_funct()\n            return(\n              <div className=\"exchange\" key={exchange.name}>\n                <ExchangeDetail\n                  key={exchange.name} \n                  exchange = {exchange}\n                  prueba = {this.state.prueba}\n                  bigs = {this.state.big_updates}\n                  smalls = {this.state.small_updates}\n                  lasts = {this.state.last_updates}\n                  volume = {this.state.total_volume}\n                  total_volume = {this.state.all_exchange_volume}\n                  buy_volume = {this.state.buy_volume}\n                  sell_volume = {this.state.sell_volume}\n                />\n              </div>\n            )\n          })}\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}