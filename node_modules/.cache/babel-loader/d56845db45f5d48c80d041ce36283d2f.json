{"ast":null,"code":"var graphic = require(\"../../util/graphic\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar ChartView = require(\"../../view/Chart\");\n\nvar SMOOTH = 0.3;\nvar ParallelView = ChartView.extend({\n  type: 'parallel',\n  init: function () {\n    /**\n     * @type {module:zrender/container/Group}\n     * @private\n     */\n    this._dataGroup = new graphic.Group();\n    this.group.add(this._dataGroup);\n    /**\n     * @type {module:echarts/data/List}\n     */\n\n    this._data;\n  },\n\n  /**\n   * @override\n   */\n  render: function (seriesModel, ecModel, api, payload) {\n    this._renderForNormal(seriesModel, payload); // this[\n    //     seriesModel.option.progressive\n    //         ? '_renderForProgressive'\n    //         : '_renderForNormal'\n    // ](seriesModel);\n\n  },\n  dispose: function () {},\n\n  /**\n   * @private\n   */\n  _renderForNormal: function (seriesModel, payload) {\n    var dataGroup = this._dataGroup;\n    var data = seriesModel.getData();\n    var oldData = this._data;\n    var coordSys = seriesModel.coordinateSystem;\n    var dimensions = coordSys.dimensions;\n    var option = seriesModel.option;\n    var smooth = option.smooth ? SMOOTH : null; // Consider switch between progressive and not.\n    // oldData && oldData.__plProgressive && dataGroup.removeAll();\n\n    data.diff(oldData).add(add).update(update).remove(remove).execute(); // Update style\n\n    updateElCommon(data, smooth); // First create\n\n    if (!this._data) {\n      var clipPath = createGridClipShape(coordSys, seriesModel, function () {\n        // Callback will be invoked immediately if there is no animation\n        setTimeout(function () {\n          dataGroup.removeClipPath();\n        });\n      });\n      dataGroup.setClipPath(clipPath);\n    }\n\n    this._data = data;\n\n    function add(newDataIndex) {\n      addEl(data, dataGroup, newDataIndex, dimensions, coordSys, null, smooth);\n    }\n\n    function update(newDataIndex, oldDataIndex) {\n      var line = oldData.getItemGraphicEl(oldDataIndex);\n      var points = createLinePoints(data, newDataIndex, dimensions, coordSys);\n      data.setItemGraphicEl(newDataIndex, line);\n      var animationModel = payload && payload.animation === false ? null : seriesModel;\n      graphic.updateProps(line, {\n        shape: {\n          points: points\n        }\n      }, animationModel, newDataIndex);\n    }\n\n    function remove(oldDataIndex) {\n      var line = oldData.getItemGraphicEl(oldDataIndex);\n      dataGroup.remove(line);\n    }\n  },\n\n  /**\n   * @private\n   */\n  // _renderForProgressive: function (seriesModel) {\n  //     var dataGroup = this._dataGroup;\n  //     var data = seriesModel.getData();\n  //     var oldData = this._data;\n  //     var coordSys = seriesModel.coordinateSystem;\n  //     var dimensions = coordSys.dimensions;\n  //     var option = seriesModel.option;\n  //     var progressive = option.progressive;\n  //     var smooth = option.smooth ? SMOOTH : null;\n  //     // In progressive animation is disabled, so use simple data diff,\n  //     // which effects performance less.\n  //     // (Typically performance for data with length 7000+ like:\n  //     // simpleDiff: 60ms, addEl: 184ms,\n  //     // in RMBP 2.4GHz intel i7, OSX 10.9 chrome 50.0.2661.102 (64-bit))\n  //     if (simpleDiff(oldData, data, dimensions)) {\n  //         dataGroup.removeAll();\n  //         data.each(function (dataIndex) {\n  //             addEl(data, dataGroup, dataIndex, dimensions, coordSys);\n  //         });\n  //     }\n  //     updateElCommon(data, progressive, smooth);\n  //     // Consider switch between progressive and not.\n  //     data.__plProgressive = true;\n  //     this._data = data;\n  // },\n\n  /**\n   * @override\n   */\n  remove: function () {\n    this._dataGroup && this._dataGroup.removeAll();\n    this._data = null;\n  }\n});\n\nfunction createGridClipShape(coordSys, seriesModel, cb) {\n  var parallelModel = coordSys.model;\n  var rect = coordSys.getRect();\n  var rectEl = new graphic.Rect({\n    shape: {\n      x: rect.x,\n      y: rect.y,\n      width: rect.width,\n      height: rect.height\n    }\n  });\n  var dim = parallelModel.get('layout') === 'horizontal' ? 'width' : 'height';\n  rectEl.setShape(dim, 0);\n  graphic.initProps(rectEl, {\n    shape: {\n      width: rect.width,\n      height: rect.height\n    }\n  }, seriesModel, cb);\n  return rectEl;\n}\n\nfunction createLinePoints(data, dataIndex, dimensions, coordSys) {\n  var points = [];\n\n  for (var i = 0; i < dimensions.length; i++) {\n    var dimName = dimensions[i];\n    var value = data.get(dimName, dataIndex);\n\n    if (!isEmptyValue(value, coordSys.getAxis(dimName).type)) {\n      points.push(coordSys.dataToPoint(value, dimName));\n    }\n  }\n\n  return points;\n}\n\nfunction addEl(data, dataGroup, dataIndex, dimensions, coordSys) {\n  var points = createLinePoints(data, dataIndex, dimensions, coordSys);\n  var line = new graphic.Polyline({\n    shape: {\n      points: points\n    },\n    silent: true,\n    z2: 10\n  });\n  dataGroup.add(line);\n  data.setItemGraphicEl(dataIndex, line);\n}\n\nfunction updateElCommon(data, smooth) {\n  var seriesStyleModel = data.hostModel.getModel('lineStyle.normal');\n  var lineStyle = seriesStyleModel.getLineStyle();\n  data.eachItemGraphicEl(function (line, dataIndex) {\n    if (data.hasItemOption) {\n      var itemModel = data.getItemModel(dataIndex);\n      var lineStyleModel = itemModel.getModel('lineStyle.normal', seriesStyleModel);\n      lineStyle = lineStyleModel.getLineStyle(['color', 'stroke']);\n    }\n\n    line.useStyle(zrUtil.extend(lineStyle, {\n      fill: null,\n      // lineStyle.color have been set to itemVisual in module:echarts/visual/seriesColor.\n      stroke: data.getItemVisual(dataIndex, 'color'),\n      // lineStyle.opacity have been set to itemVisual in parallelVisual.\n      opacity: data.getItemVisual(dataIndex, 'opacity')\n    }));\n    line.shape.smooth = smooth;\n  });\n} // function simpleDiff(oldData, newData, dimensions) {\n//     var oldLen;\n//     if (!oldData\n//         || !oldData.__plProgressive\n//         || (oldLen = oldData.count()) !== newData.count()\n//     ) {\n//         return true;\n//     }\n//     var dimLen = dimensions.length;\n//     for (var i = 0; i < oldLen; i++) {\n//         for (var j = 0; j < dimLen; j++) {\n//             if (oldData.get(dimensions[j], i) !== newData.get(dimensions[j], i)) {\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// FIXME\n// 公用方法?\n\n\nfunction isEmptyValue(val, axisType) {\n  return axisType === 'category' ? val == null : val == null || isNaN(val); // axisType === 'value'\n}\n\nvar _default = ParallelView;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/parallel/ParallelView.js"],"names":["graphic","require","zrUtil","ChartView","SMOOTH","ParallelView","extend","type","init","_dataGroup","Group","group","add","_data","render","seriesModel","ecModel","api","payload","_renderForNormal","dispose","dataGroup","data","getData","oldData","coordSys","coordinateSystem","dimensions","option","smooth","diff","update","remove","execute","updateElCommon","clipPath","createGridClipShape","setTimeout","removeClipPath","setClipPath","newDataIndex","addEl","oldDataIndex","line","getItemGraphicEl","points","createLinePoints","setItemGraphicEl","animationModel","animation","updateProps","shape","removeAll","cb","parallelModel","model","rect","getRect","rectEl","Rect","x","y","width","height","dim","get","setShape","initProps","dataIndex","i","length","dimName","value","isEmptyValue","getAxis","push","dataToPoint","Polyline","silent","z2","seriesStyleModel","hostModel","getModel","lineStyle","getLineStyle","eachItemGraphicEl","hasItemOption","itemModel","getItemModel","lineStyleModel","useStyle","fill","stroke","getItemVisual","opacity","val","axisType","isNaN","_default","module","exports"],"mappings":"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","sourcesContent":["var graphic = require(\"../../util/graphic\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar ChartView = require(\"../../view/Chart\");\n\nvar SMOOTH = 0.3;\nvar ParallelView = ChartView.extend({\n  type: 'parallel',\n  init: function () {\n    /**\n     * @type {module:zrender/container/Group}\n     * @private\n     */\n    this._dataGroup = new graphic.Group();\n    this.group.add(this._dataGroup);\n    /**\n     * @type {module:echarts/data/List}\n     */\n\n    this._data;\n  },\n\n  /**\n   * @override\n   */\n  render: function (seriesModel, ecModel, api, payload) {\n    this._renderForNormal(seriesModel, payload); // this[\n    //     seriesModel.option.progressive\n    //         ? '_renderForProgressive'\n    //         : '_renderForNormal'\n    // ](seriesModel);\n\n  },\n  dispose: function () {},\n\n  /**\n   * @private\n   */\n  _renderForNormal: function (seriesModel, payload) {\n    var dataGroup = this._dataGroup;\n    var data = seriesModel.getData();\n    var oldData = this._data;\n    var coordSys = seriesModel.coordinateSystem;\n    var dimensions = coordSys.dimensions;\n    var option = seriesModel.option;\n    var smooth = option.smooth ? SMOOTH : null; // Consider switch between progressive and not.\n    // oldData && oldData.__plProgressive && dataGroup.removeAll();\n\n    data.diff(oldData).add(add).update(update).remove(remove).execute(); // Update style\n\n    updateElCommon(data, smooth); // First create\n\n    if (!this._data) {\n      var clipPath = createGridClipShape(coordSys, seriesModel, function () {\n        // Callback will be invoked immediately if there is no animation\n        setTimeout(function () {\n          dataGroup.removeClipPath();\n        });\n      });\n      dataGroup.setClipPath(clipPath);\n    }\n\n    this._data = data;\n\n    function add(newDataIndex) {\n      addEl(data, dataGroup, newDataIndex, dimensions, coordSys, null, smooth);\n    }\n\n    function update(newDataIndex, oldDataIndex) {\n      var line = oldData.getItemGraphicEl(oldDataIndex);\n      var points = createLinePoints(data, newDataIndex, dimensions, coordSys);\n      data.setItemGraphicEl(newDataIndex, line);\n      var animationModel = payload && payload.animation === false ? null : seriesModel;\n      graphic.updateProps(line, {\n        shape: {\n          points: points\n        }\n      }, animationModel, newDataIndex);\n    }\n\n    function remove(oldDataIndex) {\n      var line = oldData.getItemGraphicEl(oldDataIndex);\n      dataGroup.remove(line);\n    }\n  },\n\n  /**\n   * @private\n   */\n  // _renderForProgressive: function (seriesModel) {\n  //     var dataGroup = this._dataGroup;\n  //     var data = seriesModel.getData();\n  //     var oldData = this._data;\n  //     var coordSys = seriesModel.coordinateSystem;\n  //     var dimensions = coordSys.dimensions;\n  //     var option = seriesModel.option;\n  //     var progressive = option.progressive;\n  //     var smooth = option.smooth ? SMOOTH : null;\n  //     // In progressive animation is disabled, so use simple data diff,\n  //     // which effects performance less.\n  //     // (Typically performance for data with length 7000+ like:\n  //     // simpleDiff: 60ms, addEl: 184ms,\n  //     // in RMBP 2.4GHz intel i7, OSX 10.9 chrome 50.0.2661.102 (64-bit))\n  //     if (simpleDiff(oldData, data, dimensions)) {\n  //         dataGroup.removeAll();\n  //         data.each(function (dataIndex) {\n  //             addEl(data, dataGroup, dataIndex, dimensions, coordSys);\n  //         });\n  //     }\n  //     updateElCommon(data, progressive, smooth);\n  //     // Consider switch between progressive and not.\n  //     data.__plProgressive = true;\n  //     this._data = data;\n  // },\n\n  /**\n   * @override\n   */\n  remove: function () {\n    this._dataGroup && this._dataGroup.removeAll();\n    this._data = null;\n  }\n});\n\nfunction createGridClipShape(coordSys, seriesModel, cb) {\n  var parallelModel = coordSys.model;\n  var rect = coordSys.getRect();\n  var rectEl = new graphic.Rect({\n    shape: {\n      x: rect.x,\n      y: rect.y,\n      width: rect.width,\n      height: rect.height\n    }\n  });\n  var dim = parallelModel.get('layout') === 'horizontal' ? 'width' : 'height';\n  rectEl.setShape(dim, 0);\n  graphic.initProps(rectEl, {\n    shape: {\n      width: rect.width,\n      height: rect.height\n    }\n  }, seriesModel, cb);\n  return rectEl;\n}\n\nfunction createLinePoints(data, dataIndex, dimensions, coordSys) {\n  var points = [];\n\n  for (var i = 0; i < dimensions.length; i++) {\n    var dimName = dimensions[i];\n    var value = data.get(dimName, dataIndex);\n\n    if (!isEmptyValue(value, coordSys.getAxis(dimName).type)) {\n      points.push(coordSys.dataToPoint(value, dimName));\n    }\n  }\n\n  return points;\n}\n\nfunction addEl(data, dataGroup, dataIndex, dimensions, coordSys) {\n  var points = createLinePoints(data, dataIndex, dimensions, coordSys);\n  var line = new graphic.Polyline({\n    shape: {\n      points: points\n    },\n    silent: true,\n    z2: 10\n  });\n  dataGroup.add(line);\n  data.setItemGraphicEl(dataIndex, line);\n}\n\nfunction updateElCommon(data, smooth) {\n  var seriesStyleModel = data.hostModel.getModel('lineStyle.normal');\n  var lineStyle = seriesStyleModel.getLineStyle();\n  data.eachItemGraphicEl(function (line, dataIndex) {\n    if (data.hasItemOption) {\n      var itemModel = data.getItemModel(dataIndex);\n      var lineStyleModel = itemModel.getModel('lineStyle.normal', seriesStyleModel);\n      lineStyle = lineStyleModel.getLineStyle(['color', 'stroke']);\n    }\n\n    line.useStyle(zrUtil.extend(lineStyle, {\n      fill: null,\n      // lineStyle.color have been set to itemVisual in module:echarts/visual/seriesColor.\n      stroke: data.getItemVisual(dataIndex, 'color'),\n      // lineStyle.opacity have been set to itemVisual in parallelVisual.\n      opacity: data.getItemVisual(dataIndex, 'opacity')\n    }));\n    line.shape.smooth = smooth;\n  });\n} // function simpleDiff(oldData, newData, dimensions) {\n//     var oldLen;\n//     if (!oldData\n//         || !oldData.__plProgressive\n//         || (oldLen = oldData.count()) !== newData.count()\n//     ) {\n//         return true;\n//     }\n//     var dimLen = dimensions.length;\n//     for (var i = 0; i < oldLen; i++) {\n//         for (var j = 0; j < dimLen; j++) {\n//             if (oldData.get(dimensions[j], i) !== newData.get(dimensions[j], i)) {\n//                 return true;\n//             }\n//         }\n//     }\n//     return false;\n// }\n// FIXME\n// 公用方法?\n\n\nfunction isEmptyValue(val, axisType) {\n  return axisType === 'category' ? val == null : val == null || isNaN(val); // axisType === 'value'\n}\n\nvar _default = ParallelView;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}