{"ast":null,"code":"var SeriesModel = require(\"../../model/Series\");\n\nvar createGraphFromNodeEdge = require(\"../helper/createGraphFromNodeEdge\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n/**\n * @file Get initial data and define sankey view's series model\n * @author Deqing Li(annong035@gmail.com)\n */\n\nvar SankeySeries = SeriesModel.extend({\n  type: 'series.sankey',\n  layoutInfo: null,\n\n  /**\n   * Init a graph data structure from data in option series\n   *\n   * @param  {Object} option  the object used to config echarts view\n   * @return {module:echarts/data/List} storage initial data\n   */\n  getInitialData: function (option) {\n    var links = option.edges || option.links;\n    var nodes = option.data || option.nodes;\n\n    if (nodes && links) {\n      var graph = createGraphFromNodeEdge(nodes, links, this, true);\n      return graph.data;\n    }\n  },\n\n  /**\n   * Return the graphic data structure\n   *\n   * @return {module:echarts/data/Graph} graphic data structure\n   */\n  getGraph: function () {\n    return this.getData().graph;\n  },\n\n  /**\n   * Get edge data of graphic data structure\n   *\n   * @return {module:echarts/data/List} data structure of list\n   */\n  getEdgeData: function () {\n    return this.getGraph().edgeData;\n  },\n\n  /**\n   * @override\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\n    // dataType === 'node' or empty do not show tooltip by default\n    if (dataType === 'edge') {\n      var params = this.getDataParams(dataIndex, dataType);\n      var rawDataOpt = params.data;\n      var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;\n\n      if (params.value) {\n        html += ' : ' + params.value;\n      }\n\n      return encodeHTML(html);\n    }\n\n    return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    layout: null,\n    // the position of the whole view\n    left: '5%',\n    top: '5%',\n    right: '20%',\n    bottom: '5%',\n    // the dx of the node\n    nodeWidth: 20,\n    // the vertical distance between two nodes\n    nodeGap: 8,\n    // the number of iterations to change the position of the node\n    layoutIterations: 32,\n    label: {\n      normal: {\n        show: true,\n        position: 'right',\n        color: '#000',\n        fontSize: 12\n      },\n      emphasis: {\n        show: true\n      }\n    },\n    itemStyle: {\n      normal: {\n        borderWidth: 1,\n        borderColor: '#333'\n      }\n    },\n    lineStyle: {\n      normal: {\n        color: '#314656',\n        opacity: 0.2,\n        curveness: 0.5\n      },\n      emphasis: {\n        opacity: 0.6\n      }\n    },\n    animationEasing: 'linear',\n    animationDuration: 1000\n  }\n});\nvar _default = SankeySeries;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/sankey/SankeySeries.js"],"names":["SeriesModel","require","createGraphFromNodeEdge","_format","encodeHTML","SankeySeries","extend","type","layoutInfo","getInitialData","option","links","edges","nodes","data","graph","getGraph","getData","getEdgeData","edgeData","formatTooltip","dataIndex","multipleSeries","dataType","params","getDataParams","rawDataOpt","html","source","target","value","superCall","defaultOption","zlevel","z","coordinateSystem","layout","left","top","right","bottom","nodeWidth","nodeGap","layoutIterations","label","normal","show","position","color","fontSize","emphasis","itemStyle","borderWidth","borderColor","lineStyle","opacity","curveness","animationEasing","animationDuration","_default","module","exports"],"mappings":"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","sourcesContent":["var SeriesModel = require(\"../../model/Series\");\n\nvar createGraphFromNodeEdge = require(\"../helper/createGraphFromNodeEdge\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\n/**\n * @file Get initial data and define sankey view's series model\n * @author Deqing Li(annong035@gmail.com)\n */\nvar SankeySeries = SeriesModel.extend({\n  type: 'series.sankey',\n  layoutInfo: null,\n\n  /**\n   * Init a graph data structure from data in option series\n   *\n   * @param  {Object} option  the object used to config echarts view\n   * @return {module:echarts/data/List} storage initial data\n   */\n  getInitialData: function (option) {\n    var links = option.edges || option.links;\n    var nodes = option.data || option.nodes;\n\n    if (nodes && links) {\n      var graph = createGraphFromNodeEdge(nodes, links, this, true);\n      return graph.data;\n    }\n  },\n\n  /**\n   * Return the graphic data structure\n   *\n   * @return {module:echarts/data/Graph} graphic data structure\n   */\n  getGraph: function () {\n    return this.getData().graph;\n  },\n\n  /**\n   * Get edge data of graphic data structure\n   *\n   * @return {module:echarts/data/List} data structure of list\n   */\n  getEdgeData: function () {\n    return this.getGraph().edgeData;\n  },\n\n  /**\n   * @override\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\n    // dataType === 'node' or empty do not show tooltip by default\n    if (dataType === 'edge') {\n      var params = this.getDataParams(dataIndex, dataType);\n      var rawDataOpt = params.data;\n      var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;\n\n      if (params.value) {\n        html += ' : ' + params.value;\n      }\n\n      return encodeHTML(html);\n    }\n\n    return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    layout: null,\n    // the position of the whole view\n    left: '5%',\n    top: '5%',\n    right: '20%',\n    bottom: '5%',\n    // the dx of the node\n    nodeWidth: 20,\n    // the vertical distance between two nodes\n    nodeGap: 8,\n    // the number of iterations to change the position of the node\n    layoutIterations: 32,\n    label: {\n      normal: {\n        show: true,\n        position: 'right',\n        color: '#000',\n        fontSize: 12\n      },\n      emphasis: {\n        show: true\n      }\n    },\n    itemStyle: {\n      normal: {\n        borderWidth: 1,\n        borderColor: '#333'\n      }\n    },\n    lineStyle: {\n      normal: {\n        color: '#314656',\n        opacity: 0.2,\n        curveness: 0.5\n      },\n      emphasis: {\n        opacity: 0.6\n      }\n    },\n    animationEasing: 'linear',\n    animationDuration: 1000\n  }\n});\nvar _default = SankeySeries;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}