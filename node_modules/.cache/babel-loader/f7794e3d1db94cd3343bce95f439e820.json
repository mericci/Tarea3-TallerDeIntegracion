{"ast":null,"code":"var echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar axisDefault = require(\"../axisDefault\");\n\nvar Model = require(\"../../model/Model\");\n\nvar axisModelCommonMixin = require(\"../axisModelCommonMixin\");\n\nvar valueAxisDefault = axisDefault.valueAxis;\n\nfunction defaultsShow(opt, show) {\n  return zrUtil.defaults({\n    show: show\n  }, opt);\n}\n\nvar RadarModel = echarts.extendComponentModel({\n  type: 'radar',\n  optionUpdated: function () {\n    var boundaryGap = this.get('boundaryGap');\n    var splitNumber = this.get('splitNumber');\n    var scale = this.get('scale');\n    var axisLine = this.get('axisLine');\n    var axisTick = this.get('axisTick');\n    var axisLabel = this.get('axisLabel');\n    var nameTextStyle = this.get('name');\n    var showName = this.get('name.show');\n    var nameFormatter = this.get('name.formatter');\n    var nameGap = this.get('nameGap');\n    var triggerEvent = this.get('triggerEvent');\n    var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {\n      // PENDING\n      if (indicatorOpt.max != null && indicatorOpt.max > 0 && !indicatorOpt.min) {\n        indicatorOpt.min = 0;\n      } else if (indicatorOpt.min != null && indicatorOpt.min < 0 && !indicatorOpt.max) {\n        indicatorOpt.max = 0;\n      }\n\n      var iNameTextStyle = nameTextStyle;\n\n      if (indicatorOpt.color != null) {\n        iNameTextStyle = zrUtil.defaults({\n          color: indicatorOpt.color\n        }, nameTextStyle);\n      } // Use same configuration\n\n\n      indicatorOpt = zrUtil.merge(zrUtil.clone(indicatorOpt), {\n        boundaryGap: boundaryGap,\n        splitNumber: splitNumber,\n        scale: scale,\n        axisLine: axisLine,\n        axisTick: axisTick,\n        axisLabel: axisLabel,\n        // Competitable with 2 and use text\n        name: indicatorOpt.text,\n        nameLocation: 'end',\n        nameGap: nameGap,\n        // min: 0,\n        nameTextStyle: iNameTextStyle,\n        triggerEvent: triggerEvent\n      }, false);\n\n      if (!showName) {\n        indicatorOpt.name = '';\n      }\n\n      if (typeof nameFormatter === 'string') {\n        var indName = indicatorOpt.name;\n        indicatorOpt.name = nameFormatter.replace('{value}', indName != null ? indName : '');\n      } else if (typeof nameFormatter === 'function') {\n        indicatorOpt.name = nameFormatter(indicatorOpt.name, indicatorOpt);\n      }\n\n      var model = zrUtil.extend(new Model(indicatorOpt, null, this.ecModel), axisModelCommonMixin); // For triggerEvent.\n\n      model.mainType = 'radar';\n      model.componentIndex = this.componentIndex;\n      return model;\n    }, this);\n\n    this.getIndicatorModels = function () {\n      return indicatorModels;\n    };\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 0,\n    center: ['50%', '50%'],\n    radius: '75%',\n    startAngle: 90,\n    name: {\n      show: true // formatter: null\n      // textStyle: {}\n\n    },\n    boundaryGap: [0, 0],\n    splitNumber: 5,\n    nameGap: 15,\n    scale: false,\n    // Polygon or circle\n    shape: 'polygon',\n    axisLine: zrUtil.merge({\n      lineStyle: {\n        color: '#bbb'\n      }\n    }, valueAxisDefault.axisLine),\n    axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),\n    axisTick: defaultsShow(valueAxisDefault.axisTick, false),\n    splitLine: defaultsShow(valueAxisDefault.splitLine, true),\n    splitArea: defaultsShow(valueAxisDefault.splitArea, true),\n    // {text, min, max}\n    indicator: []\n  }\n});\nvar _default = RadarModel;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/coord/radar/RadarModel.js"],"names":["echarts","require","zrUtil","axisDefault","Model","axisModelCommonMixin","valueAxisDefault","valueAxis","defaultsShow","opt","show","defaults","RadarModel","extendComponentModel","type","optionUpdated","boundaryGap","get","splitNumber","scale","axisLine","axisTick","axisLabel","nameTextStyle","showName","nameFormatter","nameGap","triggerEvent","indicatorModels","map","indicatorOpt","max","min","iNameTextStyle","color","merge","clone","name","text","nameLocation","indName","replace","model","extend","ecModel","mainType","componentIndex","getIndicatorModels","defaultOption","zlevel","z","center","radius","startAngle","shape","lineStyle","splitLine","splitArea","indicator","_default","module","exports"],"mappings":"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","sourcesContent":["var echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar axisDefault = require(\"../axisDefault\");\n\nvar Model = require(\"../../model/Model\");\n\nvar axisModelCommonMixin = require(\"../axisModelCommonMixin\");\n\nvar valueAxisDefault = axisDefault.valueAxis;\n\nfunction defaultsShow(opt, show) {\n  return zrUtil.defaults({\n    show: show\n  }, opt);\n}\n\nvar RadarModel = echarts.extendComponentModel({\n  type: 'radar',\n  optionUpdated: function () {\n    var boundaryGap = this.get('boundaryGap');\n    var splitNumber = this.get('splitNumber');\n    var scale = this.get('scale');\n    var axisLine = this.get('axisLine');\n    var axisTick = this.get('axisTick');\n    var axisLabel = this.get('axisLabel');\n    var nameTextStyle = this.get('name');\n    var showName = this.get('name.show');\n    var nameFormatter = this.get('name.formatter');\n    var nameGap = this.get('nameGap');\n    var triggerEvent = this.get('triggerEvent');\n    var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {\n      // PENDING\n      if (indicatorOpt.max != null && indicatorOpt.max > 0 && !indicatorOpt.min) {\n        indicatorOpt.min = 0;\n      } else if (indicatorOpt.min != null && indicatorOpt.min < 0 && !indicatorOpt.max) {\n        indicatorOpt.max = 0;\n      }\n\n      var iNameTextStyle = nameTextStyle;\n\n      if (indicatorOpt.color != null) {\n        iNameTextStyle = zrUtil.defaults({\n          color: indicatorOpt.color\n        }, nameTextStyle);\n      } // Use same configuration\n\n\n      indicatorOpt = zrUtil.merge(zrUtil.clone(indicatorOpt), {\n        boundaryGap: boundaryGap,\n        splitNumber: splitNumber,\n        scale: scale,\n        axisLine: axisLine,\n        axisTick: axisTick,\n        axisLabel: axisLabel,\n        // Competitable with 2 and use text\n        name: indicatorOpt.text,\n        nameLocation: 'end',\n        nameGap: nameGap,\n        // min: 0,\n        nameTextStyle: iNameTextStyle,\n        triggerEvent: triggerEvent\n      }, false);\n\n      if (!showName) {\n        indicatorOpt.name = '';\n      }\n\n      if (typeof nameFormatter === 'string') {\n        var indName = indicatorOpt.name;\n        indicatorOpt.name = nameFormatter.replace('{value}', indName != null ? indName : '');\n      } else if (typeof nameFormatter === 'function') {\n        indicatorOpt.name = nameFormatter(indicatorOpt.name, indicatorOpt);\n      }\n\n      var model = zrUtil.extend(new Model(indicatorOpt, null, this.ecModel), axisModelCommonMixin); // For triggerEvent.\n\n      model.mainType = 'radar';\n      model.componentIndex = this.componentIndex;\n      return model;\n    }, this);\n\n    this.getIndicatorModels = function () {\n      return indicatorModels;\n    };\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 0,\n    center: ['50%', '50%'],\n    radius: '75%',\n    startAngle: 90,\n    name: {\n      show: true // formatter: null\n      // textStyle: {}\n\n    },\n    boundaryGap: [0, 0],\n    splitNumber: 5,\n    nameGap: 15,\n    scale: false,\n    // Polygon or circle\n    shape: 'polygon',\n    axisLine: zrUtil.merge({\n      lineStyle: {\n        color: '#bbb'\n      }\n    }, valueAxisDefault.axisLine),\n    axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),\n    axisTick: defaultsShow(valueAxisDefault.axisTick, false),\n    splitLine: defaultsShow(valueAxisDefault.splitLine, true),\n    splitArea: defaultsShow(valueAxisDefault.splitArea, true),\n    // {text, min, max}\n    indicator: []\n  }\n});\nvar _default = RadarModel;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}