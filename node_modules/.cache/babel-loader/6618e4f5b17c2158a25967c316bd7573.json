{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n/**\n * @param {Object} opt {labelInside}\n * @return {Object} {\n *  position, rotation, labelDirection, labelOffset,\n *  tickDirection, labelRotate, labelInterval, z2\n * }\n */\n\n\nfunction layout(gridModel, axisModel, opt) {\n  opt = opt || {};\n  var grid = gridModel.coordinateSystem;\n  var axis = axisModel.axis;\n  var layout = {};\n  var rawAxisPosition = axis.position;\n  var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;\n  var axisDim = axis.dim;\n  var rect = grid.getRect();\n  var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\n  var idx = {\n    left: 0,\n    right: 1,\n    top: 0,\n    bottom: 1,\n    onZero: 2\n  };\n  var axisOffset = axisModel.get('offset') || 0;\n  var posBound = axisDim === 'x' ? [rectBound[2] - axisOffset, rectBound[3] + axisOffset] : [rectBound[0] - axisOffset, rectBound[1] + axisOffset];\n\n  if (axis.onZero) {\n    var otherAxis = grid.getAxis(axisDim === 'x' ? 'y' : 'x', axis.onZeroAxisIndex);\n    var onZeroCoord = otherAxis.toGlobalCoord(otherAxis.dataToCoord(0));\n    posBound[idx['onZero']] = Math.max(Math.min(onZeroCoord, posBound[1]), posBound[0]);\n  } // Axis position\n\n\n  layout.position = [axisDim === 'y' ? posBound[idx[axisPosition]] : rectBound[0], axisDim === 'x' ? posBound[idx[axisPosition]] : rectBound[3]]; // Axis rotation\n\n  layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1); // Tick and label direction, x y is axisDim\n\n  var dirMap = {\n    top: -1,\n    bottom: 1,\n    left: -1,\n    right: 1\n  };\n  layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];\n  layout.labelOffset = axis.onZero ? posBound[idx[rawAxisPosition]] - posBound[idx['onZero']] : 0;\n\n  if (axisModel.get('axisTick.inside')) {\n    layout.tickDirection = -layout.tickDirection;\n  }\n\n  if (zrUtil.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {\n    layout.labelDirection = -layout.labelDirection;\n  } // Special label rotation\n\n\n  var labelRotate = axisModel.get('axisLabel.rotate');\n  layout.labelRotate = axisPosition === 'top' ? -labelRotate : labelRotate; // label interval when auto mode.\n\n  layout.labelInterval = axis.getLabelInterval(); // Over splitLine and splitArea\n\n  layout.z2 = 1;\n  return layout;\n}\n\nexports.layout = layout;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/axis/cartesianAxisHelper.js"],"names":["zrUtil","require","layout","gridModel","axisModel","opt","grid","coordinateSystem","axis","rawAxisPosition","position","axisPosition","onZero","axisDim","dim","rect","getRect","rectBound","x","width","y","height","idx","left","right","top","bottom","axisOffset","get","posBound","otherAxis","getAxis","onZeroAxisIndex","onZeroCoord","toGlobalCoord","dataToCoord","Math","max","min","rotation","PI","dirMap","labelDirection","tickDirection","nameDirection","labelOffset","retrieve","labelInside","labelRotate","labelInterval","getLabelInterval","z2","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\n/**\n * @param {Object} opt {labelInside}\n * @return {Object} {\n *  position, rotation, labelDirection, labelOffset,\n *  tickDirection, labelRotate, labelInterval, z2\n * }\n */\nfunction layout(gridModel, axisModel, opt) {\n  opt = opt || {};\n  var grid = gridModel.coordinateSystem;\n  var axis = axisModel.axis;\n  var layout = {};\n  var rawAxisPosition = axis.position;\n  var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;\n  var axisDim = axis.dim;\n  var rect = grid.getRect();\n  var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\n  var idx = {\n    left: 0,\n    right: 1,\n    top: 0,\n    bottom: 1,\n    onZero: 2\n  };\n  var axisOffset = axisModel.get('offset') || 0;\n  var posBound = axisDim === 'x' ? [rectBound[2] - axisOffset, rectBound[3] + axisOffset] : [rectBound[0] - axisOffset, rectBound[1] + axisOffset];\n\n  if (axis.onZero) {\n    var otherAxis = grid.getAxis(axisDim === 'x' ? 'y' : 'x', axis.onZeroAxisIndex);\n    var onZeroCoord = otherAxis.toGlobalCoord(otherAxis.dataToCoord(0));\n    posBound[idx['onZero']] = Math.max(Math.min(onZeroCoord, posBound[1]), posBound[0]);\n  } // Axis position\n\n\n  layout.position = [axisDim === 'y' ? posBound[idx[axisPosition]] : rectBound[0], axisDim === 'x' ? posBound[idx[axisPosition]] : rectBound[3]]; // Axis rotation\n\n  layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1); // Tick and label direction, x y is axisDim\n\n  var dirMap = {\n    top: -1,\n    bottom: 1,\n    left: -1,\n    right: 1\n  };\n  layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];\n  layout.labelOffset = axis.onZero ? posBound[idx[rawAxisPosition]] - posBound[idx['onZero']] : 0;\n\n  if (axisModel.get('axisTick.inside')) {\n    layout.tickDirection = -layout.tickDirection;\n  }\n\n  if (zrUtil.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {\n    layout.labelDirection = -layout.labelDirection;\n  } // Special label rotation\n\n\n  var labelRotate = axisModel.get('axisLabel.rotate');\n  layout.labelRotate = axisPosition === 'top' ? -labelRotate : labelRotate; // label interval when auto mode.\n\n  layout.labelInterval = axis.getLabelInterval(); // Over splitLine and splitArea\n\n  layout.z2 = 1;\n  return layout;\n}\n\nexports.layout = layout;"]},"metadata":{},"sourceType":"script"}