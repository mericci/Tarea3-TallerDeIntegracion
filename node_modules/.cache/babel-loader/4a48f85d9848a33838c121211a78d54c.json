{"ast":null,"code":"var _jsxFileName = \"/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart2.jsx\";\nimport React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\n\nclass Chart2 extends Component {\n  constructor(props) {\n    super(props);\n    this.option = {\n      title: {// text: this.props.title,\n        // textStyle: {\n        //     color: '#FFF'\n        // }\n      },\n      tooltip: {\n        trigger: 'axis',\n        // formatter: function (params) {\n        //     params = params[0];\n        //     var date = new Date(params.name);\n        //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n        // },\n        axisPointer: {\n          animation: false\n        }\n      },\n      xAxis: {\n        type: 'time',\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#FFF'\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: [0, '100%'],\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#FFF'\n          }\n        }\n      },\n      series: [{\n        name: 'CHART',\n        type: 'line',\n        showSymbol: false,\n        hoverAnimation: false,\n        data: this.props.prueba\n      }]\n    };\n    this.boxRef = React.createRef();\n    this.state = {};\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps) {\n    if (this.props.prueba !== prevProps.prueba) {\n      //let charts = echarts.init(document.getElementById(this.boxRef));\n      this.option.series[0].data = this.props.prueba;\n      console.log(this.boxRef, current.props);\n    }\n  }\n\n  render() {\n    const setInterval = () => {\n      console.log(this.boxRef);\n      let charts = echarts.init(document.getElementById(this.boxRef)); //ref={this.boxRef} this.boxRef.current\n\n      this.option.series[0].data = this.props.data;\n      charts.setOption(this.option);\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ReactEcharts, {\n      ref: this.boxRef,\n      option: this.option,\n      style: {\n        height: 360\n      },\n      opts: {\n        renderer: 'svg'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\n;\nexport default Chart2;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart2.jsx"],"names":["React","Component","ReactEcharts","echarts","Chart2","constructor","props","option","title","tooltip","trigger","axisPointer","animation","xAxis","type","splitLine","show","axisLine","lineStyle","color","yAxis","boundaryGap","series","name","showSymbol","hoverAnimation","data","prueba","boxRef","createRef","state","componentDidMount","componentDidUpdate","prevProps","console","log","current","render","setInterval","charts","init","document","getElementById","setOption","height","renderer"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\n\n\n\nclass Chart2 extends Component {\n    constructor(props){\n        super(props);\n        this.boxRef = React.createRef();\n        this.state = {\n\n        };    \n    };\n\n    option = {\n        title: {\n            // text: this.props.title,\n            // textStyle: {\n            //     color: '#FFF'\n            // }\n        },\n        tooltip: {\n             trigger: 'axis',\n             // formatter: function (params) {\n             //     params = params[0];\n             //     var date = new Date(params.name);\n             //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n             // },\n             axisPointer: {\n                animation: false\n            }\n        },\n        xAxis: {\n            type: 'time',\n            splitLine: {\n                show: false\n            },\n            axisLine: {\n                lineStyle: {\n                    color: '#FFF'\n                }\n            }\n        },\n        yAxis: {\n            type: 'value',\n            boundaryGap: [0, '100%'],\n            splitLine: {\n                show: false\n            },\n            axisLine: {\n                lineStyle: {\n                    color: '#FFF'\n                }\n            }\n        },\n        series: [{\n            name: 'CHART',\n            type: 'line',\n            showSymbol: false,\n            hoverAnimation: false,\n            data: this.props.prueba\n        }]\n    };\n\n    componentDidMount() {\n       \n    };\n    \n\n    componentDidUpdate(prevProps) {\n\n        if (this.props.prueba !== prevProps.prueba) {\n            //let charts = echarts.init(document.getElementById(this.boxRef));\n            this.option.series[0].data = this.props.prueba;\n            console.log(this.boxRef,current.props)\n            \n\n        }\n    }\n\n        \n    render() {\n\n        const setInterval = () => {\n            console.log(this.boxRef)\n            let charts = echarts.init(document.getElementById(this.boxRef)); //ref={this.boxRef} this.boxRef.current\n            this.option.series[0].data = this.props.data;\n        \n            charts.setOption(this.option);\n        }\n        \n        return (\n            <div>\n                \n                <div>\n                    <ReactEcharts\n                        ref={this.boxRef}\n                        option={this.option}\n                        style={{height: 360}}\n                        opts={{renderer: 'svg'}}\n                    /> \n                </div>\n            </div>\n        );\n    }\n\n};\n\nexport default Chart2;"]},"metadata":{},"sourceType":"module"}