{"ast":null,"code":"// Pick color from palette for each data item.\n// Applicable for charts that require applying color palette\n// in data level (like pie, funnel, chord).\nfunction _default(seriesType, ecModel) {\n  // Pie and funnel may use diferrent scope\n  var paletteScope = {};\n  ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n    var dataAll = seriesModel.getRawData();\n    var idxMap = {};\n\n    if (!ecModel.isSeriesFiltered(seriesModel)) {\n      var data = seriesModel.getData();\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      });\n      dataAll.each(function (rawIdx) {\n        var filteredIdx = idxMap[rawIdx]; // If series.itemStyle.normal.color is a function. itemVisual may be encoded\n\n        var singleDataColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'color', true);\n\n        if (!singleDataColor) {\n          // FIXME Performance\n          var itemModel = dataAll.getItemModel(rawIdx);\n          var color = itemModel.get('itemStyle.normal.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx), paletteScope); // Legend may use the visual info in data before processed\n\n          dataAll.setItemVisual(rawIdx, 'color', color); // Data is not filtered\n\n          if (filteredIdx != null) {\n            data.setItemVisual(filteredIdx, 'color', color);\n          }\n        } else {\n          // Set data all color for legend\n          dataAll.setItemVisual(rawIdx, 'color', singleDataColor);\n        }\n      });\n    }\n  });\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/visual/dataColor.js"],"names":["_default","seriesType","ecModel","paletteScope","eachRawSeriesByType","seriesModel","dataAll","getRawData","idxMap","isSeriesFiltered","data","getData","each","idx","rawIdx","getRawIndex","filteredIdx","singleDataColor","getItemVisual","itemModel","getItemModel","color","get","getColorFromPalette","getName","setItemVisual","module","exports"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,QAAT,CAAkBC,UAAlB,EAA8BC,OAA9B,EAAuC;AACrC;AACA,MAAIC,YAAY,GAAG,EAAnB;AACAD,EAAAA,OAAO,CAACE,mBAAR,CAA4BH,UAA5B,EAAwC,UAAUI,WAAV,EAAuB;AAC7D,QAAIC,OAAO,GAAGD,WAAW,CAACE,UAAZ,EAAd;AACA,QAAIC,MAAM,GAAG,EAAb;;AAEA,QAAI,CAACN,OAAO,CAACO,gBAAR,CAAyBJ,WAAzB,CAAL,EAA4C;AAC1C,UAAIK,IAAI,GAAGL,WAAW,CAACM,OAAZ,EAAX;AACAD,MAAAA,IAAI,CAACE,IAAL,CAAU,UAAUC,GAAV,EAAe;AACvB,YAAIC,MAAM,GAAGJ,IAAI,CAACK,WAAL,CAAiBF,GAAjB,CAAb;AACAL,QAAAA,MAAM,CAACM,MAAD,CAAN,GAAiBD,GAAjB;AACD,OAHD;AAIAP,MAAAA,OAAO,CAACM,IAAR,CAAa,UAAUE,MAAV,EAAkB;AAC7B,YAAIE,WAAW,GAAGR,MAAM,CAACM,MAAD,CAAxB,CAD6B,CACK;;AAElC,YAAIG,eAAe,GAAGD,WAAW,IAAI,IAAf,IAAuBN,IAAI,CAACQ,aAAL,CAAmBF,WAAnB,EAAgC,OAAhC,EAAyC,IAAzC,CAA7C;;AAEA,YAAI,CAACC,eAAL,EAAsB;AACpB;AACA,cAAIE,SAAS,GAAGb,OAAO,CAACc,YAAR,CAAqBN,MAArB,CAAhB;AACA,cAAIO,KAAK,GAAGF,SAAS,CAACG,GAAV,CAAc,wBAAd,KAA2CjB,WAAW,CAACkB,mBAAZ,CAAgCjB,OAAO,CAACkB,OAAR,CAAgBV,MAAhB,CAAhC,EAAyDX,YAAzD,CAAvD,CAHoB,CAG2G;;AAE/HG,UAAAA,OAAO,CAACmB,aAAR,CAAsBX,MAAtB,EAA8B,OAA9B,EAAuCO,KAAvC,EALoB,CAK2B;;AAE/C,cAAIL,WAAW,IAAI,IAAnB,EAAyB;AACvBN,YAAAA,IAAI,CAACe,aAAL,CAAmBT,WAAnB,EAAgC,OAAhC,EAAyCK,KAAzC;AACD;AACF,SAVD,MAUO;AACL;AACAf,UAAAA,OAAO,CAACmB,aAAR,CAAsBX,MAAtB,EAA8B,OAA9B,EAAuCG,eAAvC;AACD;AACF,OAnBD;AAoBD;AACF,GA/BD;AAgCD;;AAEDS,MAAM,CAACC,OAAP,GAAiB3B,QAAjB","sourcesContent":["// Pick color from palette for each data item.\n// Applicable for charts that require applying color palette\n// in data level (like pie, funnel, chord).\nfunction _default(seriesType, ecModel) {\n  // Pie and funnel may use diferrent scope\n  var paletteScope = {};\n  ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n    var dataAll = seriesModel.getRawData();\n    var idxMap = {};\n\n    if (!ecModel.isSeriesFiltered(seriesModel)) {\n      var data = seriesModel.getData();\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      });\n      dataAll.each(function (rawIdx) {\n        var filteredIdx = idxMap[rawIdx]; // If series.itemStyle.normal.color is a function. itemVisual may be encoded\n\n        var singleDataColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'color', true);\n\n        if (!singleDataColor) {\n          // FIXME Performance\n          var itemModel = dataAll.getItemModel(rawIdx);\n          var color = itemModel.get('itemStyle.normal.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx), paletteScope); // Legend may use the visual info in data before processed\n\n          dataAll.setItemVisual(rawIdx, 'color', color); // Data is not filtered\n\n          if (filteredIdx != null) {\n            data.setItemVisual(filteredIdx, 'color', color);\n          }\n        } else {\n          // Set data all color for legend\n          dataAll.setItemVisual(rawIdx, 'color', singleDataColor);\n        }\n      });\n    }\n  });\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}