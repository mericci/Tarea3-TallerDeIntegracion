{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar _layout = require(\"../../util/layout\");\n\nvar getLayoutRect = _layout.getLayoutRect;\n/**\n * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\\\n * @param {module:echarts/ExtensionAPI} api\n * @param {Array.<number>} itemSize always [short, long]\n * @return {string} 'left' or 'right' or 'top' or 'bottom'\n */\n\nfunction getItemAlign(visualMapModel, api, itemSize) {\n  var modelOption = visualMapModel.option;\n  var itemAlign = modelOption.align;\n\n  if (itemAlign != null && itemAlign !== 'auto') {\n    return itemAlign;\n  } // Auto decision align.\n\n\n  var ecSize = {\n    width: api.getWidth(),\n    height: api.getHeight()\n  };\n  var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;\n  var paramsSet = [['left', 'right', 'width'], ['top', 'bottom', 'height']];\n  var reals = paramsSet[realIndex];\n  var fakeValue = [0, null, 10];\n  var layoutInput = {};\n\n  for (var i = 0; i < 3; i++) {\n    layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];\n    layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];\n  }\n\n  var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];\n  var rect = getLayoutRect(layoutInput, ecSize, modelOption.padding);\n  return reals[(rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5 < ecSize[rParam[1]] * 0.5 ? 0 : 1];\n}\n/**\n * Prepare dataIndex for outside usage, where dataIndex means rawIndex, and\n * dataIndexInside means filtered index.\n */\n\n\nfunction convertDataIndex(batch) {\n  zrUtil.each(batch || [], function (batchItem) {\n    if (batch.dataIndex != null) {\n      batch.dataIndexInside = batch.dataIndex;\n      batch.dataIndex = null;\n    }\n  });\n  return batch;\n}\n\nexports.getItemAlign = getItemAlign;\nexports.convertDataIndex = convertDataIndex;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/visualMap/helper.js"],"names":["zrUtil","require","_layout","getLayoutRect","getItemAlign","visualMapModel","api","itemSize","modelOption","option","itemAlign","align","ecSize","width","getWidth","height","getHeight","realIndex","orient","paramsSet","reals","fakeValue","layoutInput","i","rParam","rect","padding","margin","convertDataIndex","batch","each","batchItem","dataIndex","dataIndexInside","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAArB;;AAEA,IAAIE,aAAa,GAAGD,OAAO,CAACC,aAA5B;AAEA;;;;;;;AAMA,SAASC,YAAT,CAAsBC,cAAtB,EAAsCC,GAAtC,EAA2CC,QAA3C,EAAqD;AACnD,MAAIC,WAAW,GAAGH,cAAc,CAACI,MAAjC;AACA,MAAIC,SAAS,GAAGF,WAAW,CAACG,KAA5B;;AAEA,MAAID,SAAS,IAAI,IAAb,IAAqBA,SAAS,KAAK,MAAvC,EAA+C;AAC7C,WAAOA,SAAP;AACD,GANkD,CAMjD;;;AAGF,MAAIE,MAAM,GAAG;AACXC,IAAAA,KAAK,EAAEP,GAAG,CAACQ,QAAJ,EADI;AAEXC,IAAAA,MAAM,EAAET,GAAG,CAACU,SAAJ;AAFG,GAAb;AAIA,MAAIC,SAAS,GAAGT,WAAW,CAACU,MAAZ,KAAuB,YAAvB,GAAsC,CAAtC,GAA0C,CAA1D;AACA,MAAIC,SAAS,GAAG,CAAC,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,CAAD,EAA6B,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,CAA7B,CAAhB;AACA,MAAIC,KAAK,GAAGD,SAAS,CAACF,SAAD,CAArB;AACA,MAAII,SAAS,GAAG,CAAC,CAAD,EAAI,IAAJ,EAAU,EAAV,CAAhB;AACA,MAAIC,WAAW,GAAG,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BD,IAAAA,WAAW,CAACH,SAAS,CAAC,IAAIF,SAAL,CAAT,CAAyBM,CAAzB,CAAD,CAAX,GAA2CF,SAAS,CAACE,CAAD,CAApD;AACAD,IAAAA,WAAW,CAACF,KAAK,CAACG,CAAD,CAAN,CAAX,GAAwBA,CAAC,KAAK,CAAN,GAAUhB,QAAQ,CAAC,CAAD,CAAlB,GAAwBC,WAAW,CAACY,KAAK,CAACG,CAAD,CAAN,CAA3D;AACD;;AAED,MAAIC,MAAM,GAAG,CAAC,CAAC,GAAD,EAAM,OAAN,EAAe,CAAf,CAAD,EAAoB,CAAC,GAAD,EAAM,QAAN,EAAgB,CAAhB,CAApB,EAAwCP,SAAxC,CAAb;AACA,MAAIQ,IAAI,GAAGtB,aAAa,CAACmB,WAAD,EAAcV,MAAd,EAAsBJ,WAAW,CAACkB,OAAlC,CAAxB;AACA,SAAON,KAAK,CAAC,CAACK,IAAI,CAACE,MAAL,CAAYH,MAAM,CAAC,CAAD,CAAlB,KAA0B,CAA3B,IAAgCC,IAAI,CAACD,MAAM,CAAC,CAAD,CAAP,CAApC,GAAkDC,IAAI,CAACD,MAAM,CAAC,CAAD,CAAP,CAAJ,GAAkB,GAApE,GAA0EZ,MAAM,CAACY,MAAM,CAAC,CAAD,CAAP,CAAN,GAAoB,GAA9F,GAAoG,CAApG,GAAwG,CAAzG,CAAZ;AACD;AACD;;;;;;AAMA,SAASI,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B7B,EAAAA,MAAM,CAAC8B,IAAP,CAAYD,KAAK,IAAI,EAArB,EAAyB,UAAUE,SAAV,EAAqB;AAC5C,QAAIF,KAAK,CAACG,SAAN,IAAmB,IAAvB,EAA6B;AAC3BH,MAAAA,KAAK,CAACI,eAAN,GAAwBJ,KAAK,CAACG,SAA9B;AACAH,MAAAA,KAAK,CAACG,SAAN,GAAkB,IAAlB;AACD;AACF,GALD;AAMA,SAAOH,KAAP;AACD;;AAEDK,OAAO,CAAC9B,YAAR,GAAuBA,YAAvB;AACA8B,OAAO,CAACN,gBAAR,GAA2BA,gBAA3B","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar _layout = require(\"../../util/layout\");\n\nvar getLayoutRect = _layout.getLayoutRect;\n\n/**\n * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\\\n * @param {module:echarts/ExtensionAPI} api\n * @param {Array.<number>} itemSize always [short, long]\n * @return {string} 'left' or 'right' or 'top' or 'bottom'\n */\nfunction getItemAlign(visualMapModel, api, itemSize) {\n  var modelOption = visualMapModel.option;\n  var itemAlign = modelOption.align;\n\n  if (itemAlign != null && itemAlign !== 'auto') {\n    return itemAlign;\n  } // Auto decision align.\n\n\n  var ecSize = {\n    width: api.getWidth(),\n    height: api.getHeight()\n  };\n  var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;\n  var paramsSet = [['left', 'right', 'width'], ['top', 'bottom', 'height']];\n  var reals = paramsSet[realIndex];\n  var fakeValue = [0, null, 10];\n  var layoutInput = {};\n\n  for (var i = 0; i < 3; i++) {\n    layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];\n    layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];\n  }\n\n  var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];\n  var rect = getLayoutRect(layoutInput, ecSize, modelOption.padding);\n  return reals[(rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5 < ecSize[rParam[1]] * 0.5 ? 0 : 1];\n}\n/**\n * Prepare dataIndex for outside usage, where dataIndex means rawIndex, and\n * dataIndexInside means filtered index.\n */\n\n\nfunction convertDataIndex(batch) {\n  zrUtil.each(batch || [], function (batchItem) {\n    if (batch.dataIndex != null) {\n      batch.dataIndexInside = batch.dataIndex;\n      batch.dataIndex = null;\n    }\n  });\n  return batch;\n}\n\nexports.getItemAlign = getItemAlign;\nexports.convertDataIndex = convertDataIndex;"]},"metadata":{},"sourceType":"script"}