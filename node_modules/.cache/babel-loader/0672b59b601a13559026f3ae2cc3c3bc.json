{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar vector = require(\"zrender/lib/core/vector\");\n\nvar matrix = require(\"zrender/lib/core/matrix\");\n\nvar BoundingRect = require(\"zrender/lib/core/BoundingRect\");\n\nvar Transformable = require(\"zrender/lib/mixin/Transformable\");\n/**\n * Simple view coordinate system\n * Mapping given x, y to transformd view x, y\n */\n\n\nvar v2ApplyTransform = vector.applyTransform; // Dummy transform node\n\nfunction TransformDummy() {\n  Transformable.call(this);\n}\n\nzrUtil.mixin(TransformDummy, Transformable);\n\nfunction View(name) {\n  /**\n   * @type {string}\n   */\n  this.name = name;\n  /**\n   * @type {Object}\n   */\n\n  this.zoomLimit;\n  Transformable.call(this);\n  this._roamTransform = new TransformDummy();\n  this._viewTransform = new TransformDummy();\n  this._center;\n  this._zoom;\n}\n\nView.prototype = {\n  constructor: View,\n  type: 'view',\n\n  /**\n   * @param {Array.<string>}\n   * @readOnly\n   */\n  dimensions: ['x', 'y'],\n\n  /**\n   * Set bounding rect\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   */\n  // PENDING to getRect\n  setBoundingRect: function (x, y, width, height) {\n    this._rect = new BoundingRect(x, y, width, height);\n    return this._rect;\n  },\n\n  /**\n   * @return {module:zrender/core/BoundingRect}\n   */\n  // PENDING to getRect\n  getBoundingRect: function () {\n    return this._rect;\n  },\n\n  /**\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   */\n  setViewRect: function (x, y, width, height) {\n    this.transformTo(x, y, width, height);\n    this._viewRect = new BoundingRect(x, y, width, height);\n  },\n\n  /**\n   * Transformed to particular position and size\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   */\n  transformTo: function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var viewTransform = this._viewTransform;\n    viewTransform.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));\n    viewTransform.decomposeTransform();\n\n    this._updateTransform();\n  },\n\n  /**\n   * Set center of view\n   * @param {Array.<number>} [centerCoord]\n   */\n  setCenter: function (centerCoord) {\n    if (!centerCoord) {\n      return;\n    }\n\n    this._center = centerCoord;\n\n    this._updateCenterAndZoom();\n  },\n\n  /**\n   * @param {number} zoom\n   */\n  setZoom: function (zoom) {\n    zoom = zoom || 1;\n    var zoomLimit = this.zoomLimit;\n\n    if (zoomLimit) {\n      if (zoomLimit.max != null) {\n        zoom = Math.min(zoomLimit.max, zoom);\n      }\n\n      if (zoomLimit.min != null) {\n        zoom = Math.max(zoomLimit.min, zoom);\n      }\n    }\n\n    this._zoom = zoom;\n\n    this._updateCenterAndZoom();\n  },\n\n  /**\n   * Get default center without roam\n   */\n  getDefaultCenter: function () {\n    // Rect before any transform\n    var rawRect = this.getBoundingRect();\n    var cx = rawRect.x + rawRect.width / 2;\n    var cy = rawRect.y + rawRect.height / 2;\n    return [cx, cy];\n  },\n  getCenter: function () {\n    return this._center || this.getDefaultCenter();\n  },\n  getZoom: function () {\n    return this._zoom || 1;\n  },\n\n  /**\n   * @return {Array.<number}\n   */\n  getRoamTransform: function () {\n    return this._roamTransform;\n  },\n  _updateCenterAndZoom: function () {\n    // Must update after view transform updated\n    var viewTransformMatrix = this._viewTransform.getLocalTransform();\n\n    var roamTransform = this._roamTransform;\n    var defaultCenter = this.getDefaultCenter();\n    var center = this.getCenter();\n    var zoom = this.getZoom();\n    center = vector.applyTransform([], center, viewTransformMatrix);\n    defaultCenter = vector.applyTransform([], defaultCenter, viewTransformMatrix);\n    roamTransform.origin = center;\n    roamTransform.position = [defaultCenter[0] - center[0], defaultCenter[1] - center[1]];\n    roamTransform.scale = [zoom, zoom];\n\n    this._updateTransform();\n  },\n\n  /**\n   * Update transform from roam and mapLocation\n   * @private\n   */\n  _updateTransform: function () {\n    var roamTransform = this._roamTransform;\n    var viewTransform = this._viewTransform;\n    viewTransform.parent = roamTransform;\n    roamTransform.updateTransform();\n    viewTransform.updateTransform();\n    viewTransform.transform && matrix.copy(this.transform || (this.transform = []), viewTransform.transform);\n\n    if (this.transform) {\n      this.invTransform = this.invTransform || [];\n      matrix.invert(this.invTransform, this.transform);\n    } else {\n      this.invTransform = null;\n    }\n\n    this.decomposeTransform();\n  },\n\n  /**\n   * @return {module:zrender/core/BoundingRect}\n   */\n  getViewRect: function () {\n    return this._viewRect;\n  },\n\n  /**\n   * Get view rect after roam transform\n   * @return {module:zrender/core/BoundingRect}\n   */\n  getViewRectAfterRoam: function () {\n    var rect = this.getBoundingRect().clone();\n    rect.applyTransform(this.transform);\n    return rect;\n  },\n\n  /**\n   * Convert a single (lon, lat) data item to (x, y) point.\n   * @param {Array.<number>} data\n   * @return {Array.<number>}\n   */\n  dataToPoint: function (data) {\n    var transform = this.transform;\n    return transform ? v2ApplyTransform([], data, transform) : [data[0], data[1]];\n  },\n\n  /**\n   * Convert a (x, y) point to (lon, lat) data\n   * @param {Array.<number>} point\n   * @return {Array.<number>}\n   */\n  pointToData: function (point) {\n    var invTransform = this.invTransform;\n    return invTransform ? v2ApplyTransform([], point, invTransform) : [point[0], point[1]];\n  },\n\n  /**\n   * @implements\n   * see {module:echarts/CoodinateSystem}\n   */\n  convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),\n\n  /**\n   * @implements\n   * see {module:echarts/CoodinateSystem}\n   */\n  convertFromPixel: zrUtil.curry(doConvert, 'pointToData'),\n\n  /**\n   * @implements\n   * see {module:echarts/CoodinateSystem}\n   */\n  containPoint: function (point) {\n    return this.getViewRectAfterRoam().contain(point[0], point[1]);\n  }\n  /**\n   * @return {number}\n   */\n  // getScalarScale: function () {\n  //     // Use determinant square root of transform to mutiply scalar\n  //     var m = this.transform;\n  //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));\n  //     return det;\n  // }\n\n};\nzrUtil.mixin(View, Transformable);\n\nfunction doConvert(methodName, ecModel, finder, value) {\n  var seriesModel = finder.seriesModel;\n  var coordSys = seriesModel ? seriesModel.coordinateSystem : null; // e.g., graph.\n\n  return coordSys === this ? coordSys[methodName](value) : null;\n}\n\nvar _default = View;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/coord/View.js"],"names":["zrUtil","require","vector","matrix","BoundingRect","Transformable","v2ApplyTransform","applyTransform","TransformDummy","call","mixin","View","name","zoomLimit","_roamTransform","_viewTransform","_center","_zoom","prototype","constructor","type","dimensions","setBoundingRect","x","y","width","height","_rect","getBoundingRect","setViewRect","transformTo","_viewRect","rect","viewTransform","transform","calculateTransform","decomposeTransform","_updateTransform","setCenter","centerCoord","_updateCenterAndZoom","setZoom","zoom","max","Math","min","getDefaultCenter","rawRect","cx","cy","getCenter","getZoom","getRoamTransform","viewTransformMatrix","getLocalTransform","roamTransform","defaultCenter","center","origin","position","scale","parent","updateTransform","copy","invTransform","invert","getViewRect","getViewRectAfterRoam","clone","dataToPoint","data","pointToData","point","convertToPixel","curry","doConvert","convertFromPixel","containPoint","contain","methodName","ecModel","finder","value","seriesModel","coordSys","coordinateSystem","_default","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar vector = require(\"zrender/lib/core/vector\");\n\nvar matrix = require(\"zrender/lib/core/matrix\");\n\nvar BoundingRect = require(\"zrender/lib/core/BoundingRect\");\n\nvar Transformable = require(\"zrender/lib/mixin/Transformable\");\n\n/**\n * Simple view coordinate system\n * Mapping given x, y to transformd view x, y\n */\nvar v2ApplyTransform = vector.applyTransform; // Dummy transform node\n\nfunction TransformDummy() {\n  Transformable.call(this);\n}\n\nzrUtil.mixin(TransformDummy, Transformable);\n\nfunction View(name) {\n  /**\n   * @type {string}\n   */\n  this.name = name;\n  /**\n   * @type {Object}\n   */\n\n  this.zoomLimit;\n  Transformable.call(this);\n  this._roamTransform = new TransformDummy();\n  this._viewTransform = new TransformDummy();\n  this._center;\n  this._zoom;\n}\n\nView.prototype = {\n  constructor: View,\n  type: 'view',\n\n  /**\n   * @param {Array.<string>}\n   * @readOnly\n   */\n  dimensions: ['x', 'y'],\n\n  /**\n   * Set bounding rect\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   */\n  // PENDING to getRect\n  setBoundingRect: function (x, y, width, height) {\n    this._rect = new BoundingRect(x, y, width, height);\n    return this._rect;\n  },\n\n  /**\n   * @return {module:zrender/core/BoundingRect}\n   */\n  // PENDING to getRect\n  getBoundingRect: function () {\n    return this._rect;\n  },\n\n  /**\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   */\n  setViewRect: function (x, y, width, height) {\n    this.transformTo(x, y, width, height);\n    this._viewRect = new BoundingRect(x, y, width, height);\n  },\n\n  /**\n   * Transformed to particular position and size\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   */\n  transformTo: function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var viewTransform = this._viewTransform;\n    viewTransform.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));\n    viewTransform.decomposeTransform();\n\n    this._updateTransform();\n  },\n\n  /**\n   * Set center of view\n   * @param {Array.<number>} [centerCoord]\n   */\n  setCenter: function (centerCoord) {\n    if (!centerCoord) {\n      return;\n    }\n\n    this._center = centerCoord;\n\n    this._updateCenterAndZoom();\n  },\n\n  /**\n   * @param {number} zoom\n   */\n  setZoom: function (zoom) {\n    zoom = zoom || 1;\n    var zoomLimit = this.zoomLimit;\n\n    if (zoomLimit) {\n      if (zoomLimit.max != null) {\n        zoom = Math.min(zoomLimit.max, zoom);\n      }\n\n      if (zoomLimit.min != null) {\n        zoom = Math.max(zoomLimit.min, zoom);\n      }\n    }\n\n    this._zoom = zoom;\n\n    this._updateCenterAndZoom();\n  },\n\n  /**\n   * Get default center without roam\n   */\n  getDefaultCenter: function () {\n    // Rect before any transform\n    var rawRect = this.getBoundingRect();\n    var cx = rawRect.x + rawRect.width / 2;\n    var cy = rawRect.y + rawRect.height / 2;\n    return [cx, cy];\n  },\n  getCenter: function () {\n    return this._center || this.getDefaultCenter();\n  },\n  getZoom: function () {\n    return this._zoom || 1;\n  },\n\n  /**\n   * @return {Array.<number}\n   */\n  getRoamTransform: function () {\n    return this._roamTransform;\n  },\n  _updateCenterAndZoom: function () {\n    // Must update after view transform updated\n    var viewTransformMatrix = this._viewTransform.getLocalTransform();\n\n    var roamTransform = this._roamTransform;\n    var defaultCenter = this.getDefaultCenter();\n    var center = this.getCenter();\n    var zoom = this.getZoom();\n    center = vector.applyTransform([], center, viewTransformMatrix);\n    defaultCenter = vector.applyTransform([], defaultCenter, viewTransformMatrix);\n    roamTransform.origin = center;\n    roamTransform.position = [defaultCenter[0] - center[0], defaultCenter[1] - center[1]];\n    roamTransform.scale = [zoom, zoom];\n\n    this._updateTransform();\n  },\n\n  /**\n   * Update transform from roam and mapLocation\n   * @private\n   */\n  _updateTransform: function () {\n    var roamTransform = this._roamTransform;\n    var viewTransform = this._viewTransform;\n    viewTransform.parent = roamTransform;\n    roamTransform.updateTransform();\n    viewTransform.updateTransform();\n    viewTransform.transform && matrix.copy(this.transform || (this.transform = []), viewTransform.transform);\n\n    if (this.transform) {\n      this.invTransform = this.invTransform || [];\n      matrix.invert(this.invTransform, this.transform);\n    } else {\n      this.invTransform = null;\n    }\n\n    this.decomposeTransform();\n  },\n\n  /**\n   * @return {module:zrender/core/BoundingRect}\n   */\n  getViewRect: function () {\n    return this._viewRect;\n  },\n\n  /**\n   * Get view rect after roam transform\n   * @return {module:zrender/core/BoundingRect}\n   */\n  getViewRectAfterRoam: function () {\n    var rect = this.getBoundingRect().clone();\n    rect.applyTransform(this.transform);\n    return rect;\n  },\n\n  /**\n   * Convert a single (lon, lat) data item to (x, y) point.\n   * @param {Array.<number>} data\n   * @return {Array.<number>}\n   */\n  dataToPoint: function (data) {\n    var transform = this.transform;\n    return transform ? v2ApplyTransform([], data, transform) : [data[0], data[1]];\n  },\n\n  /**\n   * Convert a (x, y) point to (lon, lat) data\n   * @param {Array.<number>} point\n   * @return {Array.<number>}\n   */\n  pointToData: function (point) {\n    var invTransform = this.invTransform;\n    return invTransform ? v2ApplyTransform([], point, invTransform) : [point[0], point[1]];\n  },\n\n  /**\n   * @implements\n   * see {module:echarts/CoodinateSystem}\n   */\n  convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),\n\n  /**\n   * @implements\n   * see {module:echarts/CoodinateSystem}\n   */\n  convertFromPixel: zrUtil.curry(doConvert, 'pointToData'),\n\n  /**\n   * @implements\n   * see {module:echarts/CoodinateSystem}\n   */\n  containPoint: function (point) {\n    return this.getViewRectAfterRoam().contain(point[0], point[1]);\n  }\n  /**\n   * @return {number}\n   */\n  // getScalarScale: function () {\n  //     // Use determinant square root of transform to mutiply scalar\n  //     var m = this.transform;\n  //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));\n  //     return det;\n  // }\n\n};\nzrUtil.mixin(View, Transformable);\n\nfunction doConvert(methodName, ecModel, finder, value) {\n  var seriesModel = finder.seriesModel;\n  var coordSys = seriesModel ? seriesModel.coordinateSystem : null; // e.g., graph.\n\n  return coordSys === this ? coordSys[methodName](value) : null;\n}\n\nvar _default = View;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}