{"ast":null,"code":"var echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar MapDraw = require(\"../../component/helper/MapDraw\");\n\nvar _default = echarts.extendChartView({\n  type: 'map',\n  render: function (mapModel, ecModel, api, payload) {\n    // Not render if it is an toggleSelect action from self\n    if (payload && payload.type === 'mapToggleSelect' && payload.from === this.uid) {\n      return;\n    }\n\n    var group = this.group;\n    group.removeAll();\n\n    if (mapModel.getHostGeoModel()) {\n      return;\n    } // Not update map if it is an roam action from self\n\n\n    if (!(payload && payload.type === 'geoRoam' && payload.componentType === 'series' && payload.seriesId === mapModel.id)) {\n      if (mapModel.needsDrawMap) {\n        var mapDraw = this._mapDraw || new MapDraw(api, true);\n        group.add(mapDraw.group);\n        mapDraw.draw(mapModel, ecModel, api, this, payload);\n        this._mapDraw = mapDraw;\n      } else {\n        // Remove drawed map\n        this._mapDraw && this._mapDraw.remove();\n        this._mapDraw = null;\n      }\n    } else {\n      var mapDraw = this._mapDraw;\n      mapDraw && group.add(mapDraw.group);\n    }\n\n    mapModel.get('showLegendSymbol') && ecModel.getComponent('legend') && this._renderSymbols(mapModel, ecModel, api);\n  },\n  remove: function () {\n    this._mapDraw && this._mapDraw.remove();\n    this._mapDraw = null;\n    this.group.removeAll();\n  },\n  dispose: function () {\n    this._mapDraw && this._mapDraw.remove();\n    this._mapDraw = null;\n  },\n  _renderSymbols: function (mapModel, ecModel, api) {\n    var originalData = mapModel.originalData;\n    var group = this.group;\n    originalData.each('value', function (value, idx) {\n      if (isNaN(value)) {\n        return;\n      }\n\n      var layout = originalData.getItemLayout(idx);\n\n      if (!layout || !layout.point) {\n        // Not exists in map\n        return;\n      }\n\n      var point = layout.point;\n      var offset = layout.offset;\n      var circle = new graphic.Circle({\n        style: {\n          // Because the special of map draw.\n          // Which needs statistic of multiple series and draw on one map.\n          // And each series also need a symbol with legend color\n          //\n          // Layout and visual are put one the different data\n          fill: mapModel.getData().getVisual('color')\n        },\n        shape: {\n          cx: point[0] + offset * 9,\n          cy: point[1],\n          r: 3\n        },\n        silent: true,\n        // Do not overlap the first series, on which labels are displayed.\n        z2: !offset ? 10 : 8\n      }); // First data on the same region\n\n      if (!offset) {\n        var fullData = mapModel.mainSeries.getData();\n        var name = originalData.getName(idx);\n        var fullIndex = fullData.indexOfName(name);\n        var itemModel = originalData.getItemModel(idx);\n        var labelModel = itemModel.getModel('label.normal');\n        var hoverLabelModel = itemModel.getModel('label.emphasis');\n        var polygonGroups = fullData.getItemGraphicEl(fullIndex);\n        var normalText = zrUtil.retrieve2(mapModel.getFormattedLabel(idx, 'normal'), name);\n        var emphasisText = zrUtil.retrieve2(mapModel.getFormattedLabel(idx, 'emphasis'), normalText);\n\n        var onEmphasis = function () {\n          var hoverStyle = graphic.setTextStyle({}, hoverLabelModel, {\n            text: hoverLabelModel.get('show') ? emphasisText : null\n          }, {\n            isRectText: true,\n            useInsideStyle: false\n          }, true);\n          circle.style.extendFrom(hoverStyle); // Make label upper than others if overlaps.\n\n          circle.__mapOriginalZ2 = circle.z2;\n          circle.z2 += 1;\n        };\n\n        var onNormal = function () {\n          graphic.setTextStyle(circle.style, labelModel, {\n            text: labelModel.get('show') ? normalText : null,\n            textPosition: labelModel.getShallow('position') || 'bottom'\n          }, {\n            isRectText: true,\n            useInsideStyle: false\n          });\n\n          if (circle.__mapOriginalZ2 != null) {\n            circle.z2 = circle.__mapOriginalZ2;\n            circle.__mapOriginalZ2 = null;\n          }\n        };\n\n        polygonGroups.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);\n        onNormal();\n      }\n\n      group.add(circle);\n    });\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/map/MapView.js"],"names":["echarts","require","zrUtil","graphic","MapDraw","_default","extendChartView","type","render","mapModel","ecModel","api","payload","from","uid","group","removeAll","getHostGeoModel","componentType","seriesId","id","needsDrawMap","mapDraw","_mapDraw","add","draw","remove","get","getComponent","_renderSymbols","dispose","originalData","each","value","idx","isNaN","layout","getItemLayout","point","offset","circle","Circle","style","fill","getData","getVisual","shape","cx","cy","r","silent","z2","fullData","mainSeries","name","getName","fullIndex","indexOfName","itemModel","getItemModel","labelModel","getModel","hoverLabelModel","polygonGroups","getItemGraphicEl","normalText","retrieve2","getFormattedLabel","emphasisText","onEmphasis","hoverStyle","setTextStyle","text","isRectText","useInsideStyle","extendFrom","__mapOriginalZ2","onNormal","textPosition","getShallow","on","module","exports"],"mappings":"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","sourcesContent":["var echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar MapDraw = require(\"../../component/helper/MapDraw\");\n\nvar _default = echarts.extendChartView({\n  type: 'map',\n  render: function (mapModel, ecModel, api, payload) {\n    // Not render if it is an toggleSelect action from self\n    if (payload && payload.type === 'mapToggleSelect' && payload.from === this.uid) {\n      return;\n    }\n\n    var group = this.group;\n    group.removeAll();\n\n    if (mapModel.getHostGeoModel()) {\n      return;\n    } // Not update map if it is an roam action from self\n\n\n    if (!(payload && payload.type === 'geoRoam' && payload.componentType === 'series' && payload.seriesId === mapModel.id)) {\n      if (mapModel.needsDrawMap) {\n        var mapDraw = this._mapDraw || new MapDraw(api, true);\n        group.add(mapDraw.group);\n        mapDraw.draw(mapModel, ecModel, api, this, payload);\n        this._mapDraw = mapDraw;\n      } else {\n        // Remove drawed map\n        this._mapDraw && this._mapDraw.remove();\n        this._mapDraw = null;\n      }\n    } else {\n      var mapDraw = this._mapDraw;\n      mapDraw && group.add(mapDraw.group);\n    }\n\n    mapModel.get('showLegendSymbol') && ecModel.getComponent('legend') && this._renderSymbols(mapModel, ecModel, api);\n  },\n  remove: function () {\n    this._mapDraw && this._mapDraw.remove();\n    this._mapDraw = null;\n    this.group.removeAll();\n  },\n  dispose: function () {\n    this._mapDraw && this._mapDraw.remove();\n    this._mapDraw = null;\n  },\n  _renderSymbols: function (mapModel, ecModel, api) {\n    var originalData = mapModel.originalData;\n    var group = this.group;\n    originalData.each('value', function (value, idx) {\n      if (isNaN(value)) {\n        return;\n      }\n\n      var layout = originalData.getItemLayout(idx);\n\n      if (!layout || !layout.point) {\n        // Not exists in map\n        return;\n      }\n\n      var point = layout.point;\n      var offset = layout.offset;\n      var circle = new graphic.Circle({\n        style: {\n          // Because the special of map draw.\n          // Which needs statistic of multiple series and draw on one map.\n          // And each series also need a symbol with legend color\n          //\n          // Layout and visual are put one the different data\n          fill: mapModel.getData().getVisual('color')\n        },\n        shape: {\n          cx: point[0] + offset * 9,\n          cy: point[1],\n          r: 3\n        },\n        silent: true,\n        // Do not overlap the first series, on which labels are displayed.\n        z2: !offset ? 10 : 8\n      }); // First data on the same region\n\n      if (!offset) {\n        var fullData = mapModel.mainSeries.getData();\n        var name = originalData.getName(idx);\n        var fullIndex = fullData.indexOfName(name);\n        var itemModel = originalData.getItemModel(idx);\n        var labelModel = itemModel.getModel('label.normal');\n        var hoverLabelModel = itemModel.getModel('label.emphasis');\n        var polygonGroups = fullData.getItemGraphicEl(fullIndex);\n        var normalText = zrUtil.retrieve2(mapModel.getFormattedLabel(idx, 'normal'), name);\n        var emphasisText = zrUtil.retrieve2(mapModel.getFormattedLabel(idx, 'emphasis'), normalText);\n\n        var onEmphasis = function () {\n          var hoverStyle = graphic.setTextStyle({}, hoverLabelModel, {\n            text: hoverLabelModel.get('show') ? emphasisText : null\n          }, {\n            isRectText: true,\n            useInsideStyle: false\n          }, true);\n          circle.style.extendFrom(hoverStyle); // Make label upper than others if overlaps.\n\n          circle.__mapOriginalZ2 = circle.z2;\n          circle.z2 += 1;\n        };\n\n        var onNormal = function () {\n          graphic.setTextStyle(circle.style, labelModel, {\n            text: labelModel.get('show') ? normalText : null,\n            textPosition: labelModel.getShallow('position') || 'bottom'\n          }, {\n            isRectText: true,\n            useInsideStyle: false\n          });\n\n          if (circle.__mapOriginalZ2 != null) {\n            circle.z2 = circle.__mapOriginalZ2;\n            circle.__mapOriginalZ2 = null;\n          }\n        };\n\n        polygonGroups.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);\n        onNormal();\n      }\n\n      group.add(circle);\n    });\n  }\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}