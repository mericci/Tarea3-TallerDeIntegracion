{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar Model = require(\"./Model\");\n\nvar componentUtil = require(\"../util/component\");\n\nvar clazzUtil = require(\"../util/clazz\");\n\nvar layout = require(\"../util/layout\");\n\nvar boxLayoutMixin = require(\"./mixin/boxLayout\");\n/**\n * Component model\n *\n * @module echarts/model/Component\n */\n\n\nvar arrayPush = Array.prototype.push;\n/**\n * @alias module:echarts/model/Component\n * @constructor\n * @param {Object} option\n * @param {module:echarts/model/Model} parentModel\n * @param {module:echarts/model/Model} ecModel\n */\n\nvar ComponentModel = Model.extend({\n  type: 'component',\n\n  /**\n   * @readOnly\n   * @type {string}\n   */\n  id: '',\n\n  /**\n   * @readOnly\n   */\n  name: '',\n\n  /**\n   * @readOnly\n   * @type {string}\n   */\n  mainType: '',\n\n  /**\n   * @readOnly\n   * @type {string}\n   */\n  subType: '',\n\n  /**\n   * @readOnly\n   * @type {number}\n   */\n  componentIndex: 0,\n\n  /**\n   * @type {Object}\n   * @protected\n   */\n  defaultOption: null,\n\n  /**\n   * @type {module:echarts/model/Global}\n   * @readOnly\n   */\n  ecModel: null,\n\n  /**\n   * key: componentType\n   * value:  Component model list, can not be null.\n   * @type {Object.<string, Array.<module:echarts/model/Model>>}\n   * @readOnly\n   */\n  dependentModels: [],\n\n  /**\n   * @type {string}\n   * @readOnly\n   */\n  uid: null,\n\n  /**\n   * Support merge layout params.\n   * Only support 'box' now (left/right/top/bottom/width/height).\n   * @type {string|Object} Object can be {ignoreSize: true}\n   * @readOnly\n   */\n  layoutMode: null,\n  $constructor: function (option, parentModel, ecModel, extraOpt) {\n    Model.call(this, option, parentModel, ecModel, extraOpt);\n    this.uid = componentUtil.getUID('componentModel');\n  },\n  init: function (option, parentModel, ecModel, extraOpt) {\n    this.mergeDefaultAndTheme(option, ecModel);\n  },\n  mergeDefaultAndTheme: function (option, ecModel) {\n    var layoutMode = this.layoutMode;\n    var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};\n    var themeModel = ecModel.getTheme();\n    zrUtil.merge(option, themeModel.get(this.mainType));\n    zrUtil.merge(option, this.getDefaultOption());\n\n    if (layoutMode) {\n      layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  },\n  mergeOption: function (option, extraOpt) {\n    zrUtil.merge(this.option, option, true);\n    var layoutMode = this.layoutMode;\n\n    if (layoutMode) {\n      layout.mergeLayoutParam(this.option, option, layoutMode);\n    }\n  },\n  // Hooker after init or mergeOption\n  optionUpdated: function (newCptOption, isInit) {},\n  getDefaultOption: function () {\n    if (!clazzUtil.hasOwn(this, '__defaultOption')) {\n      var optList = [];\n      var Class = this.constructor;\n\n      while (Class) {\n        var opt = Class.prototype.defaultOption;\n        opt && optList.push(opt);\n        Class = Class.superClass;\n      }\n\n      var defaultOption = {};\n\n      for (var i = optList.length - 1; i >= 0; i--) {\n        defaultOption = zrUtil.merge(defaultOption, optList[i], true);\n      }\n\n      clazzUtil.set(this, '__defaultOption', defaultOption);\n    }\n\n    return clazzUtil.get(this, '__defaultOption');\n  },\n  getReferringComponents: function (mainType) {\n    return this.ecModel.queryComponents({\n      mainType: mainType,\n      index: this.get(mainType + 'Index', true),\n      id: this.get(mainType + 'Id', true)\n    });\n  }\n}); // Reset ComponentModel.extend, add preConstruct.\n// clazzUtil.enableClassExtend(\n//     ComponentModel,\n//     function (option, parentModel, ecModel, extraOpt) {\n//         // Set dependentModels, componentIndex, name, id, mainType, subType.\n//         zrUtil.extend(this, extraOpt);\n//         this.uid = componentUtil.getUID('componentModel');\n//         // this.setReadOnly([\n//         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',\n//         //     'dependentModels', 'componentIndex'\n//         // ]);\n//     }\n// );\n// Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n\nclazzUtil.enableClassManagement(ComponentModel, {\n  registerWhenExtend: true\n});\ncomponentUtil.enableSubTypeDefaulter(ComponentModel); // Add capability of ComponentModel.topologicalTravel.\n\ncomponentUtil.enableTopologicalTravel(ComponentModel, getDependencies);\n\nfunction getDependencies(componentType) {\n  var deps = [];\n  zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {\n    arrayPush.apply(deps, Clazz.prototype.dependencies || []);\n  }); // Ensure main type\n\n  return zrUtil.map(deps, function (type) {\n    return clazzUtil.parseClassType(type).main;\n  });\n}\n\nzrUtil.mixin(ComponentModel, boxLayoutMixin);\nvar _default = ComponentModel;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/model/Component.js"],"names":["zrUtil","require","Model","componentUtil","clazzUtil","layout","boxLayoutMixin","arrayPush","Array","prototype","push","ComponentModel","extend","type","id","name","mainType","subType","componentIndex","defaultOption","ecModel","dependentModels","uid","layoutMode","$constructor","option","parentModel","extraOpt","call","getUID","init","mergeDefaultAndTheme","inputPositionParams","getLayoutParams","themeModel","getTheme","merge","get","getDefaultOption","mergeLayoutParam","mergeOption","optionUpdated","newCptOption","isInit","hasOwn","optList","Class","constructor","opt","superClass","i","length","set","getReferringComponents","queryComponents","index","enableClassManagement","registerWhenExtend","enableSubTypeDefaulter","enableTopologicalTravel","getDependencies","componentType","deps","each","getClassesByMainType","Clazz","apply","dependencies","map","parseClassType","main","mixin","_default","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar Model = require(\"./Model\");\n\nvar componentUtil = require(\"../util/component\");\n\nvar clazzUtil = require(\"../util/clazz\");\n\nvar layout = require(\"../util/layout\");\n\nvar boxLayoutMixin = require(\"./mixin/boxLayout\");\n\n/**\n * Component model\n *\n * @module echarts/model/Component\n */\nvar arrayPush = Array.prototype.push;\n/**\n * @alias module:echarts/model/Component\n * @constructor\n * @param {Object} option\n * @param {module:echarts/model/Model} parentModel\n * @param {module:echarts/model/Model} ecModel\n */\n\nvar ComponentModel = Model.extend({\n  type: 'component',\n\n  /**\n   * @readOnly\n   * @type {string}\n   */\n  id: '',\n\n  /**\n   * @readOnly\n   */\n  name: '',\n\n  /**\n   * @readOnly\n   * @type {string}\n   */\n  mainType: '',\n\n  /**\n   * @readOnly\n   * @type {string}\n   */\n  subType: '',\n\n  /**\n   * @readOnly\n   * @type {number}\n   */\n  componentIndex: 0,\n\n  /**\n   * @type {Object}\n   * @protected\n   */\n  defaultOption: null,\n\n  /**\n   * @type {module:echarts/model/Global}\n   * @readOnly\n   */\n  ecModel: null,\n\n  /**\n   * key: componentType\n   * value:  Component model list, can not be null.\n   * @type {Object.<string, Array.<module:echarts/model/Model>>}\n   * @readOnly\n   */\n  dependentModels: [],\n\n  /**\n   * @type {string}\n   * @readOnly\n   */\n  uid: null,\n\n  /**\n   * Support merge layout params.\n   * Only support 'box' now (left/right/top/bottom/width/height).\n   * @type {string|Object} Object can be {ignoreSize: true}\n   * @readOnly\n   */\n  layoutMode: null,\n  $constructor: function (option, parentModel, ecModel, extraOpt) {\n    Model.call(this, option, parentModel, ecModel, extraOpt);\n    this.uid = componentUtil.getUID('componentModel');\n  },\n  init: function (option, parentModel, ecModel, extraOpt) {\n    this.mergeDefaultAndTheme(option, ecModel);\n  },\n  mergeDefaultAndTheme: function (option, ecModel) {\n    var layoutMode = this.layoutMode;\n    var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};\n    var themeModel = ecModel.getTheme();\n    zrUtil.merge(option, themeModel.get(this.mainType));\n    zrUtil.merge(option, this.getDefaultOption());\n\n    if (layoutMode) {\n      layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  },\n  mergeOption: function (option, extraOpt) {\n    zrUtil.merge(this.option, option, true);\n    var layoutMode = this.layoutMode;\n\n    if (layoutMode) {\n      layout.mergeLayoutParam(this.option, option, layoutMode);\n    }\n  },\n  // Hooker after init or mergeOption\n  optionUpdated: function (newCptOption, isInit) {},\n  getDefaultOption: function () {\n    if (!clazzUtil.hasOwn(this, '__defaultOption')) {\n      var optList = [];\n      var Class = this.constructor;\n\n      while (Class) {\n        var opt = Class.prototype.defaultOption;\n        opt && optList.push(opt);\n        Class = Class.superClass;\n      }\n\n      var defaultOption = {};\n\n      for (var i = optList.length - 1; i >= 0; i--) {\n        defaultOption = zrUtil.merge(defaultOption, optList[i], true);\n      }\n\n      clazzUtil.set(this, '__defaultOption', defaultOption);\n    }\n\n    return clazzUtil.get(this, '__defaultOption');\n  },\n  getReferringComponents: function (mainType) {\n    return this.ecModel.queryComponents({\n      mainType: mainType,\n      index: this.get(mainType + 'Index', true),\n      id: this.get(mainType + 'Id', true)\n    });\n  }\n}); // Reset ComponentModel.extend, add preConstruct.\n// clazzUtil.enableClassExtend(\n//     ComponentModel,\n//     function (option, parentModel, ecModel, extraOpt) {\n//         // Set dependentModels, componentIndex, name, id, mainType, subType.\n//         zrUtil.extend(this, extraOpt);\n//         this.uid = componentUtil.getUID('componentModel');\n//         // this.setReadOnly([\n//         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',\n//         //     'dependentModels', 'componentIndex'\n//         // ]);\n//     }\n// );\n// Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n\nclazzUtil.enableClassManagement(ComponentModel, {\n  registerWhenExtend: true\n});\ncomponentUtil.enableSubTypeDefaulter(ComponentModel); // Add capability of ComponentModel.topologicalTravel.\n\ncomponentUtil.enableTopologicalTravel(ComponentModel, getDependencies);\n\nfunction getDependencies(componentType) {\n  var deps = [];\n  zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {\n    arrayPush.apply(deps, Clazz.prototype.dependencies || []);\n  }); // Ensure main type\n\n  return zrUtil.map(deps, function (type) {\n    return clazzUtil.parseClassType(type).main;\n  });\n}\n\nzrUtil.mixin(ComponentModel, boxLayoutMixin);\nvar _default = ComponentModel;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}