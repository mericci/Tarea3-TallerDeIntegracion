{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n/**\n * nest helper used to group by the array.\n * can specified the keys and sort the keys.\n */\n\n\nfunction nest() {\n  var keysFunction = [];\n  var sortKeysFunction = [];\n  /**\n   * map an Array into the mapObject.\n   * @param {Array} array\n   * @param {number} depth\n   */\n\n  function map(array, depth) {\n    if (depth >= keysFunction.length) {\n      return array;\n    }\n\n    var i = -1;\n    var n = array.length;\n    var keyFunction = keysFunction[depth++];\n    var mapObject = {};\n    var valuesByKey = {};\n\n    while (++i < n) {\n      var keyValue = keyFunction(array[i]);\n      var values = valuesByKey[keyValue];\n\n      if (values) {\n        values.push(array[i]);\n      } else {\n        valuesByKey[keyValue] = [array[i]];\n      }\n    }\n\n    zrUtil.each(valuesByKey, function (value, key) {\n      mapObject[key] = map(value, depth);\n    });\n    return mapObject;\n  }\n  /**\n   * transform the Map Object to multidimensional Array\n   * @param {Object} map\n   * @param {number} depth\n   */\n\n\n  function entriesMap(mapObject, depth) {\n    if (depth >= keysFunction.length) {\n      return mapObject;\n    }\n\n    var array = [];\n    var sortKeyFunction = sortKeysFunction[depth++];\n    zrUtil.each(mapObject, function (value, key) {\n      array.push({\n        key: key,\n        values: entriesMap(value, depth)\n      });\n    });\n\n    if (sortKeyFunction) {\n      return array.sort(function (a, b) {\n        return sortKeyFunction(a.key, b.key);\n      });\n    } else {\n      return array;\n    }\n  }\n\n  return {\n    /**\n     * specified the key to groupby the arrays.\n     * users can specified one more keys.\n     * @param {Function} d\n     */\n    key: function (d) {\n      keysFunction.push(d);\n      return this;\n    },\n\n    /**\n     * specified the comparator to sort the keys\n     * @param {Function} order\n     */\n    sortKeys: function (order) {\n      sortKeysFunction[keysFunction.length - 1] = order;\n      return this;\n    },\n\n    /**\n     * the array to be grouped by.\n     * @param {Array} array\n     */\n    entries: function (array) {\n      return entriesMap(map(array, 0), 0);\n    }\n  };\n}\n\nmodule.exports = nest;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/util/array/nest.js"],"names":["zrUtil","require","nest","keysFunction","sortKeysFunction","map","array","depth","length","i","n","keyFunction","mapObject","valuesByKey","keyValue","values","push","each","value","key","entriesMap","sortKeyFunction","sort","a","b","d","sortKeys","order","entries","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\n/**\n * nest helper used to group by the array.\n * can specified the keys and sort the keys.\n */\nfunction nest() {\n  var keysFunction = [];\n  var sortKeysFunction = [];\n  /**\n   * map an Array into the mapObject.\n   * @param {Array} array\n   * @param {number} depth\n   */\n\n  function map(array, depth) {\n    if (depth >= keysFunction.length) {\n      return array;\n    }\n\n    var i = -1;\n    var n = array.length;\n    var keyFunction = keysFunction[depth++];\n    var mapObject = {};\n    var valuesByKey = {};\n\n    while (++i < n) {\n      var keyValue = keyFunction(array[i]);\n      var values = valuesByKey[keyValue];\n\n      if (values) {\n        values.push(array[i]);\n      } else {\n        valuesByKey[keyValue] = [array[i]];\n      }\n    }\n\n    zrUtil.each(valuesByKey, function (value, key) {\n      mapObject[key] = map(value, depth);\n    });\n    return mapObject;\n  }\n  /**\n   * transform the Map Object to multidimensional Array\n   * @param {Object} map\n   * @param {number} depth\n   */\n\n\n  function entriesMap(mapObject, depth) {\n    if (depth >= keysFunction.length) {\n      return mapObject;\n    }\n\n    var array = [];\n    var sortKeyFunction = sortKeysFunction[depth++];\n    zrUtil.each(mapObject, function (value, key) {\n      array.push({\n        key: key,\n        values: entriesMap(value, depth)\n      });\n    });\n\n    if (sortKeyFunction) {\n      return array.sort(function (a, b) {\n        return sortKeyFunction(a.key, b.key);\n      });\n    } else {\n      return array;\n    }\n  }\n\n  return {\n    /**\n     * specified the key to groupby the arrays.\n     * users can specified one more keys.\n     * @param {Function} d\n     */\n    key: function (d) {\n      keysFunction.push(d);\n      return this;\n    },\n\n    /**\n     * specified the comparator to sort the keys\n     * @param {Function} order\n     */\n    sortKeys: function (order) {\n      sortKeysFunction[keysFunction.length - 1] = order;\n      return this;\n    },\n\n    /**\n     * the array to be grouped by.\n     * @param {Array} array\n     */\n    entries: function (array) {\n      return entriesMap(map(array, 0), 0);\n    }\n  };\n}\n\nmodule.exports = nest;"]},"metadata":{},"sourceType":"script"}