{"ast":null,"code":"var _traversalHelper = require(\"./traversalHelper\");\n\nvar eachAfter = _traversalHelper.eachAfter;\nvar eachBefore = _traversalHelper.eachBefore;\n\nvar _layoutHelper = require(\"./layoutHelper\");\n\nvar init = _layoutHelper.init;\nvar firstWalk = _layoutHelper.firstWalk;\nvar secondWalk = _layoutHelper.secondWalk;\nvar sep = _layoutHelper.separation;\nvar radialCoordinate = _layoutHelper.radialCoordinate;\nvar getViewRect = _layoutHelper.getViewRect;\n\nfunction _default(seriesModel, api) {\n  var layoutInfo = getViewRect(seriesModel, api);\n  seriesModel.layoutInfo = layoutInfo;\n  var layout = seriesModel.get('layout');\n  var width = 0;\n  var height = 0;\n  var separation = null;\n\n  if (layout === 'radial') {\n    width = 2 * Math.PI;\n    height = Math.min(layoutInfo.height, layoutInfo.width) / 2;\n    separation = sep(function (node1, node2) {\n      return (node1.parentNode === node2.parentNode ? 1 : 2) / node1.depth;\n    });\n  } else {\n    width = layoutInfo.width;\n    height = layoutInfo.height;\n    separation = sep();\n  }\n\n  var virtualRoot = seriesModel.getData().tree.root;\n  var realRoot = virtualRoot.children[0];\n  init(virtualRoot);\n  eachAfter(realRoot, firstWalk, separation);\n  virtualRoot.hierNode.modifier = -realRoot.hierNode.prelim;\n  eachBefore(realRoot, secondWalk);\n  var left = realRoot;\n  var right = realRoot;\n  var bottom = realRoot;\n  eachBefore(realRoot, function (node) {\n    var x = node.getLayout().x;\n\n    if (x < left.getLayout().x) {\n      left = node;\n    }\n\n    if (x > right.getLayout().x) {\n      right = node;\n    }\n\n    if (node.depth > bottom.depth) {\n      bottom = node;\n    }\n  });\n  var delta = left === right ? 1 : separation(left, right) / 2;\n  var tx = delta - left.getLayout().x;\n  var kx = 0;\n  var ky = 0;\n  var coorX = 0;\n  var coorY = 0;\n\n  if (layout === 'radial') {\n    kx = width / (right.getLayout().x + delta + tx); // here we use (node.depth - 1), bucause the real root's depth is 1\n\n    ky = height / (bottom.depth - 1 || 1);\n    eachBefore(realRoot, function (node) {\n      coorX = (node.getLayout().x + tx) * kx;\n      coorY = (node.depth - 1) * ky;\n      var finalCoor = radialCoordinate(coorX, coorY);\n      node.setLayout({\n        x: finalCoor.x,\n        y: finalCoor.y,\n        rawX: coorX,\n        rawY: coorY\n      }, true);\n    });\n  } else {\n    if (seriesModel.get('orient') === 'horizontal') {\n      ky = height / (right.getLayout().x + delta + tx);\n      kx = width / (bottom.depth - 1 || 1);\n      eachBefore(realRoot, function (node) {\n        coorY = (node.getLayout().x + tx) * ky;\n        coorX = (node.depth - 1) * kx;\n        node.setLayout({\n          x: coorX,\n          y: coorY\n        }, true);\n      });\n    } else {\n      kx = width / (right.getLayout().x + delta + tx);\n      ky = height / (bottom.depth - 1 || 1);\n      eachBefore(realRoot, function (node) {\n        coorX = (node.getLayout().x + tx) * kx;\n        coorY = (node.depth - 1) * ky;\n        node.setLayout({\n          x: coorX,\n          y: coorY\n        }, true);\n      });\n    }\n  }\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/tree/commonLayout.js"],"names":["_traversalHelper","require","eachAfter","eachBefore","_layoutHelper","init","firstWalk","secondWalk","sep","separation","radialCoordinate","getViewRect","_default","seriesModel","api","layoutInfo","layout","get","width","height","Math","PI","min","node1","node2","parentNode","depth","virtualRoot","getData","tree","root","realRoot","children","hierNode","modifier","prelim","left","right","bottom","node","x","getLayout","delta","tx","kx","ky","coorX","coorY","finalCoor","setLayout","y","rawX","rawY","module","exports"],"mappings":"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","sourcesContent":["var _traversalHelper = require(\"./traversalHelper\");\n\nvar eachAfter = _traversalHelper.eachAfter;\nvar eachBefore = _traversalHelper.eachBefore;\n\nvar _layoutHelper = require(\"./layoutHelper\");\n\nvar init = _layoutHelper.init;\nvar firstWalk = _layoutHelper.firstWalk;\nvar secondWalk = _layoutHelper.secondWalk;\nvar sep = _layoutHelper.separation;\nvar radialCoordinate = _layoutHelper.radialCoordinate;\nvar getViewRect = _layoutHelper.getViewRect;\n\nfunction _default(seriesModel, api) {\n  var layoutInfo = getViewRect(seriesModel, api);\n  seriesModel.layoutInfo = layoutInfo;\n  var layout = seriesModel.get('layout');\n  var width = 0;\n  var height = 0;\n  var separation = null;\n\n  if (layout === 'radial') {\n    width = 2 * Math.PI;\n    height = Math.min(layoutInfo.height, layoutInfo.width) / 2;\n    separation = sep(function (node1, node2) {\n      return (node1.parentNode === node2.parentNode ? 1 : 2) / node1.depth;\n    });\n  } else {\n    width = layoutInfo.width;\n    height = layoutInfo.height;\n    separation = sep();\n  }\n\n  var virtualRoot = seriesModel.getData().tree.root;\n  var realRoot = virtualRoot.children[0];\n  init(virtualRoot);\n  eachAfter(realRoot, firstWalk, separation);\n  virtualRoot.hierNode.modifier = -realRoot.hierNode.prelim;\n  eachBefore(realRoot, secondWalk);\n  var left = realRoot;\n  var right = realRoot;\n  var bottom = realRoot;\n  eachBefore(realRoot, function (node) {\n    var x = node.getLayout().x;\n\n    if (x < left.getLayout().x) {\n      left = node;\n    }\n\n    if (x > right.getLayout().x) {\n      right = node;\n    }\n\n    if (node.depth > bottom.depth) {\n      bottom = node;\n    }\n  });\n  var delta = left === right ? 1 : separation(left, right) / 2;\n  var tx = delta - left.getLayout().x;\n  var kx = 0;\n  var ky = 0;\n  var coorX = 0;\n  var coorY = 0;\n\n  if (layout === 'radial') {\n    kx = width / (right.getLayout().x + delta + tx); // here we use (node.depth - 1), bucause the real root's depth is 1\n\n    ky = height / (bottom.depth - 1 || 1);\n    eachBefore(realRoot, function (node) {\n      coorX = (node.getLayout().x + tx) * kx;\n      coorY = (node.depth - 1) * ky;\n      var finalCoor = radialCoordinate(coorX, coorY);\n      node.setLayout({\n        x: finalCoor.x,\n        y: finalCoor.y,\n        rawX: coorX,\n        rawY: coorY\n      }, true);\n    });\n  } else {\n    if (seriesModel.get('orient') === 'horizontal') {\n      ky = height / (right.getLayout().x + delta + tx);\n      kx = width / (bottom.depth - 1 || 1);\n      eachBefore(realRoot, function (node) {\n        coorY = (node.getLayout().x + tx) * ky;\n        coorX = (node.depth - 1) * kx;\n        node.setLayout({\n          x: coorX,\n          y: coorY\n        }, true);\n      });\n    } else {\n      kx = width / (right.getLayout().x + delta + tx);\n      ky = height / (bottom.depth - 1 || 1);\n      eachBefore(realRoot, function (node) {\n        coorX = (node.getLayout().x + tx) * kx;\n        coorY = (node.depth - 1) * ky;\n        node.setLayout({\n          x: coorX,\n          y: coorY\n        }, true);\n      });\n    }\n  }\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}