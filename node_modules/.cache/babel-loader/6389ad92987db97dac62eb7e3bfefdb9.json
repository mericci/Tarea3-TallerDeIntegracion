{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar RoamController = require(\"./RoamController\");\n\nvar roamHelper = require(\"../../component/helper/roamHelper\");\n\nvar _cursorHelper = require(\"../../component/helper/cursorHelper\");\n\nvar onIrrelevantElement = _cursorHelper.onIrrelevantElement;\n\nvar graphic = require(\"../../util/graphic\");\n\nfunction getFixedItemStyle(model, scale) {\n  var itemStyle = model.getItemStyle();\n  var areaColor = model.get('areaColor'); // If user want the color not to be changed when hover,\n  // they should both set areaColor and color to be null.\n\n  if (areaColor != null) {\n    itemStyle.fill = areaColor;\n  }\n\n  return itemStyle;\n}\n\nfunction updateMapSelectHandler(mapDraw, mapOrGeoModel, group, api, fromView) {\n  group.off('click');\n  group.off('mousedown');\n\n  if (mapOrGeoModel.get('selectedMode')) {\n    group.on('mousedown', function () {\n      mapDraw._mouseDownFlag = true;\n    });\n    group.on('click', function (e) {\n      if (!mapDraw._mouseDownFlag) {\n        return;\n      }\n\n      mapDraw._mouseDownFlag = false;\n      var el = e.target;\n\n      while (!el.__regions) {\n        el = el.parent;\n      }\n\n      if (!el) {\n        return;\n      }\n\n      var action = {\n        type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',\n        batch: zrUtil.map(el.__regions, function (region) {\n          return {\n            name: region.name,\n            from: fromView.uid\n          };\n        })\n      };\n      action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;\n      api.dispatchAction(action);\n      updateMapSelected(mapOrGeoModel, group);\n    });\n  }\n}\n\nfunction updateMapSelected(mapOrGeoModel, group) {\n  // FIXME\n  group.eachChild(function (otherRegionEl) {\n    zrUtil.each(otherRegionEl.__regions, function (region) {\n      otherRegionEl.trigger(mapOrGeoModel.isSelected(region.name) ? 'emphasis' : 'normal');\n    });\n  });\n}\n/**\n * @alias module:echarts/component/helper/MapDraw\n * @param {module:echarts/ExtensionAPI} api\n * @param {boolean} updateGroup\n */\n\n\nfunction MapDraw(api, updateGroup) {\n  var group = new graphic.Group();\n  /**\n   * @type {module:echarts/component/helper/RoamController}\n   * @private\n   */\n\n  this._controller = new RoamController(api.getZr());\n  /**\n   * @type {Object} {target, zoom, zoomLimit}\n   * @private\n   */\n\n  this._controllerHost = {\n    target: updateGroup ? group : null\n  };\n  /**\n   * @type {module:zrender/container/Group}\n   * @readOnly\n   */\n\n  this.group = group;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this._updateGroup = updateGroup;\n  /**\n   * This flag is used to make sure that only one among\n   * `pan`, `zoom`, `click` can occurs, otherwise 'selected'\n   * action may be triggered when `pan`, which is unexpected.\n   * @type {booelan}\n   */\n\n  this._mouseDownFlag;\n}\n\nMapDraw.prototype = {\n  constructor: MapDraw,\n  draw: function (mapOrGeoModel, ecModel, api, fromView, payload) {\n    var isGeo = mapOrGeoModel.mainType === 'geo'; // Map series has data. GEO model that controlled by map series\n    // will be assigned with map data. Other GEO model has no data.\n\n    var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\n    isGeo && ecModel.eachComponent({\n      mainType: 'series',\n      subType: 'map'\n    }, function (mapSeries) {\n      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {\n        data = mapSeries.getData();\n      }\n    });\n    var geo = mapOrGeoModel.coordinateSystem;\n    var group = this.group;\n    var scale = geo.scale;\n    var groupNewProp = {\n      position: geo.position,\n      scale: scale\n    }; // No animation when first draw or in action\n\n    if (!group.childAt(0) || payload) {\n      group.attr(groupNewProp);\n    } else {\n      graphic.updateProps(group, groupNewProp, mapOrGeoModel);\n    }\n\n    group.removeAll();\n    var itemStyleAccessPath = ['itemStyle', 'normal'];\n    var hoverItemStyleAccessPath = ['itemStyle', 'emphasis'];\n    var labelAccessPath = ['label', 'normal'];\n    var hoverLabelAccessPath = ['label', 'emphasis'];\n    var nameMap = zrUtil.createHashMap();\n    zrUtil.each(geo.regions, function (region) {\n      // Consider in GeoJson properties.name may be duplicated, for example,\n      // there is multiple region named \"United Kindom\" or \"France\" (so many\n      // colonies). And it is not appropriate to merge them in geo, which\n      // will make them share the same label and bring trouble in label\n      // location calculation.\n      var regionGroup = nameMap.get(region.name) || nameMap.set(region.name, new graphic.Group());\n      var compoundPath = new graphic.CompoundPath({\n        shape: {\n          paths: []\n        }\n      });\n      regionGroup.add(compoundPath);\n      var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;\n      var itemStyleModel = regionModel.getModel(itemStyleAccessPath);\n      var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);\n      var itemStyle = getFixedItemStyle(itemStyleModel, scale);\n      var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);\n      var labelModel = regionModel.getModel(labelAccessPath);\n      var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);\n      var dataIdx; // Use the itemStyle in data if has data\n\n      if (data) {\n        dataIdx = data.indexOfName(region.name); // Only visual color of each item will be used. It can be encoded by dataRange\n        // But visual color of series is used in symbol drawing\n        //\n        // Visual color for each series is for the symbol draw\n\n        var visualColor = data.getItemVisual(dataIdx, 'color', true);\n\n        if (visualColor) {\n          itemStyle.fill = visualColor;\n        }\n      }\n\n      zrUtil.each(region.geometries, function (geometry) {\n        if (geometry.type !== 'polygon') {\n          return;\n        }\n\n        compoundPath.shape.paths.push(new graphic.Polygon({\n          shape: {\n            points: geometry.exterior\n          }\n        }));\n\n        for (var i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); i++) {\n          compoundPath.shape.paths.push(new graphic.Polygon({\n            shape: {\n              points: geometry.interiors[i]\n            }\n          }));\n        }\n      });\n      compoundPath.setStyle(itemStyle);\n      compoundPath.style.strokeNoScale = true;\n      compoundPath.culling = true; // Label\n\n      var showLabel = labelModel.get('show');\n      var hoverShowLabel = hoverLabelModel.get('show');\n      var isDataNaN = data && isNaN(data.get('value', dataIdx));\n      var itemLayout = data && data.getItemLayout(dataIdx); // In the following cases label will be drawn\n      // 1. In map series and data value is NaN\n      // 2. In geo component\n      // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout\n\n      if (isGeo || isDataNaN && (showLabel || hoverShowLabel) || itemLayout && itemLayout.showLabel) {\n        var query = !isGeo ? dataIdx : region.name;\n        var labelFetcher; // Consider dataIdx not found.\n\n        if (!data || dataIdx >= 0) {\n          labelFetcher = mapOrGeoModel;\n        }\n\n        var textEl = new graphic.Text({\n          position: region.center.slice(),\n          scale: [1 / scale[0], 1 / scale[1]],\n          z2: 10,\n          silent: true\n        });\n        graphic.setLabelStyle(textEl.style, textEl.hoverStyle = {}, labelModel, hoverLabelModel, {\n          labelFetcher: labelFetcher,\n          labelDataIndex: query,\n          defaultText: region.name,\n          useInsideStyle: false\n        }, {\n          textAlign: 'center',\n          textVerticalAlign: 'middle'\n        });\n        regionGroup.add(textEl);\n      } // setItemGraphicEl, setHoverStyle after all polygons and labels\n      // are added to the rigionGroup\n\n\n      if (data) {\n        data.setItemGraphicEl(dataIdx, regionGroup);\n      } else {\n        var regionModel = mapOrGeoModel.getRegionModel(region.name); // Package custom mouse event for geo component\n\n        compoundPath.eventData = {\n          componentType: 'geo',\n          geoIndex: mapOrGeoModel.componentIndex,\n          name: region.name,\n          region: regionModel && regionModel.option || {}\n        };\n      }\n\n      var groupRegions = regionGroup.__regions || (regionGroup.__regions = []);\n      groupRegions.push(region);\n      graphic.setHoverStyle(regionGroup, hoverItemStyle, {\n        hoverSilentOnTouch: !!mapOrGeoModel.get('selectedMode')\n      });\n      group.add(regionGroup);\n    });\n\n    this._updateController(mapOrGeoModel, ecModel, api);\n\n    updateMapSelectHandler(this, mapOrGeoModel, group, api, fromView);\n    updateMapSelected(mapOrGeoModel, group);\n  },\n  remove: function () {\n    this.group.removeAll();\n\n    this._controller.dispose();\n\n    this._controllerHost = {};\n  },\n  _updateController: function (mapOrGeoModel, ecModel, api) {\n    var geo = mapOrGeoModel.coordinateSystem;\n    var controller = this._controller;\n    var controllerHost = this._controllerHost;\n    controllerHost.zoomLimit = mapOrGeoModel.get('scaleLimit');\n    controllerHost.zoom = geo.getZoom(); // roamType is will be set default true if it is null\n\n    controller.enable(mapOrGeoModel.get('roam') || false);\n    var mainType = mapOrGeoModel.mainType;\n\n    function makeActionBase() {\n      var action = {\n        type: 'geoRoam',\n        componentType: mainType\n      };\n      action[mainType + 'Id'] = mapOrGeoModel.id;\n      return action;\n    }\n\n    controller.off('pan').on('pan', function (dx, dy) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnPan(controllerHost, dx, dy);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        dx: dx,\n        dy: dy\n      }));\n    }, this);\n    controller.off('zoom').on('zoom', function (zoom, mouseX, mouseY) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnZoom(controllerHost, zoom, mouseX, mouseY);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        zoom: zoom,\n        originX: mouseX,\n        originY: mouseY\n      }));\n\n      if (this._updateGroup) {\n        var group = this.group;\n        var scale = group.scale;\n        group.traverse(function (el) {\n          if (el.type === 'text') {\n            el.attr('scale', [1 / scale[0], 1 / scale[1]]);\n          }\n        });\n      }\n    }, this);\n    controller.setPointerChecker(function (e, x, y) {\n      return geo.getViewRectAfterRoam().contain(x, y) && !onIrrelevantElement(e, api, mapOrGeoModel);\n    });\n  }\n};\nvar _default = MapDraw;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/helper/MapDraw.js"],"names":["zrUtil","require","RoamController","roamHelper","_cursorHelper","onIrrelevantElement","graphic","getFixedItemStyle","model","scale","itemStyle","getItemStyle","areaColor","get","fill","updateMapSelectHandler","mapDraw","mapOrGeoModel","group","api","fromView","off","on","_mouseDownFlag","e","el","target","__regions","parent","action","type","mainType","batch","map","region","name","from","uid","id","dispatchAction","updateMapSelected","eachChild","otherRegionEl","each","trigger","isSelected","MapDraw","updateGroup","Group","_controller","getZr","_controllerHost","_updateGroup","prototype","constructor","draw","ecModel","payload","isGeo","data","getData","eachComponent","subType","mapSeries","getHostGeoModel","geo","coordinateSystem","groupNewProp","position","childAt","attr","updateProps","removeAll","itemStyleAccessPath","hoverItemStyleAccessPath","labelAccessPath","hoverLabelAccessPath","nameMap","createHashMap","regions","regionGroup","set","compoundPath","CompoundPath","shape","paths","add","regionModel","getRegionModel","itemStyleModel","getModel","hoverItemStyleModel","hoverItemStyle","labelModel","hoverLabelModel","dataIdx","indexOfName","visualColor","getItemVisual","geometries","geometry","push","Polygon","points","exterior","i","interiors","length","setStyle","style","strokeNoScale","culling","showLabel","hoverShowLabel","isDataNaN","isNaN","itemLayout","getItemLayout","query","labelFetcher","textEl","Text","center","slice","z2","silent","setLabelStyle","hoverStyle","labelDataIndex","defaultText","useInsideStyle","textAlign","textVerticalAlign","setItemGraphicEl","eventData","componentType","geoIndex","componentIndex","option","groupRegions","setHoverStyle","hoverSilentOnTouch","_updateController","remove","dispose","controller","controllerHost","zoomLimit","zoom","getZoom","enable","makeActionBase","dx","dy","updateViewOnPan","extend","mouseX","mouseY","updateViewOnZoom","originX","originY","traverse","setPointerChecker","x","y","getViewRectAfterRoam","contain","_default","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar RoamController = require(\"./RoamController\");\n\nvar roamHelper = require(\"../../component/helper/roamHelper\");\n\nvar _cursorHelper = require(\"../../component/helper/cursorHelper\");\n\nvar onIrrelevantElement = _cursorHelper.onIrrelevantElement;\n\nvar graphic = require(\"../../util/graphic\");\n\nfunction getFixedItemStyle(model, scale) {\n  var itemStyle = model.getItemStyle();\n  var areaColor = model.get('areaColor'); // If user want the color not to be changed when hover,\n  // they should both set areaColor and color to be null.\n\n  if (areaColor != null) {\n    itemStyle.fill = areaColor;\n  }\n\n  return itemStyle;\n}\n\nfunction updateMapSelectHandler(mapDraw, mapOrGeoModel, group, api, fromView) {\n  group.off('click');\n  group.off('mousedown');\n\n  if (mapOrGeoModel.get('selectedMode')) {\n    group.on('mousedown', function () {\n      mapDraw._mouseDownFlag = true;\n    });\n    group.on('click', function (e) {\n      if (!mapDraw._mouseDownFlag) {\n        return;\n      }\n\n      mapDraw._mouseDownFlag = false;\n      var el = e.target;\n\n      while (!el.__regions) {\n        el = el.parent;\n      }\n\n      if (!el) {\n        return;\n      }\n\n      var action = {\n        type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',\n        batch: zrUtil.map(el.__regions, function (region) {\n          return {\n            name: region.name,\n            from: fromView.uid\n          };\n        })\n      };\n      action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;\n      api.dispatchAction(action);\n      updateMapSelected(mapOrGeoModel, group);\n    });\n  }\n}\n\nfunction updateMapSelected(mapOrGeoModel, group) {\n  // FIXME\n  group.eachChild(function (otherRegionEl) {\n    zrUtil.each(otherRegionEl.__regions, function (region) {\n      otherRegionEl.trigger(mapOrGeoModel.isSelected(region.name) ? 'emphasis' : 'normal');\n    });\n  });\n}\n/**\n * @alias module:echarts/component/helper/MapDraw\n * @param {module:echarts/ExtensionAPI} api\n * @param {boolean} updateGroup\n */\n\n\nfunction MapDraw(api, updateGroup) {\n  var group = new graphic.Group();\n  /**\n   * @type {module:echarts/component/helper/RoamController}\n   * @private\n   */\n\n  this._controller = new RoamController(api.getZr());\n  /**\n   * @type {Object} {target, zoom, zoomLimit}\n   * @private\n   */\n\n  this._controllerHost = {\n    target: updateGroup ? group : null\n  };\n  /**\n   * @type {module:zrender/container/Group}\n   * @readOnly\n   */\n\n  this.group = group;\n  /**\n   * @type {boolean}\n   * @private\n   */\n\n  this._updateGroup = updateGroup;\n  /**\n   * This flag is used to make sure that only one among\n   * `pan`, `zoom`, `click` can occurs, otherwise 'selected'\n   * action may be triggered when `pan`, which is unexpected.\n   * @type {booelan}\n   */\n\n  this._mouseDownFlag;\n}\n\nMapDraw.prototype = {\n  constructor: MapDraw,\n  draw: function (mapOrGeoModel, ecModel, api, fromView, payload) {\n    var isGeo = mapOrGeoModel.mainType === 'geo'; // Map series has data. GEO model that controlled by map series\n    // will be assigned with map data. Other GEO model has no data.\n\n    var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\n    isGeo && ecModel.eachComponent({\n      mainType: 'series',\n      subType: 'map'\n    }, function (mapSeries) {\n      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {\n        data = mapSeries.getData();\n      }\n    });\n    var geo = mapOrGeoModel.coordinateSystem;\n    var group = this.group;\n    var scale = geo.scale;\n    var groupNewProp = {\n      position: geo.position,\n      scale: scale\n    }; // No animation when first draw or in action\n\n    if (!group.childAt(0) || payload) {\n      group.attr(groupNewProp);\n    } else {\n      graphic.updateProps(group, groupNewProp, mapOrGeoModel);\n    }\n\n    group.removeAll();\n    var itemStyleAccessPath = ['itemStyle', 'normal'];\n    var hoverItemStyleAccessPath = ['itemStyle', 'emphasis'];\n    var labelAccessPath = ['label', 'normal'];\n    var hoverLabelAccessPath = ['label', 'emphasis'];\n    var nameMap = zrUtil.createHashMap();\n    zrUtil.each(geo.regions, function (region) {\n      // Consider in GeoJson properties.name may be duplicated, for example,\n      // there is multiple region named \"United Kindom\" or \"France\" (so many\n      // colonies). And it is not appropriate to merge them in geo, which\n      // will make them share the same label and bring trouble in label\n      // location calculation.\n      var regionGroup = nameMap.get(region.name) || nameMap.set(region.name, new graphic.Group());\n      var compoundPath = new graphic.CompoundPath({\n        shape: {\n          paths: []\n        }\n      });\n      regionGroup.add(compoundPath);\n      var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;\n      var itemStyleModel = regionModel.getModel(itemStyleAccessPath);\n      var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);\n      var itemStyle = getFixedItemStyle(itemStyleModel, scale);\n      var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);\n      var labelModel = regionModel.getModel(labelAccessPath);\n      var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);\n      var dataIdx; // Use the itemStyle in data if has data\n\n      if (data) {\n        dataIdx = data.indexOfName(region.name); // Only visual color of each item will be used. It can be encoded by dataRange\n        // But visual color of series is used in symbol drawing\n        //\n        // Visual color for each series is for the symbol draw\n\n        var visualColor = data.getItemVisual(dataIdx, 'color', true);\n\n        if (visualColor) {\n          itemStyle.fill = visualColor;\n        }\n      }\n\n      zrUtil.each(region.geometries, function (geometry) {\n        if (geometry.type !== 'polygon') {\n          return;\n        }\n\n        compoundPath.shape.paths.push(new graphic.Polygon({\n          shape: {\n            points: geometry.exterior\n          }\n        }));\n\n        for (var i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); i++) {\n          compoundPath.shape.paths.push(new graphic.Polygon({\n            shape: {\n              points: geometry.interiors[i]\n            }\n          }));\n        }\n      });\n      compoundPath.setStyle(itemStyle);\n      compoundPath.style.strokeNoScale = true;\n      compoundPath.culling = true; // Label\n\n      var showLabel = labelModel.get('show');\n      var hoverShowLabel = hoverLabelModel.get('show');\n      var isDataNaN = data && isNaN(data.get('value', dataIdx));\n      var itemLayout = data && data.getItemLayout(dataIdx); // In the following cases label will be drawn\n      // 1. In map series and data value is NaN\n      // 2. In geo component\n      // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout\n\n      if (isGeo || isDataNaN && (showLabel || hoverShowLabel) || itemLayout && itemLayout.showLabel) {\n        var query = !isGeo ? dataIdx : region.name;\n        var labelFetcher; // Consider dataIdx not found.\n\n        if (!data || dataIdx >= 0) {\n          labelFetcher = mapOrGeoModel;\n        }\n\n        var textEl = new graphic.Text({\n          position: region.center.slice(),\n          scale: [1 / scale[0], 1 / scale[1]],\n          z2: 10,\n          silent: true\n        });\n        graphic.setLabelStyle(textEl.style, textEl.hoverStyle = {}, labelModel, hoverLabelModel, {\n          labelFetcher: labelFetcher,\n          labelDataIndex: query,\n          defaultText: region.name,\n          useInsideStyle: false\n        }, {\n          textAlign: 'center',\n          textVerticalAlign: 'middle'\n        });\n        regionGroup.add(textEl);\n      } // setItemGraphicEl, setHoverStyle after all polygons and labels\n      // are added to the rigionGroup\n\n\n      if (data) {\n        data.setItemGraphicEl(dataIdx, regionGroup);\n      } else {\n        var regionModel = mapOrGeoModel.getRegionModel(region.name); // Package custom mouse event for geo component\n\n        compoundPath.eventData = {\n          componentType: 'geo',\n          geoIndex: mapOrGeoModel.componentIndex,\n          name: region.name,\n          region: regionModel && regionModel.option || {}\n        };\n      }\n\n      var groupRegions = regionGroup.__regions || (regionGroup.__regions = []);\n      groupRegions.push(region);\n      graphic.setHoverStyle(regionGroup, hoverItemStyle, {\n        hoverSilentOnTouch: !!mapOrGeoModel.get('selectedMode')\n      });\n      group.add(regionGroup);\n    });\n\n    this._updateController(mapOrGeoModel, ecModel, api);\n\n    updateMapSelectHandler(this, mapOrGeoModel, group, api, fromView);\n    updateMapSelected(mapOrGeoModel, group);\n  },\n  remove: function () {\n    this.group.removeAll();\n\n    this._controller.dispose();\n\n    this._controllerHost = {};\n  },\n  _updateController: function (mapOrGeoModel, ecModel, api) {\n    var geo = mapOrGeoModel.coordinateSystem;\n    var controller = this._controller;\n    var controllerHost = this._controllerHost;\n    controllerHost.zoomLimit = mapOrGeoModel.get('scaleLimit');\n    controllerHost.zoom = geo.getZoom(); // roamType is will be set default true if it is null\n\n    controller.enable(mapOrGeoModel.get('roam') || false);\n    var mainType = mapOrGeoModel.mainType;\n\n    function makeActionBase() {\n      var action = {\n        type: 'geoRoam',\n        componentType: mainType\n      };\n      action[mainType + 'Id'] = mapOrGeoModel.id;\n      return action;\n    }\n\n    controller.off('pan').on('pan', function (dx, dy) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnPan(controllerHost, dx, dy);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        dx: dx,\n        dy: dy\n      }));\n    }, this);\n    controller.off('zoom').on('zoom', function (zoom, mouseX, mouseY) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnZoom(controllerHost, zoom, mouseX, mouseY);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        zoom: zoom,\n        originX: mouseX,\n        originY: mouseY\n      }));\n\n      if (this._updateGroup) {\n        var group = this.group;\n        var scale = group.scale;\n        group.traverse(function (el) {\n          if (el.type === 'text') {\n            el.attr('scale', [1 / scale[0], 1 / scale[1]]);\n          }\n        });\n      }\n    }, this);\n    controller.setPointerChecker(function (e, x, y) {\n      return geo.getViewRectAfterRoam().contain(x, y) && !onIrrelevantElement(e, api, mapOrGeoModel);\n    });\n  }\n};\nvar _default = MapDraw;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}