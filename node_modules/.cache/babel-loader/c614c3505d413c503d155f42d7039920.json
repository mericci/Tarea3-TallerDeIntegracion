{"ast":null,"code":"var echarts = require(\"../../echarts\");\n\nvar List = require(\"../../data/List\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _model = require(\"../../util/model\");\n\nvar defaultEmphasis = _model.defaultEmphasis;\n\nvar Model = require(\"../../model/Model\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\nvar createGraphFromNodeEdge = require(\"../helper/createGraphFromNodeEdge\");\n\nvar GraphSeries = echarts.extendSeriesModel({\n  type: 'series.graph',\n  init: function (option) {\n    GraphSeries.superApply(this, 'init', arguments); // Provide data for legend select\n\n    this.legendDataProvider = function () {\n      return this._categoriesData;\n    };\n\n    this.fillDataTextStyle(option.edges || option.links);\n\n    this._updateCategoriesData();\n  },\n  mergeOption: function (option) {\n    GraphSeries.superApply(this, 'mergeOption', arguments);\n    this.fillDataTextStyle(option.edges || option.links);\n\n    this._updateCategoriesData();\n  },\n  mergeDefaultAndTheme: function (option) {\n    GraphSeries.superApply(this, 'mergeDefaultAndTheme', arguments);\n    defaultEmphasis(option.edgeLabel, ['show']);\n  },\n  getInitialData: function (option, ecModel) {\n    var edges = option.edges || option.links || [];\n    var nodes = option.data || option.nodes || [];\n    var self = this;\n\n    if (nodes && edges) {\n      return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;\n    }\n\n    function beforeLink(nodeData, edgeData) {\n      // Overwrite nodeData.getItemModel to\n      nodeData.wrapMethod('getItemModel', function (model) {\n        var categoriesModels = self._categoriesModels;\n        var categoryIdx = model.getShallow('category');\n        var categoryModel = categoriesModels[categoryIdx];\n\n        if (categoryModel) {\n          categoryModel.parentModel = model.parentModel;\n          model.parentModel = categoryModel;\n        }\n\n        return model;\n      });\n      var edgeLabelModel = self.getModel('edgeLabel'); // For option `edgeLabel` can be found by label.xxx.xxx on item mode.\n\n      var fakeSeriesModel = new Model({\n        label: edgeLabelModel.option\n      }, edgeLabelModel.parentModel, ecModel);\n      edgeData.wrapMethod('getItemModel', function (model) {\n        model.customizeGetParent(edgeGetParent);\n        return model;\n      });\n\n      function edgeGetParent(path) {\n        path = this.parsePath(path);\n        return path && path[0] === 'label' ? fakeSeriesModel : this.parentModel;\n      }\n    }\n  },\n\n  /**\n   * @return {module:echarts/data/Graph}\n   */\n  getGraph: function () {\n    return this.getData().graph;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getEdgeData: function () {\n    return this.getGraph().edgeData;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getCategoriesData: function () {\n    return this._categoriesData;\n  },\n\n  /**\n   * @override\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\n    if (dataType === 'edge') {\n      var nodeData = this.getData();\n      var params = this.getDataParams(dataIndex, dataType);\n      var edge = nodeData.graph.getEdgeByIndex(dataIndex);\n      var sourceName = nodeData.getName(edge.node1.dataIndex);\n      var targetName = nodeData.getName(edge.node2.dataIndex);\n      var html = [];\n      sourceName != null && html.push(sourceName);\n      targetName != null && html.push(targetName);\n      html = encodeHTML(html.join(' > '));\n\n      if (params.value) {\n        html += ' : ' + encodeHTML(params.value);\n      }\n\n      return html;\n    } else {\n      // dataType === 'node' or empty\n      return GraphSeries.superApply(this, 'formatTooltip', arguments);\n    }\n  },\n  _updateCategoriesData: function () {\n    var categories = zrUtil.map(this.option.categories || [], function (category) {\n      // Data must has value\n      return category.value != null ? category : zrUtil.extend({\n        value: 0\n      }, category);\n    });\n    var categoriesData = new List(['value'], this);\n    categoriesData.initData(categories);\n    this._categoriesData = categoriesData;\n    this._categoriesModels = categoriesData.mapArray(function (idx) {\n      return categoriesData.getItemModel(idx, true);\n    });\n  },\n  setZoom: function (zoom) {\n    this.option.zoom = zoom;\n  },\n  setCenter: function (center) {\n    this.option.center = center;\n  },\n  isAnimationEnabled: function () {\n    return GraphSeries.superCall(this, 'isAnimationEnabled') // Not enable animation when do force layout\n    && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    // Default option for all coordinate systems\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    // polarIndex: 0,\n    // geoIndex: 0,\n    legendHoverLink: true,\n    hoverAnimation: true,\n    layout: null,\n    focusNodeAdjacency: false,\n    // Configuration of circular layout\n    circular: {\n      rotateLabel: false\n    },\n    // Configuration of force directed layout\n    force: {\n      initLayout: null,\n      // Node repulsion. Can be an array to represent range.\n      repulsion: [0, 50],\n      gravity: 0.1,\n      // Edge length. Can be an array to represent range.\n      edgeLength: 30,\n      layoutAnimation: true\n    },\n    left: 'center',\n    top: 'center',\n    // right: null,\n    // bottom: null,\n    // width: '80%',\n    // height: '80%',\n    symbol: 'circle',\n    symbolSize: 10,\n    edgeSymbol: ['none', 'none'],\n    edgeSymbolSize: 10,\n    edgeLabel: {\n      normal: {\n        position: 'middle'\n      },\n      emphasis: {}\n    },\n    draggable: false,\n    roam: false,\n    // Default on center of graph\n    center: null,\n    zoom: 1,\n    // Symbol size scale ratio in roam\n    nodeScaleRatio: 0.6,\n    // cursor: null,\n    // categories: [],\n    // data: []\n    // Or\n    // nodes: []\n    //\n    // links: []\n    // Or\n    // edges: []\n    label: {\n      normal: {\n        show: false,\n        formatter: '{b}'\n      },\n      emphasis: {\n        show: true\n      }\n    },\n    itemStyle: {\n      normal: {},\n      emphasis: {}\n    },\n    lineStyle: {\n      normal: {\n        color: '#aaa',\n        width: 1,\n        curveness: 0,\n        opacity: 0.5\n      },\n      emphasis: {}\n    }\n  }\n});\nvar _default = GraphSeries;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/graph/GraphSeries.js"],"names":["echarts","require","List","zrUtil","_model","defaultEmphasis","Model","_format","encodeHTML","createGraphFromNodeEdge","GraphSeries","extendSeriesModel","type","init","option","superApply","arguments","legendDataProvider","_categoriesData","fillDataTextStyle","edges","links","_updateCategoriesData","mergeOption","mergeDefaultAndTheme","edgeLabel","getInitialData","ecModel","nodes","data","self","beforeLink","nodeData","edgeData","wrapMethod","model","categoriesModels","_categoriesModels","categoryIdx","getShallow","categoryModel","parentModel","edgeLabelModel","getModel","fakeSeriesModel","label","customizeGetParent","edgeGetParent","path","parsePath","getGraph","getData","graph","getEdgeData","getCategoriesData","formatTooltip","dataIndex","multipleSeries","dataType","params","getDataParams","edge","getEdgeByIndex","sourceName","getName","node1","targetName","node2","html","push","join","value","categories","map","category","extend","categoriesData","initData","mapArray","idx","getItemModel","setZoom","zoom","setCenter","center","isAnimationEnabled","superCall","get","defaultOption","zlevel","z","coordinateSystem","legendHoverLink","hoverAnimation","layout","focusNodeAdjacency","circular","rotateLabel","force","initLayout","repulsion","gravity","edgeLength","layoutAnimation","left","top","symbol","symbolSize","edgeSymbol","edgeSymbolSize","normal","position","emphasis","draggable","roam","nodeScaleRatio","show","formatter","itemStyle","lineStyle","color","width","curveness","opacity","_default","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIC,IAAI,GAAGD,OAAO,CAAC,iBAAD,CAAlB;;AAEA,IAAIE,MAAM,GAAGF,OAAO,CAAC,uBAAD,CAApB;;AAEA,IAAIG,MAAM,GAAGH,OAAO,CAAC,kBAAD,CAApB;;AAEA,IAAII,eAAe,GAAGD,MAAM,CAACC,eAA7B;;AAEA,IAAIC,KAAK,GAAGL,OAAO,CAAC,mBAAD,CAAnB;;AAEA,IAAIM,OAAO,GAAGN,OAAO,CAAC,mBAAD,CAArB;;AAEA,IAAIO,UAAU,GAAGD,OAAO,CAACC,UAAzB;;AAEA,IAAIC,uBAAuB,GAAGR,OAAO,CAAC,mCAAD,CAArC;;AAEA,IAAIS,WAAW,GAAGV,OAAO,CAACW,iBAAR,CAA0B;AAC1CC,EAAAA,IAAI,EAAE,cADoC;AAE1CC,EAAAA,IAAI,EAAE,UAAUC,MAAV,EAAkB;AACtBJ,IAAAA,WAAW,CAACK,UAAZ,CAAuB,IAAvB,EAA6B,MAA7B,EAAqCC,SAArC,EADsB,CAC2B;;AAEjD,SAAKC,kBAAL,GAA0B,YAAY;AACpC,aAAO,KAAKC,eAAZ;AACD,KAFD;;AAIA,SAAKC,iBAAL,CAAuBL,MAAM,CAACM,KAAP,IAAgBN,MAAM,CAACO,KAA9C;;AAEA,SAAKC,qBAAL;AACD,GAZyC;AAa1CC,EAAAA,WAAW,EAAE,UAAUT,MAAV,EAAkB;AAC7BJ,IAAAA,WAAW,CAACK,UAAZ,CAAuB,IAAvB,EAA6B,aAA7B,EAA4CC,SAA5C;AACA,SAAKG,iBAAL,CAAuBL,MAAM,CAACM,KAAP,IAAgBN,MAAM,CAACO,KAA9C;;AAEA,SAAKC,qBAAL;AACD,GAlByC;AAmB1CE,EAAAA,oBAAoB,EAAE,UAAUV,MAAV,EAAkB;AACtCJ,IAAAA,WAAW,CAACK,UAAZ,CAAuB,IAAvB,EAA6B,sBAA7B,EAAqDC,SAArD;AACAX,IAAAA,eAAe,CAACS,MAAM,CAACW,SAAR,EAAmB,CAAC,MAAD,CAAnB,CAAf;AACD,GAtByC;AAuB1CC,EAAAA,cAAc,EAAE,UAAUZ,MAAV,EAAkBa,OAAlB,EAA2B;AACzC,QAAIP,KAAK,GAAGN,MAAM,CAACM,KAAP,IAAgBN,MAAM,CAACO,KAAvB,IAAgC,EAA5C;AACA,QAAIO,KAAK,GAAGd,MAAM,CAACe,IAAP,IAAef,MAAM,CAACc,KAAtB,IAA+B,EAA3C;AACA,QAAIE,IAAI,GAAG,IAAX;;AAEA,QAAIF,KAAK,IAAIR,KAAb,EAAoB;AAClB,aAAOX,uBAAuB,CAACmB,KAAD,EAAQR,KAAR,EAAe,IAAf,EAAqB,IAArB,EAA2BW,UAA3B,CAAvB,CAA8DF,IAArE;AACD;;AAED,aAASE,UAAT,CAAoBC,QAApB,EAA8BC,QAA9B,EAAwC;AACtC;AACAD,MAAAA,QAAQ,CAACE,UAAT,CAAoB,cAApB,EAAoC,UAAUC,KAAV,EAAiB;AACnD,YAAIC,gBAAgB,GAAGN,IAAI,CAACO,iBAA5B;AACA,YAAIC,WAAW,GAAGH,KAAK,CAACI,UAAN,CAAiB,UAAjB,CAAlB;AACA,YAAIC,aAAa,GAAGJ,gBAAgB,CAACE,WAAD,CAApC;;AAEA,YAAIE,aAAJ,EAAmB;AACjBA,UAAAA,aAAa,CAACC,WAAd,GAA4BN,KAAK,CAACM,WAAlC;AACAN,UAAAA,KAAK,CAACM,WAAN,GAAoBD,aAApB;AACD;;AAED,eAAOL,KAAP;AACD,OAXD;AAYA,UAAIO,cAAc,GAAGZ,IAAI,CAACa,QAAL,CAAc,WAAd,CAArB,CAdsC,CAcW;;AAEjD,UAAIC,eAAe,GAAG,IAAItC,KAAJ,CAAU;AAC9BuC,QAAAA,KAAK,EAAEH,cAAc,CAAC5B;AADQ,OAAV,EAEnB4B,cAAc,CAACD,WAFI,EAESd,OAFT,CAAtB;AAGAM,MAAAA,QAAQ,CAACC,UAAT,CAAoB,cAApB,EAAoC,UAAUC,KAAV,EAAiB;AACnDA,QAAAA,KAAK,CAACW,kBAAN,CAAyBC,aAAzB;AACA,eAAOZ,KAAP;AACD,OAHD;;AAKA,eAASY,aAAT,CAAuBC,IAAvB,EAA6B;AAC3BA,QAAAA,IAAI,GAAG,KAAKC,SAAL,CAAeD,IAAf,CAAP;AACA,eAAOA,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAApB,GAA8BJ,eAA9B,GAAgD,KAAKH,WAA5D;AACD;AACF;AACF,GA7DyC;;AA+D1C;;;AAGAS,EAAAA,QAAQ,EAAE,YAAY;AACpB,WAAO,KAAKC,OAAL,GAAeC,KAAtB;AACD,GApEyC;;AAsE1C;;;AAGAC,EAAAA,WAAW,EAAE,YAAY;AACvB,WAAO,KAAKH,QAAL,GAAgBjB,QAAvB;AACD,GA3EyC;;AA6E1C;;;AAGAqB,EAAAA,iBAAiB,EAAE,YAAY;AAC7B,WAAO,KAAKpC,eAAZ;AACD,GAlFyC;;AAoF1C;;;AAGAqC,EAAAA,aAAa,EAAE,UAAUC,SAAV,EAAqBC,cAArB,EAAqCC,QAArC,EAA+C;AAC5D,QAAIA,QAAQ,KAAK,MAAjB,EAAyB;AACvB,UAAI1B,QAAQ,GAAG,KAAKmB,OAAL,EAAf;AACA,UAAIQ,MAAM,GAAG,KAAKC,aAAL,CAAmBJ,SAAnB,EAA8BE,QAA9B,CAAb;AACA,UAAIG,IAAI,GAAG7B,QAAQ,CAACoB,KAAT,CAAeU,cAAf,CAA8BN,SAA9B,CAAX;AACA,UAAIO,UAAU,GAAG/B,QAAQ,CAACgC,OAAT,CAAiBH,IAAI,CAACI,KAAL,CAAWT,SAA5B,CAAjB;AACA,UAAIU,UAAU,GAAGlC,QAAQ,CAACgC,OAAT,CAAiBH,IAAI,CAACM,KAAL,CAAWX,SAA5B,CAAjB;AACA,UAAIY,IAAI,GAAG,EAAX;AACAL,MAAAA,UAAU,IAAI,IAAd,IAAsBK,IAAI,CAACC,IAAL,CAAUN,UAAV,CAAtB;AACAG,MAAAA,UAAU,IAAI,IAAd,IAAsBE,IAAI,CAACC,IAAL,CAAUH,UAAV,CAAtB;AACAE,MAAAA,IAAI,GAAG5D,UAAU,CAAC4D,IAAI,CAACE,IAAL,CAAU,KAAV,CAAD,CAAjB;;AAEA,UAAIX,MAAM,CAACY,KAAX,EAAkB;AAChBH,QAAAA,IAAI,IAAI,QAAQ5D,UAAU,CAACmD,MAAM,CAACY,KAAR,CAA1B;AACD;;AAED,aAAOH,IAAP;AACD,KAhBD,MAgBO;AACL;AACA,aAAO1D,WAAW,CAACK,UAAZ,CAAuB,IAAvB,EAA6B,eAA7B,EAA8CC,SAA9C,CAAP;AACD;AACF,GA5GyC;AA6G1CM,EAAAA,qBAAqB,EAAE,YAAY;AACjC,QAAIkD,UAAU,GAAGrE,MAAM,CAACsE,GAAP,CAAW,KAAK3D,MAAL,CAAY0D,UAAZ,IAA0B,EAArC,EAAyC,UAAUE,QAAV,EAAoB;AAC5E;AACA,aAAOA,QAAQ,CAACH,KAAT,IAAkB,IAAlB,GAAyBG,QAAzB,GAAoCvE,MAAM,CAACwE,MAAP,CAAc;AACvDJ,QAAAA,KAAK,EAAE;AADgD,OAAd,EAExCG,QAFwC,CAA3C;AAGD,KALgB,CAAjB;AAMA,QAAIE,cAAc,GAAG,IAAI1E,IAAJ,CAAS,CAAC,OAAD,CAAT,EAAoB,IAApB,CAArB;AACA0E,IAAAA,cAAc,CAACC,QAAf,CAAwBL,UAAxB;AACA,SAAKtD,eAAL,GAAuB0D,cAAvB;AACA,SAAKvC,iBAAL,GAAyBuC,cAAc,CAACE,QAAf,CAAwB,UAAUC,GAAV,EAAe;AAC9D,aAAOH,cAAc,CAACI,YAAf,CAA4BD,GAA5B,EAAiC,IAAjC,CAAP;AACD,KAFwB,CAAzB;AAGD,GA1HyC;AA2H1CE,EAAAA,OAAO,EAAE,UAAUC,IAAV,EAAgB;AACvB,SAAKpE,MAAL,CAAYoE,IAAZ,GAAmBA,IAAnB;AACD,GA7HyC;AA8H1CC,EAAAA,SAAS,EAAE,UAAUC,MAAV,EAAkB;AAC3B,SAAKtE,MAAL,CAAYsE,MAAZ,GAAqBA,MAArB;AACD,GAhIyC;AAiI1CC,EAAAA,kBAAkB,EAAE,YAAY;AAC9B,WAAO3E,WAAW,CAAC4E,SAAZ,CAAsB,IAAtB,EAA4B,oBAA5B,EAAkD;AAAlD,OACJ,EAAE,KAAKC,GAAL,CAAS,QAAT,MAAuB,OAAvB,IAAkC,KAAKA,GAAL,CAAS,uBAAT,CAApC,CADH;AAED,GApIyC;AAqI1CC,EAAAA,aAAa,EAAE;AACbC,IAAAA,MAAM,EAAE,CADK;AAEbC,IAAAA,CAAC,EAAE,CAFU;AAGbC,IAAAA,gBAAgB,EAAE,MAHL;AAIb;AACA;AACA;AACA;AACA;AACAC,IAAAA,eAAe,EAAE,IATJ;AAUbC,IAAAA,cAAc,EAAE,IAVH;AAWbC,IAAAA,MAAM,EAAE,IAXK;AAYbC,IAAAA,kBAAkB,EAAE,KAZP;AAab;AACAC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,WAAW,EAAE;AADL,KAdG;AAiBb;AACAC,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE,IADP;AAEL;AACAC,MAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,EAAJ,CAHN;AAILC,MAAAA,OAAO,EAAE,GAJJ;AAKL;AACAC,MAAAA,UAAU,EAAE,EANP;AAOLC,MAAAA,eAAe,EAAE;AAPZ,KAlBM;AA2BbC,IAAAA,IAAI,EAAE,QA3BO;AA4BbC,IAAAA,GAAG,EAAE,QA5BQ;AA6Bb;AACA;AACA;AACA;AACAC,IAAAA,MAAM,EAAE,QAjCK;AAkCbC,IAAAA,UAAU,EAAE,EAlCC;AAmCbC,IAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,MAAT,CAnCC;AAoCbC,IAAAA,cAAc,EAAE,EApCH;AAqCbpF,IAAAA,SAAS,EAAE;AACTqF,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ,OADC;AAITC,MAAAA,QAAQ,EAAE;AAJD,KArCE;AA2CbC,IAAAA,SAAS,EAAE,KA3CE;AA4CbC,IAAAA,IAAI,EAAE,KA5CO;AA6Cb;AACA9B,IAAAA,MAAM,EAAE,IA9CK;AA+CbF,IAAAA,IAAI,EAAE,CA/CO;AAgDb;AACAiC,IAAAA,cAAc,EAAE,GAjDH;AAkDb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtE,IAAAA,KAAK,EAAE;AACLiE,MAAAA,MAAM,EAAE;AACNM,QAAAA,IAAI,EAAE,KADA;AAENC,QAAAA,SAAS,EAAE;AAFL,OADH;AAKLL,MAAAA,QAAQ,EAAE;AACRI,QAAAA,IAAI,EAAE;AADE;AALL,KA3DM;AAoEbE,IAAAA,SAAS,EAAE;AACTR,MAAAA,MAAM,EAAE,EADC;AAETE,MAAAA,QAAQ,EAAE;AAFD,KApEE;AAwEbO,IAAAA,SAAS,EAAE;AACTT,MAAAA,MAAM,EAAE;AACNU,QAAAA,KAAK,EAAE,MADD;AAENC,QAAAA,KAAK,EAAE,CAFD;AAGNC,QAAAA,SAAS,EAAE,CAHL;AAINC,QAAAA,OAAO,EAAE;AAJH,OADC;AAOTX,MAAAA,QAAQ,EAAE;AAPD;AAxEE;AArI2B,CAA1B,CAAlB;AAwNA,IAAIY,QAAQ,GAAGlH,WAAf;AACAmH,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["var echarts = require(\"../../echarts\");\n\nvar List = require(\"../../data/List\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _model = require(\"../../util/model\");\n\nvar defaultEmphasis = _model.defaultEmphasis;\n\nvar Model = require(\"../../model/Model\");\n\nvar _format = require(\"../../util/format\");\n\nvar encodeHTML = _format.encodeHTML;\n\nvar createGraphFromNodeEdge = require(\"../helper/createGraphFromNodeEdge\");\n\nvar GraphSeries = echarts.extendSeriesModel({\n  type: 'series.graph',\n  init: function (option) {\n    GraphSeries.superApply(this, 'init', arguments); // Provide data for legend select\n\n    this.legendDataProvider = function () {\n      return this._categoriesData;\n    };\n\n    this.fillDataTextStyle(option.edges || option.links);\n\n    this._updateCategoriesData();\n  },\n  mergeOption: function (option) {\n    GraphSeries.superApply(this, 'mergeOption', arguments);\n    this.fillDataTextStyle(option.edges || option.links);\n\n    this._updateCategoriesData();\n  },\n  mergeDefaultAndTheme: function (option) {\n    GraphSeries.superApply(this, 'mergeDefaultAndTheme', arguments);\n    defaultEmphasis(option.edgeLabel, ['show']);\n  },\n  getInitialData: function (option, ecModel) {\n    var edges = option.edges || option.links || [];\n    var nodes = option.data || option.nodes || [];\n    var self = this;\n\n    if (nodes && edges) {\n      return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;\n    }\n\n    function beforeLink(nodeData, edgeData) {\n      // Overwrite nodeData.getItemModel to\n      nodeData.wrapMethod('getItemModel', function (model) {\n        var categoriesModels = self._categoriesModels;\n        var categoryIdx = model.getShallow('category');\n        var categoryModel = categoriesModels[categoryIdx];\n\n        if (categoryModel) {\n          categoryModel.parentModel = model.parentModel;\n          model.parentModel = categoryModel;\n        }\n\n        return model;\n      });\n      var edgeLabelModel = self.getModel('edgeLabel'); // For option `edgeLabel` can be found by label.xxx.xxx on item mode.\n\n      var fakeSeriesModel = new Model({\n        label: edgeLabelModel.option\n      }, edgeLabelModel.parentModel, ecModel);\n      edgeData.wrapMethod('getItemModel', function (model) {\n        model.customizeGetParent(edgeGetParent);\n        return model;\n      });\n\n      function edgeGetParent(path) {\n        path = this.parsePath(path);\n        return path && path[0] === 'label' ? fakeSeriesModel : this.parentModel;\n      }\n    }\n  },\n\n  /**\n   * @return {module:echarts/data/Graph}\n   */\n  getGraph: function () {\n    return this.getData().graph;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getEdgeData: function () {\n    return this.getGraph().edgeData;\n  },\n\n  /**\n   * @return {module:echarts/data/List}\n   */\n  getCategoriesData: function () {\n    return this._categoriesData;\n  },\n\n  /**\n   * @override\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType) {\n    if (dataType === 'edge') {\n      var nodeData = this.getData();\n      var params = this.getDataParams(dataIndex, dataType);\n      var edge = nodeData.graph.getEdgeByIndex(dataIndex);\n      var sourceName = nodeData.getName(edge.node1.dataIndex);\n      var targetName = nodeData.getName(edge.node2.dataIndex);\n      var html = [];\n      sourceName != null && html.push(sourceName);\n      targetName != null && html.push(targetName);\n      html = encodeHTML(html.join(' > '));\n\n      if (params.value) {\n        html += ' : ' + encodeHTML(params.value);\n      }\n\n      return html;\n    } else {\n      // dataType === 'node' or empty\n      return GraphSeries.superApply(this, 'formatTooltip', arguments);\n    }\n  },\n  _updateCategoriesData: function () {\n    var categories = zrUtil.map(this.option.categories || [], function (category) {\n      // Data must has value\n      return category.value != null ? category : zrUtil.extend({\n        value: 0\n      }, category);\n    });\n    var categoriesData = new List(['value'], this);\n    categoriesData.initData(categories);\n    this._categoriesData = categoriesData;\n    this._categoriesModels = categoriesData.mapArray(function (idx) {\n      return categoriesData.getItemModel(idx, true);\n    });\n  },\n  setZoom: function (zoom) {\n    this.option.zoom = zoom;\n  },\n  setCenter: function (center) {\n    this.option.center = center;\n  },\n  isAnimationEnabled: function () {\n    return GraphSeries.superCall(this, 'isAnimationEnabled') // Not enable animation when do force layout\n    && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));\n  },\n  defaultOption: {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    // Default option for all coordinate systems\n    // xAxisIndex: 0,\n    // yAxisIndex: 0,\n    // polarIndex: 0,\n    // geoIndex: 0,\n    legendHoverLink: true,\n    hoverAnimation: true,\n    layout: null,\n    focusNodeAdjacency: false,\n    // Configuration of circular layout\n    circular: {\n      rotateLabel: false\n    },\n    // Configuration of force directed layout\n    force: {\n      initLayout: null,\n      // Node repulsion. Can be an array to represent range.\n      repulsion: [0, 50],\n      gravity: 0.1,\n      // Edge length. Can be an array to represent range.\n      edgeLength: 30,\n      layoutAnimation: true\n    },\n    left: 'center',\n    top: 'center',\n    // right: null,\n    // bottom: null,\n    // width: '80%',\n    // height: '80%',\n    symbol: 'circle',\n    symbolSize: 10,\n    edgeSymbol: ['none', 'none'],\n    edgeSymbolSize: 10,\n    edgeLabel: {\n      normal: {\n        position: 'middle'\n      },\n      emphasis: {}\n    },\n    draggable: false,\n    roam: false,\n    // Default on center of graph\n    center: null,\n    zoom: 1,\n    // Symbol size scale ratio in roam\n    nodeScaleRatio: 0.6,\n    // cursor: null,\n    // categories: [],\n    // data: []\n    // Or\n    // nodes: []\n    //\n    // links: []\n    // Or\n    // edges: []\n    label: {\n      normal: {\n        show: false,\n        formatter: '{b}'\n      },\n      emphasis: {\n        show: true\n      }\n    },\n    itemStyle: {\n      normal: {},\n      emphasis: {}\n    },\n    lineStyle: {\n      normal: {\n        color: '#aaa',\n        width: 1,\n        curveness: 0,\n        opacity: 0.5\n      },\n      emphasis: {}\n    }\n  }\n});\nvar _default = GraphSeries;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}