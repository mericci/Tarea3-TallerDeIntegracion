{"ast":null,"code":"/**\n * 事件扩展\n * @module zrender/mixin/Eventful\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\nvar arrySlice = Array.prototype.slice;\n/**\n * 事件分发器\n * @alias module:zrender/mixin/Eventful\n * @constructor\n */\n\nvar Eventful = function () {\n  this._$handlers = {};\n};\n\nEventful.prototype = {\n  constructor: Eventful,\n\n  /**\n   * 单次触发绑定，trigger后销毁\n   *\n   * @param {string} event 事件名\n   * @param {Function} handler 响应函数\n   * @param {Object} context\n   */\n  one: function (event, handler, context) {\n    var _h = this._$handlers;\n\n    if (!handler || !event) {\n      return this;\n    }\n\n    if (!_h[event]) {\n      _h[event] = [];\n    }\n\n    for (var i = 0; i < _h[event].length; i++) {\n      if (_h[event][i].h === handler) {\n        return this;\n      }\n    }\n\n    _h[event].push({\n      h: handler,\n      one: true,\n      ctx: context || this\n    });\n\n    return this;\n  },\n\n  /**\n   * 绑定事件\n   * @param {string} event 事件名\n   * @param {Function} handler 事件处理函数\n   * @param {Object} [context]\n   */\n  on: function (event, handler, context) {\n    var _h = this._$handlers;\n\n    if (!handler || !event) {\n      return this;\n    }\n\n    if (!_h[event]) {\n      _h[event] = [];\n    }\n\n    for (var i = 0; i < _h[event].length; i++) {\n      if (_h[event][i].h === handler) {\n        return this;\n      }\n    }\n\n    _h[event].push({\n      h: handler,\n      one: false,\n      ctx: context || this\n    });\n\n    return this;\n  },\n\n  /**\n   * 是否绑定了事件\n   * @param  {string}  event\n   * @return {boolean}\n   */\n  isSilent: function (event) {\n    var _h = this._$handlers;\n    return _h[event] && _h[event].length;\n  },\n\n  /**\n   * 解绑事件\n   * @param {string} event 事件名\n   * @param {Function} [handler] 事件处理函数\n   */\n  off: function (event, handler) {\n    var _h = this._$handlers;\n\n    if (!event) {\n      this._$handlers = {};\n      return this;\n    }\n\n    if (handler) {\n      if (_h[event]) {\n        var newList = [];\n\n        for (var i = 0, l = _h[event].length; i < l; i++) {\n          if (_h[event][i]['h'] != handler) {\n            newList.push(_h[event][i]);\n          }\n        }\n\n        _h[event] = newList;\n      }\n\n      if (_h[event] && _h[event].length === 0) {\n        delete _h[event];\n      }\n    } else {\n      delete _h[event];\n    }\n\n    return this;\n  },\n\n  /**\n   * 事件分发\n   *\n   * @param {string} type 事件类型\n   */\n  trigger: function (type) {\n    if (this._$handlers[type]) {\n      var args = arguments;\n      var argLen = args.length;\n\n      if (argLen > 3) {\n        args = arrySlice.call(args, 1);\n      }\n\n      var _h = this._$handlers[type];\n      var len = _h.length;\n\n      for (var i = 0; i < len;) {\n        // Optimize advise from backbone\n        switch (argLen) {\n          case 1:\n            _h[i]['h'].call(_h[i]['ctx']);\n\n            break;\n\n          case 2:\n            _h[i]['h'].call(_h[i]['ctx'], args[1]);\n\n            break;\n\n          case 3:\n            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);\n\n            break;\n\n          default:\n            // have more than 2 given arguments\n            _h[i]['h'].apply(_h[i]['ctx'], args);\n\n            break;\n        }\n\n        if (_h[i]['one']) {\n          _h.splice(i, 1);\n\n          len--;\n        } else {\n          i++;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * 带有context的事件分发, 最后一个参数是事件回调的context\n   * @param {string} type 事件类型\n   */\n  triggerWithContext: function (type) {\n    if (this._$handlers[type]) {\n      var args = arguments;\n      var argLen = args.length;\n\n      if (argLen > 4) {\n        args = arrySlice.call(args, 1, args.length - 1);\n      }\n\n      var ctx = args[args.length - 1];\n      var _h = this._$handlers[type];\n      var len = _h.length;\n\n      for (var i = 0; i < len;) {\n        // Optimize advise from backbone\n        switch (argLen) {\n          case 1:\n            _h[i]['h'].call(ctx);\n\n            break;\n\n          case 2:\n            _h[i]['h'].call(ctx, args[1]);\n\n            break;\n\n          case 3:\n            _h[i]['h'].call(ctx, args[1], args[2]);\n\n            break;\n\n          default:\n            // have more than 2 given arguments\n            _h[i]['h'].apply(ctx, args);\n\n            break;\n        }\n\n        if (_h[i]['one']) {\n          _h.splice(i, 1);\n\n          len--;\n        } else {\n          i++;\n        }\n      }\n    }\n\n    return this;\n  }\n}; // 对象可以通过 onxxxx 绑定事件\n\n/**\n * @event module:zrender/mixin/Eventful#onclick\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmouseover\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmouseout\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmousemove\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmousewheel\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmousedown\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmouseup\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondrag\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondragstart\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondragend\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondragenter\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondragleave\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondragover\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondrop\n * @type {Function}\n * @default null\n */\n\nvar _default = Eventful;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/zrender/lib/mixin/Eventful.js"],"names":["arrySlice","Array","prototype","slice","Eventful","_$handlers","constructor","one","event","handler","context","_h","i","length","h","push","ctx","on","isSilent","off","newList","l","trigger","type","args","arguments","argLen","call","len","apply","splice","triggerWithContext","_default","module","exports"],"mappings":"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","sourcesContent":["/**\n * 事件扩展\n * @module zrender/mixin/Eventful\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\nvar arrySlice = Array.prototype.slice;\n/**\n * 事件分发器\n * @alias module:zrender/mixin/Eventful\n * @constructor\n */\n\nvar Eventful = function () {\n  this._$handlers = {};\n};\n\nEventful.prototype = {\n  constructor: Eventful,\n\n  /**\n   * 单次触发绑定，trigger后销毁\n   *\n   * @param {string} event 事件名\n   * @param {Function} handler 响应函数\n   * @param {Object} context\n   */\n  one: function (event, handler, context) {\n    var _h = this._$handlers;\n\n    if (!handler || !event) {\n      return this;\n    }\n\n    if (!_h[event]) {\n      _h[event] = [];\n    }\n\n    for (var i = 0; i < _h[event].length; i++) {\n      if (_h[event][i].h === handler) {\n        return this;\n      }\n    }\n\n    _h[event].push({\n      h: handler,\n      one: true,\n      ctx: context || this\n    });\n\n    return this;\n  },\n\n  /**\n   * 绑定事件\n   * @param {string} event 事件名\n   * @param {Function} handler 事件处理函数\n   * @param {Object} [context]\n   */\n  on: function (event, handler, context) {\n    var _h = this._$handlers;\n\n    if (!handler || !event) {\n      return this;\n    }\n\n    if (!_h[event]) {\n      _h[event] = [];\n    }\n\n    for (var i = 0; i < _h[event].length; i++) {\n      if (_h[event][i].h === handler) {\n        return this;\n      }\n    }\n\n    _h[event].push({\n      h: handler,\n      one: false,\n      ctx: context || this\n    });\n\n    return this;\n  },\n\n  /**\n   * 是否绑定了事件\n   * @param  {string}  event\n   * @return {boolean}\n   */\n  isSilent: function (event) {\n    var _h = this._$handlers;\n    return _h[event] && _h[event].length;\n  },\n\n  /**\n   * 解绑事件\n   * @param {string} event 事件名\n   * @param {Function} [handler] 事件处理函数\n   */\n  off: function (event, handler) {\n    var _h = this._$handlers;\n\n    if (!event) {\n      this._$handlers = {};\n      return this;\n    }\n\n    if (handler) {\n      if (_h[event]) {\n        var newList = [];\n\n        for (var i = 0, l = _h[event].length; i < l; i++) {\n          if (_h[event][i]['h'] != handler) {\n            newList.push(_h[event][i]);\n          }\n        }\n\n        _h[event] = newList;\n      }\n\n      if (_h[event] && _h[event].length === 0) {\n        delete _h[event];\n      }\n    } else {\n      delete _h[event];\n    }\n\n    return this;\n  },\n\n  /**\n   * 事件分发\n   *\n   * @param {string} type 事件类型\n   */\n  trigger: function (type) {\n    if (this._$handlers[type]) {\n      var args = arguments;\n      var argLen = args.length;\n\n      if (argLen > 3) {\n        args = arrySlice.call(args, 1);\n      }\n\n      var _h = this._$handlers[type];\n      var len = _h.length;\n\n      for (var i = 0; i < len;) {\n        // Optimize advise from backbone\n        switch (argLen) {\n          case 1:\n            _h[i]['h'].call(_h[i]['ctx']);\n\n            break;\n\n          case 2:\n            _h[i]['h'].call(_h[i]['ctx'], args[1]);\n\n            break;\n\n          case 3:\n            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);\n\n            break;\n\n          default:\n            // have more than 2 given arguments\n            _h[i]['h'].apply(_h[i]['ctx'], args);\n\n            break;\n        }\n\n        if (_h[i]['one']) {\n          _h.splice(i, 1);\n\n          len--;\n        } else {\n          i++;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * 带有context的事件分发, 最后一个参数是事件回调的context\n   * @param {string} type 事件类型\n   */\n  triggerWithContext: function (type) {\n    if (this._$handlers[type]) {\n      var args = arguments;\n      var argLen = args.length;\n\n      if (argLen > 4) {\n        args = arrySlice.call(args, 1, args.length - 1);\n      }\n\n      var ctx = args[args.length - 1];\n      var _h = this._$handlers[type];\n      var len = _h.length;\n\n      for (var i = 0; i < len;) {\n        // Optimize advise from backbone\n        switch (argLen) {\n          case 1:\n            _h[i]['h'].call(ctx);\n\n            break;\n\n          case 2:\n            _h[i]['h'].call(ctx, args[1]);\n\n            break;\n\n          case 3:\n            _h[i]['h'].call(ctx, args[1], args[2]);\n\n            break;\n\n          default:\n            // have more than 2 given arguments\n            _h[i]['h'].apply(ctx, args);\n\n            break;\n        }\n\n        if (_h[i]['one']) {\n          _h.splice(i, 1);\n\n          len--;\n        } else {\n          i++;\n        }\n      }\n    }\n\n    return this;\n  }\n}; // 对象可以通过 onxxxx 绑定事件\n\n/**\n * @event module:zrender/mixin/Eventful#onclick\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmouseover\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmouseout\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmousemove\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmousewheel\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmousedown\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#onmouseup\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondrag\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondragstart\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondragend\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondragenter\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondragleave\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondragover\n * @type {Function}\n * @default null\n */\n\n/**\n * @event module:zrender/mixin/Eventful#ondrop\n * @type {Function}\n * @default null\n */\n\nvar _default = Eventful;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}