{"ast":null,"code":"var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar LineDraw = require(\"../helper/LineDraw\");\n\nvar EffectLine = require(\"../helper/EffectLine\");\n\nvar Line = require(\"../helper/Line\");\n\nvar Polyline = require(\"../helper/Polyline\");\n\nvar EffectPolyline = require(\"../helper/EffectPolyline\");\n\nvar LargeLineDraw = require(\"../helper/LargeLineDraw\");\n\nvar _default = echarts.extendChartView({\n  type: 'lines',\n  init: function () {},\n  render: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var lineDraw = this._lineDraw;\n    var hasEffect = seriesModel.get('effect.show');\n    var isPolyline = seriesModel.get('polyline');\n    var isLarge = seriesModel.get('large') && data.count() >= seriesModel.get('largeThreshold');\n\n    if (hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLarge !== this._isLarge) {\n      if (lineDraw) {\n        lineDraw.remove();\n      }\n\n      lineDraw = this._lineDraw = isLarge ? new LargeLineDraw() : new LineDraw(isPolyline ? hasEffect ? EffectPolyline : Polyline : hasEffect ? EffectLine : Line);\n      this._hasEffet = hasEffect;\n      this._isPolyline = isPolyline;\n      this._isLarge = isLarge;\n    }\n\n    var zlevel = seriesModel.get('zlevel');\n    var trailLength = seriesModel.get('effect.trailLength');\n    var zr = api.getZr(); // Avoid the drag cause ghost shadow\n    // FIXME Better way ?\n    // SVG doesn't support\n\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg) {\n      zr.painter.getLayer(zlevel).clear(true);\n    } // Config layer with motion blur\n\n\n    if (this._lastZlevel != null && !isSvg) {\n      zr.configLayer(this._lastZlevel, {\n        motionBlur: false\n      });\n    }\n\n    if (hasEffect && trailLength) {\n      if (!isSvg) {\n        zr.configLayer(zlevel, {\n          motionBlur: true,\n          lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)\n        });\n      }\n    }\n\n    this.group.add(lineDraw.group);\n    lineDraw.updateData(data);\n    this._lastZlevel = zlevel;\n  },\n  updateLayout: function (seriesModel, ecModel, api) {\n    this._lineDraw.updateLayout(seriesModel); // Not use motion when dragging or zooming\n\n\n    var zr = api.getZr();\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg) {\n      zr.painter.getLayer(this._lastZlevel).clear(true);\n    }\n  },\n  remove: function (ecModel, api) {\n    this._lineDraw && this._lineDraw.remove(api, true); // Clear motion when lineDraw is removed\n\n    var zr = api.getZr();\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg) {\n      zr.painter.getLayer(this._lastZlevel).clear(true);\n    }\n  },\n  dispose: function () {}\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/lines/LinesView.js"],"names":["_config","require","__DEV__","echarts","LineDraw","EffectLine","Line","Polyline","EffectPolyline","LargeLineDraw","_default","extendChartView","type","init","render","seriesModel","ecModel","api","data","getData","lineDraw","_lineDraw","hasEffect","get","isPolyline","isLarge","count","_hasEffet","_isPolyline","_isLarge","remove","zlevel","trailLength","zr","getZr","isSvg","painter","getType","getLayer","clear","_lastZlevel","configLayer","motionBlur","lastFrameAlpha","Math","max","min","group","add","updateData","updateLayout","dispose","module","exports"],"mappings":"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","sourcesContent":["var _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar LineDraw = require(\"../helper/LineDraw\");\n\nvar EffectLine = require(\"../helper/EffectLine\");\n\nvar Line = require(\"../helper/Line\");\n\nvar Polyline = require(\"../helper/Polyline\");\n\nvar EffectPolyline = require(\"../helper/EffectPolyline\");\n\nvar LargeLineDraw = require(\"../helper/LargeLineDraw\");\n\nvar _default = echarts.extendChartView({\n  type: 'lines',\n  init: function () {},\n  render: function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var lineDraw = this._lineDraw;\n    var hasEffect = seriesModel.get('effect.show');\n    var isPolyline = seriesModel.get('polyline');\n    var isLarge = seriesModel.get('large') && data.count() >= seriesModel.get('largeThreshold');\n\n    if (hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLarge !== this._isLarge) {\n      if (lineDraw) {\n        lineDraw.remove();\n      }\n\n      lineDraw = this._lineDraw = isLarge ? new LargeLineDraw() : new LineDraw(isPolyline ? hasEffect ? EffectPolyline : Polyline : hasEffect ? EffectLine : Line);\n      this._hasEffet = hasEffect;\n      this._isPolyline = isPolyline;\n      this._isLarge = isLarge;\n    }\n\n    var zlevel = seriesModel.get('zlevel');\n    var trailLength = seriesModel.get('effect.trailLength');\n    var zr = api.getZr(); // Avoid the drag cause ghost shadow\n    // FIXME Better way ?\n    // SVG doesn't support\n\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg) {\n      zr.painter.getLayer(zlevel).clear(true);\n    } // Config layer with motion blur\n\n\n    if (this._lastZlevel != null && !isSvg) {\n      zr.configLayer(this._lastZlevel, {\n        motionBlur: false\n      });\n    }\n\n    if (hasEffect && trailLength) {\n      if (!isSvg) {\n        zr.configLayer(zlevel, {\n          motionBlur: true,\n          lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)\n        });\n      }\n    }\n\n    this.group.add(lineDraw.group);\n    lineDraw.updateData(data);\n    this._lastZlevel = zlevel;\n  },\n  updateLayout: function (seriesModel, ecModel, api) {\n    this._lineDraw.updateLayout(seriesModel); // Not use motion when dragging or zooming\n\n\n    var zr = api.getZr();\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg) {\n      zr.painter.getLayer(this._lastZlevel).clear(true);\n    }\n  },\n  remove: function (ecModel, api) {\n    this._lineDraw && this._lineDraw.remove(api, true); // Clear motion when lineDraw is removed\n\n    var zr = api.getZr();\n    var isSvg = zr.painter.getType() === 'svg';\n\n    if (!isSvg) {\n      zr.painter.getLayer(this._lastZlevel).clear(true);\n    }\n  },\n  dispose: function () {}\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}