{"ast":null,"code":"var util = require(\"../core/util\");\n\nvar _event = require(\"../core/event\");\n\nvar Dispatcher = _event.Dispatcher;\n\nvar requestAnimationFrame = require(\"./requestAnimationFrame\");\n\nvar Animator = require(\"./Animator\");\n/**\n * 动画主类, 调度和管理所有动画控制器\n *\n * @module zrender/animation/Animation\n * @author pissang(https://github.com/pissang)\n */\n// TODO Additive animation\n// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\n// https://developer.apple.com/videos/wwdc2014/#236\n\n/**\n * @typedef {Object} IZRenderStage\n * @property {Function} update\n */\n\n/**\n * @alias module:zrender/animation/Animation\n * @constructor\n * @param {Object} [options]\n * @param {Function} [options.onframe]\n * @param {IZRenderStage} [options.stage]\n * @example\n *     var animation = new Animation();\n *     var obj = {\n *         x: 100,\n *         y: 100\n *     };\n *     animation.animate(node.position)\n *         .when(1000, {\n *             x: 500,\n *             y: 500\n *         })\n *         .when(2000, {\n *             x: 100,\n *             y: 100\n *         })\n *         .start('spline');\n */\n\n\nvar Animation = function (options) {\n  options = options || {};\n  this.stage = options.stage || {};\n\n  this.onframe = options.onframe || function () {}; // private properties\n\n\n  this._clips = [];\n  this._running = false;\n  this._time;\n  this._pausedTime;\n  this._pauseStart;\n  this._paused = false;\n  Dispatcher.call(this);\n};\n\nAnimation.prototype = {\n  constructor: Animation,\n\n  /**\n   * 添加 clip\n   * @param {module:zrender/animation/Clip} clip\n   */\n  addClip: function (clip) {\n    this._clips.push(clip);\n  },\n\n  /**\n   * 添加 animator\n   * @param {module:zrender/animation/Animator} animator\n   */\n  addAnimator: function (animator) {\n    animator.animation = this;\n    var clips = animator.getClips();\n\n    for (var i = 0; i < clips.length; i++) {\n      this.addClip(clips[i]);\n    }\n  },\n\n  /**\n   * 删除动画片段\n   * @param {module:zrender/animation/Clip} clip\n   */\n  removeClip: function (clip) {\n    var idx = util.indexOf(this._clips, clip);\n\n    if (idx >= 0) {\n      this._clips.splice(idx, 1);\n    }\n  },\n\n  /**\n   * 删除动画片段\n   * @param {module:zrender/animation/Animator} animator\n   */\n  removeAnimator: function (animator) {\n    var clips = animator.getClips();\n\n    for (var i = 0; i < clips.length; i++) {\n      this.removeClip(clips[i]);\n    }\n\n    animator.animation = null;\n  },\n  _update: function () {\n    var time = new Date().getTime() - this._pausedTime;\n\n    var delta = time - this._time;\n    var clips = this._clips;\n    var len = clips.length;\n    var deferredEvents = [];\n    var deferredClips = [];\n\n    for (var i = 0; i < len; i++) {\n      var clip = clips[i];\n      var e = clip.step(time, delta); // Throw out the events need to be called after\n      // stage.update, like destroy\n\n      if (e) {\n        deferredEvents.push(e);\n        deferredClips.push(clip);\n      }\n    } // Remove the finished clip\n\n\n    for (var i = 0; i < len;) {\n      if (clips[i]._needsRemove) {\n        clips[i] = clips[len - 1];\n        clips.pop();\n        len--;\n      } else {\n        i++;\n      }\n    }\n\n    len = deferredEvents.length;\n\n    for (var i = 0; i < len; i++) {\n      deferredClips[i].fire(deferredEvents[i]);\n    }\n\n    this._time = time;\n    this.onframe(delta);\n    this.trigger('frame', delta);\n\n    if (this.stage.update) {\n      this.stage.update();\n    }\n  },\n  _startLoop: function () {\n    var self = this;\n    this._running = true;\n\n    function step() {\n      if (self._running) {\n        requestAnimationFrame(step);\n        !self._paused && self._update();\n      }\n    }\n\n    requestAnimationFrame(step);\n  },\n\n  /**\n   * 开始运行动画\n   */\n  start: function () {\n    this._time = new Date().getTime();\n    this._pausedTime = 0;\n\n    this._startLoop();\n  },\n\n  /**\n   * 停止运行动画\n   */\n  stop: function () {\n    this._running = false;\n  },\n\n  /**\n   * Pause\n   */\n  pause: function () {\n    if (!this._paused) {\n      this._pauseStart = new Date().getTime();\n      this._paused = true;\n    }\n  },\n\n  /**\n   * Resume\n   */\n  resume: function () {\n    if (this._paused) {\n      this._pausedTime += new Date().getTime() - this._pauseStart;\n      this._paused = false;\n    }\n  },\n\n  /**\n   * 清除所有动画片段\n   */\n  clear: function () {\n    this._clips = [];\n  },\n\n  /**\n   * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画\n   * @param  {Object} target\n   * @param  {Object} options\n   * @param  {boolean} [options.loop=false] 是否循环播放动画\n   * @param  {Function} [options.getter=null]\n   *         如果指定getter函数，会通过getter函数取属性值\n   * @param  {Function} [options.setter=null]\n   *         如果指定setter函数，会通过setter函数设置属性值\n   * @return {module:zrender/animation/Animation~Animator}\n   */\n  // TODO Gap\n  animate: function (target, options) {\n    options = options || {};\n    var animator = new Animator(target, options.loop, options.getter, options.setter);\n    this.addAnimator(animator);\n    return animator;\n  }\n};\nutil.mixin(Animation, Dispatcher);\nvar _default = Animation;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/zrender/lib/animation/Animation.js"],"names":["util","require","_event","Dispatcher","requestAnimationFrame","Animator","Animation","options","stage","onframe","_clips","_running","_time","_pausedTime","_pauseStart","_paused","call","prototype","constructor","addClip","clip","push","addAnimator","animator","animation","clips","getClips","i","length","removeClip","idx","indexOf","splice","removeAnimator","_update","time","Date","getTime","delta","len","deferredEvents","deferredClips","e","step","_needsRemove","pop","fire","trigger","update","_startLoop","self","start","stop","pause","resume","clear","animate","target","loop","getter","setter","mixin","_default","module","exports"],"mappings":"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","sourcesContent":["var util = require(\"../core/util\");\n\nvar _event = require(\"../core/event\");\n\nvar Dispatcher = _event.Dispatcher;\n\nvar requestAnimationFrame = require(\"./requestAnimationFrame\");\n\nvar Animator = require(\"./Animator\");\n\n/**\n * 动画主类, 调度和管理所有动画控制器\n *\n * @module zrender/animation/Animation\n * @author pissang(https://github.com/pissang)\n */\n// TODO Additive animation\n// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\n// https://developer.apple.com/videos/wwdc2014/#236\n\n/**\n * @typedef {Object} IZRenderStage\n * @property {Function} update\n */\n\n/**\n * @alias module:zrender/animation/Animation\n * @constructor\n * @param {Object} [options]\n * @param {Function} [options.onframe]\n * @param {IZRenderStage} [options.stage]\n * @example\n *     var animation = new Animation();\n *     var obj = {\n *         x: 100,\n *         y: 100\n *     };\n *     animation.animate(node.position)\n *         .when(1000, {\n *             x: 500,\n *             y: 500\n *         })\n *         .when(2000, {\n *             x: 100,\n *             y: 100\n *         })\n *         .start('spline');\n */\nvar Animation = function (options) {\n  options = options || {};\n  this.stage = options.stage || {};\n\n  this.onframe = options.onframe || function () {}; // private properties\n\n\n  this._clips = [];\n  this._running = false;\n  this._time;\n  this._pausedTime;\n  this._pauseStart;\n  this._paused = false;\n  Dispatcher.call(this);\n};\n\nAnimation.prototype = {\n  constructor: Animation,\n\n  /**\n   * 添加 clip\n   * @param {module:zrender/animation/Clip} clip\n   */\n  addClip: function (clip) {\n    this._clips.push(clip);\n  },\n\n  /**\n   * 添加 animator\n   * @param {module:zrender/animation/Animator} animator\n   */\n  addAnimator: function (animator) {\n    animator.animation = this;\n    var clips = animator.getClips();\n\n    for (var i = 0; i < clips.length; i++) {\n      this.addClip(clips[i]);\n    }\n  },\n\n  /**\n   * 删除动画片段\n   * @param {module:zrender/animation/Clip} clip\n   */\n  removeClip: function (clip) {\n    var idx = util.indexOf(this._clips, clip);\n\n    if (idx >= 0) {\n      this._clips.splice(idx, 1);\n    }\n  },\n\n  /**\n   * 删除动画片段\n   * @param {module:zrender/animation/Animator} animator\n   */\n  removeAnimator: function (animator) {\n    var clips = animator.getClips();\n\n    for (var i = 0; i < clips.length; i++) {\n      this.removeClip(clips[i]);\n    }\n\n    animator.animation = null;\n  },\n  _update: function () {\n    var time = new Date().getTime() - this._pausedTime;\n\n    var delta = time - this._time;\n    var clips = this._clips;\n    var len = clips.length;\n    var deferredEvents = [];\n    var deferredClips = [];\n\n    for (var i = 0; i < len; i++) {\n      var clip = clips[i];\n      var e = clip.step(time, delta); // Throw out the events need to be called after\n      // stage.update, like destroy\n\n      if (e) {\n        deferredEvents.push(e);\n        deferredClips.push(clip);\n      }\n    } // Remove the finished clip\n\n\n    for (var i = 0; i < len;) {\n      if (clips[i]._needsRemove) {\n        clips[i] = clips[len - 1];\n        clips.pop();\n        len--;\n      } else {\n        i++;\n      }\n    }\n\n    len = deferredEvents.length;\n\n    for (var i = 0; i < len; i++) {\n      deferredClips[i].fire(deferredEvents[i]);\n    }\n\n    this._time = time;\n    this.onframe(delta);\n    this.trigger('frame', delta);\n\n    if (this.stage.update) {\n      this.stage.update();\n    }\n  },\n  _startLoop: function () {\n    var self = this;\n    this._running = true;\n\n    function step() {\n      if (self._running) {\n        requestAnimationFrame(step);\n        !self._paused && self._update();\n      }\n    }\n\n    requestAnimationFrame(step);\n  },\n\n  /**\n   * 开始运行动画\n   */\n  start: function () {\n    this._time = new Date().getTime();\n    this._pausedTime = 0;\n\n    this._startLoop();\n  },\n\n  /**\n   * 停止运行动画\n   */\n  stop: function () {\n    this._running = false;\n  },\n\n  /**\n   * Pause\n   */\n  pause: function () {\n    if (!this._paused) {\n      this._pauseStart = new Date().getTime();\n      this._paused = true;\n    }\n  },\n\n  /**\n   * Resume\n   */\n  resume: function () {\n    if (this._paused) {\n      this._pausedTime += new Date().getTime() - this._pauseStart;\n      this._paused = false;\n    }\n  },\n\n  /**\n   * 清除所有动画片段\n   */\n  clear: function () {\n    this._clips = [];\n  },\n\n  /**\n   * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画\n   * @param  {Object} target\n   * @param  {Object} options\n   * @param  {boolean} [options.loop=false] 是否循环播放动画\n   * @param  {Function} [options.getter=null]\n   *         如果指定getter函数，会通过getter函数取属性值\n   * @param  {Function} [options.setter=null]\n   *         如果指定setter函数，会通过setter函数设置属性值\n   * @return {module:zrender/animation/Animation~Animator}\n   */\n  // TODO Gap\n  animate: function (target, options) {\n    options = options || {};\n    var animator = new Animator(target, options.loop, options.getter, options.setter);\n    this.addAnimator(animator);\n    return animator;\n  }\n};\nutil.mixin(Animation, Dispatcher);\nvar _default = Animation;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}