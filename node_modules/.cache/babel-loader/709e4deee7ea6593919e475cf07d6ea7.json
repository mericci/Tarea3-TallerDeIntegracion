{"ast":null,"code":"var _jsxFileName = \"/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart.jsx\";\nimport React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nam4core.useTheme(am4themes_animated);\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.boxRef = React.createRef();\n    this.state = {};\n  }\n\n  componentDidMount() {\n    let chart = am4core.create(this.props.company, am4charts.XYChart);\n    chart.data = this.props.data;\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n    dateAxis.color = \"#FFF\";\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n    series.tooltipText = \"{valueY.value}\";\n    chart.cursor = new am4charts.XYCursor();\n    this.chart = chart;\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(prevProps.data);\n\n    if (this.props.data !== prevProps.data) {\n      this.chart.data = this.props.data;\n    }\n  }\n\n  render() {\n    // // let option = {\n    // //     title: {\n    // //         text: this.props.title,\n    // //         textStyle: {\n    // //             color: '#FFF'\n    // //         }\n    // //     },\n    // //     tooltip: {\n    // //         trigger: 'axis',\n    // //         // formatter: function (params) {\n    // //         //     params = params[0];\n    // //         //     var date = new Date(params.name);\n    // //         //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n    // //         // },\n    // //         axisPointer: {\n    // //             animation: false\n    // //         }\n    // //     },\n    // //     xAxis: {\n    // //         type: 'time',\n    // //         splitLine: {\n    // //             show: false\n    // //         },\n    // //         axisLine: {\n    // //             lineStyle: {\n    // //                 color: '#FFF'\n    // //             }\n    // //         }\n    // //     },\n    // //     yAxis: {\n    // //         type: 'value',\n    // //         boundaryGap: [0, '100%'],\n    // //         splitLine: {\n    // //             show: false\n    // //         },\n    // //         axisLine: {\n    // //             lineStyle: {\n    // //                 color: '#FFF'\n    // //             }\n    // //         }\n    // //     },\n    // //     series: [{\n    // //         name: 'CHART',\n    // //         type: 'line',\n    // //         showSymbol: false,\n    // //         hoverAnimation: false,\n    // //         data: this.props.data\n    // //     }]\n    // // };\n    // const setInterval = () => {\n    //     //console.log(this.boxRef)\n    //     let charts = echarts.init(document.getElementById('chart')); //ref={this.boxRef} this.boxRef.current\n    //     this.option.series[0].data = this.props.data;\n    //     charts.setOption(this.option);\n    // }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: this.props.company,\n      style: {\n        width: \"90%\",\n        height: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\n;\nexport default Chart;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart.jsx"],"names":["React","Component","ReactEcharts","echarts","am4core","am4charts","am4themes_animated","useTheme","Chart","constructor","props","boxRef","createRef","state","componentDidMount","chart","create","company","XYChart","data","dateAxis","xAxes","push","DateAxis","renderer","grid","template","location","color","valueAxis","yAxes","ValueAxis","tooltip","disabled","minWidth","series","LineSeries","dataFields","dateX","valueY","tooltipText","cursor","XYCursor","componentDidUpdate","prevProps","console","log","render","width","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\n\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n        this.boxRef = React.createRef();\n        this.state = {\n\n        };    \n    };\n\n    componentDidMount() {\n        let chart = am4core.create(this.props.company, am4charts.XYChart);\n        \n        chart.data = this.props.data;\n\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n        dateAxis.renderer.grid.template.location = 0;\n        dateAxis.color= \"#FFF\";\n    \n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n        valueAxis.tooltip.disabled = true;\n        valueAxis.renderer.minWidth = 35;\n    \n        let series = chart.series.push(new am4charts.LineSeries());\n        series.dataFields.dateX = \"date\";\n        series.dataFields.valueY = \"value\";\n    \n        series.tooltipText = \"{valueY.value}\";\n        chart.cursor = new am4charts.XYCursor();\n    \n        this.chart = chart;\n    };\n    \n\n    componentDidUpdate(prevProps) {\n        console.log(prevProps.data)\n        if (this.props.data !== prevProps.data) {\n            this.chart.data = this.props.data\n\n        }\n    }\n\n        \n    render() {\n    \n        // // let option = {\n        // //     title: {\n        // //         text: this.props.title,\n        // //         textStyle: {\n        // //             color: '#FFF'\n        // //         }\n        // //     },\n        // //     tooltip: {\n        // //         trigger: 'axis',\n        // //         // formatter: function (params) {\n        // //         //     params = params[0];\n        // //         //     var date = new Date(params.name);\n        // //         //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n        // //         // },\n        // //         axisPointer: {\n        // //             animation: false\n        // //         }\n        // //     },\n        // //     xAxis: {\n        // //         type: 'time',\n        // //         splitLine: {\n        // //             show: false\n        // //         },\n        // //         axisLine: {\n        // //             lineStyle: {\n        // //                 color: '#FFF'\n        // //             }\n        // //         }\n        // //     },\n        // //     yAxis: {\n        // //         type: 'value',\n        // //         boundaryGap: [0, '100%'],\n        // //         splitLine: {\n        // //             show: false\n        // //         },\n        // //         axisLine: {\n        // //             lineStyle: {\n        // //                 color: '#FFF'\n        // //             }\n        // //         }\n        // //     },\n        // //     series: [{\n        // //         name: 'CHART',\n        // //         type: 'line',\n        // //         showSymbol: false,\n        // //         hoverAnimation: false,\n        // //         data: this.props.data\n        // //     }]\n        // // };\n\n        // const setInterval = () => {\n        //     //console.log(this.boxRef)\n        //     let charts = echarts.init(document.getElementById('chart')); //ref={this.boxRef} this.boxRef.current\n        //     this.option.series[0].data = this.props.data;\n        \n        //     charts.setOption(this.option);\n        // }\n        \n        return (\n            <div>\n                <div id={this.props.company} style={{ width: \"90%\", height: '300px' }}></div>\n                {/* <div id=\"chart\" >\n                    <ReactEcharts\n                        ref={this.boxRef}\n                        option={this.option}\n                        style={{height: 360}}\n                        opts={{renderer: 'svg'}}\n                        onChartReady={setInterval}\n                        notMerge={true}\n                        lazyUpdate={true}\n    \n                    /> \n                </div> */}\n            </div>\n        );\n    }\n\n};\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}