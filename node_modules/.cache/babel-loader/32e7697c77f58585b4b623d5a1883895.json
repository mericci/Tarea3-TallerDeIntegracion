{"ast":null,"code":"var _jsxFileName = \"/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart2.jsx\";\nimport React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\n\nclass Chart2 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getoption = () => {\n      return {\n        title: {// text: this.props.title,\n          // textStyle: {\n          //     color: '#FFF'\n          // }\n        },\n        tooltip: {\n          trigger: 'axis',\n          //  formatter: function (params) {\n          //      params = params[0];\n          //      return 'hola:' + params.value[1];\n          //  },\n          axisPointer: {\n            animation: false\n          },\n          show: true\n        },\n        xAxis: {\n          type: 'time',\n          splitLine: {\n            show: false\n          },\n          axisLine: {\n            lineStyle: {\n              color: '#FFF'\n            }\n          }\n        },\n        yAxis: {\n          type: 'value',\n          boundaryGap: [0, '100%'],\n          splitLine: {\n            show: false\n          },\n          axisLine: {\n            lineStyle: {\n              color: '#FFF'\n            }\n          }\n        },\n        series: [{\n          name: this.props.ticker,\n          type: 'line',\n          showSymbol: false,\n          hoverAnimation: false,\n          data: this.props.prueba\n        }]\n      };\n    };\n\n    this.option = {\n      title: {// text: this.props.title,\n        // textStyle: {\n        //     color: '#FFF'\n        // }\n      },\n      tooltip: {\n        trigger: 'axis',\n        //  formatter: function (params) {\n        //      params = params[0];\n        //      return 'hola:' + params.value[1];\n        //  },\n        axisPointer: {\n          animation: false\n        },\n        show: true\n      },\n      xAxis: {\n        type: 'time',\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#FFF'\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: [0, '100%'],\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#FFF'\n          }\n        }\n      },\n      series: [{\n        name: this.props.ticker,\n        type: 'line',\n        showSymbol: false,\n        hoverAnimation: false,\n        data: this.props.prueba\n      }]\n    };\n    this.boxRef = React.createRef();\n    this.state = {};\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps) {\n    if (this.props.prueba !== prevProps.prueba) {//let charts = echarts.init(document.getElementById(this.boxRef));\n      //this.option.series[0].data = this.props.prueba;\n      //this.boxRef.current.props.setOption(this.option)\n    }\n  }\n\n  render() {\n    const Chart = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(ReactEcharts, {\n      ref: ref,\n      option: this.getoption(),\n      style: {\n        height: 360\n      },\n      opts: {\n        renderer: 'svg'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }));\n\n    const setInterval = () => {\n      console.log(this.boxRef);\n      let charts = echarts.init(document.getElementById('chart')); //ref={this.boxRef} this.boxRef.current\n\n      this.option.series[0].data = this.props.data;\n      charts.setOption(this.option);\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Chart, {\n      id: \"chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\n;\nexport default Chart2;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart2.jsx"],"names":["React","Component","ReactEcharts","echarts","Chart2","constructor","props","getoption","title","tooltip","trigger","axisPointer","animation","show","xAxis","type","splitLine","axisLine","lineStyle","color","yAxis","boundaryGap","series","name","ticker","showSymbol","hoverAnimation","data","prueba","option","boxRef","createRef","state","componentDidMount","componentDidUpdate","prevProps","render","Chart","forwardRef","ref","height","renderer","setInterval","console","log","charts","init","document","getElementById","setOption"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\n\n\n\nclass Chart2 extends Component {\n    constructor(props){\n        super(props);\n        this.boxRef = React.createRef();\n        this.state = {\n\n        };    \n    };\n\n    getoption = () => {\n        return {\n        title: {\n            // text: this.props.title,\n            // textStyle: {\n            //     color: '#FFF'\n            // }\n        },\n        tooltip: {\n             trigger: 'axis',\n            //  formatter: function (params) {\n            //      params = params[0];\n            //      return 'hola:' + params.value[1];\n            //  },\n             axisPointer: {\n                animation: false\n            },\n            show: true\n        },\n        xAxis: {\n            type: 'time',\n            splitLine: {\n                show: false\n            },\n            axisLine: {\n                lineStyle: {\n                    color: '#FFF'\n                }\n            }\n        },\n        yAxis: {\n            type: 'value',\n            boundaryGap: [0, '100%'],\n            splitLine: {\n                show: false\n            },\n            axisLine: {\n                lineStyle: {\n                    color: '#FFF'\n                }\n            }\n        },\n        series: [{\n            name: this.props.ticker,\n            type: 'line',\n            showSymbol: false,\n            hoverAnimation: false,\n            data: this.props.prueba\n        }]\n    }\n    };\n\n    option = {\n        title: {\n            // text: this.props.title,\n            // textStyle: {\n            //     color: '#FFF'\n            // }\n        },\n        tooltip: {\n             trigger: 'axis',\n            //  formatter: function (params) {\n            //      params = params[0];\n            //      return 'hola:' + params.value[1];\n            //  },\n             axisPointer: {\n                animation: false\n            },\n            show: true\n        },\n        xAxis: {\n            type: 'time',\n            splitLine: {\n                show: false\n            },\n            axisLine: {\n                lineStyle: {\n                    color: '#FFF'\n                }\n            }\n        },\n        yAxis: {\n            type: 'value',\n            boundaryGap: [0, '100%'],\n            splitLine: {\n                show: false\n            },\n            axisLine: {\n                lineStyle: {\n                    color: '#FFF'\n                }\n            }\n        },\n        series: [{\n            name: this.props.ticker,\n            type: 'line',\n            showSymbol: false,\n            hoverAnimation: false,\n            data: this.props.prueba\n        }]\n    }\n\n\n\n    componentDidMount() {\n       \n    };\n    \n\n    componentDidUpdate(prevProps) {\n\n        if (this.props.prueba !== prevProps.prueba) {\n            //let charts = echarts.init(document.getElementById(this.boxRef));\n            //this.option.series[0].data = this.props.prueba;\n            //this.boxRef.current.props.setOption(this.option)\n            \n\n        }\n    }\n\n        \n    render() {\n\n        const Chart = React.forwardRef((props, ref) => (\n                <ReactEcharts\n                    ref={ref}\n                    option={this.getoption()}\n                    style={{height: 360}}\n                    opts={{renderer: 'svg'}}\n                /> \n            ))\n\n        const setInterval = () => {\n            console.log(this.boxRef)\n            let charts = echarts.init(document.getElementById('chart')); //ref={this.boxRef} this.boxRef.current\n            this.option.series[0].data = this.props.data;\n        \n            charts.setOption(this.option);\n        }\n        \n        return (\n            <div>\n                \n                <div>\n                    <Chart \n                        id='chart'\n                    />\n                    {/* <ReactEcharts\n                        ref={this.boxRef}\n                        option={this.getoption()}\n                        style={{height: 360}}\n                        opts={{renderer: 'svg'}}\n                    />  */}\n                </div>\n            </div>\n        );\n    }\n\n};\n\nexport default Chart2;"]},"metadata":{},"sourceType":"module"}