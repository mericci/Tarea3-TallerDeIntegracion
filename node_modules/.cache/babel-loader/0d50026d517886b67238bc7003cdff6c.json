{"ast":null,"code":"var vec2 = require(\"zrender/lib/core/vector\");\n\nfunction circularLayout(seriesModel) {\n  var coordSys = seriesModel.coordinateSystem;\n\n  if (coordSys && coordSys.type !== 'view') {\n    return;\n  }\n\n  var rect = coordSys.getBoundingRect();\n  var nodeData = seriesModel.getData();\n  var graph = nodeData.graph;\n  var angle = 0;\n  var sum = nodeData.getSum('value');\n  var unitAngle = Math.PI * 2 / (sum || nodeData.count());\n  var cx = rect.width / 2 + rect.x;\n  var cy = rect.height / 2 + rect.y;\n  var r = Math.min(rect.width, rect.height) / 2;\n  graph.eachNode(function (node) {\n    var value = node.getValue('value');\n    angle += unitAngle * (sum ? value : 1) / 2;\n    node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);\n    angle += unitAngle * (sum ? value : 1) / 2;\n  });\n  nodeData.setLayout({\n    cx: cx,\n    cy: cy\n  });\n  graph.eachEdge(function (edge) {\n    var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;\n    var p1 = vec2.clone(edge.node1.getLayout());\n    var p2 = vec2.clone(edge.node2.getLayout());\n    var cp1;\n    var x12 = (p1[0] + p2[0]) / 2;\n    var y12 = (p1[1] + p2[1]) / 2;\n\n    if (+curveness) {\n      curveness *= 3;\n      cp1 = [cx * curveness + x12 * (1 - curveness), cy * curveness + y12 * (1 - curveness)];\n    }\n\n    edge.setLayout([p1, p2, cp1]);\n  });\n}\n\nexports.circularLayout = circularLayout;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/graph/circularLayoutHelper.js"],"names":["vec2","require","circularLayout","seriesModel","coordSys","coordinateSystem","type","rect","getBoundingRect","nodeData","getData","graph","angle","sum","getSum","unitAngle","Math","PI","count","cx","width","x","cy","height","y","r","min","eachNode","node","value","getValue","setLayout","cos","sin","eachEdge","edge","curveness","getModel","get","p1","clone","node1","getLayout","p2","node2","cp1","x12","y12","exports"],"mappings":"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","sourcesContent":["var vec2 = require(\"zrender/lib/core/vector\");\n\nfunction circularLayout(seriesModel) {\n  var coordSys = seriesModel.coordinateSystem;\n\n  if (coordSys && coordSys.type !== 'view') {\n    return;\n  }\n\n  var rect = coordSys.getBoundingRect();\n  var nodeData = seriesModel.getData();\n  var graph = nodeData.graph;\n  var angle = 0;\n  var sum = nodeData.getSum('value');\n  var unitAngle = Math.PI * 2 / (sum || nodeData.count());\n  var cx = rect.width / 2 + rect.x;\n  var cy = rect.height / 2 + rect.y;\n  var r = Math.min(rect.width, rect.height) / 2;\n  graph.eachNode(function (node) {\n    var value = node.getValue('value');\n    angle += unitAngle * (sum ? value : 1) / 2;\n    node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);\n    angle += unitAngle * (sum ? value : 1) / 2;\n  });\n  nodeData.setLayout({\n    cx: cx,\n    cy: cy\n  });\n  graph.eachEdge(function (edge) {\n    var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;\n    var p1 = vec2.clone(edge.node1.getLayout());\n    var p2 = vec2.clone(edge.node2.getLayout());\n    var cp1;\n    var x12 = (p1[0] + p2[0]) / 2;\n    var y12 = (p1[1] + p2[1]) / 2;\n\n    if (+curveness) {\n      curveness *= 3;\n      cp1 = [cx * curveness + x12 * (1 - curveness), cy * curveness + y12 * (1 - curveness)];\n    }\n\n    edge.setLayout([p1, p2, cp1]);\n  });\n}\n\nexports.circularLayout = circularLayout;"]},"metadata":{},"sourceType":"script"}