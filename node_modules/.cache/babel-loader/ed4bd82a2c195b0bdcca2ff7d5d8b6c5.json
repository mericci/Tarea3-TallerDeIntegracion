{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar modelUtil = require(\"../../util/model\");\n\nvar modelHelper = require(\"./modelHelper\");\n\nvar findPointFromSeries = require(\"./findPointFromSeries\");\n\nvar each = zrUtil.each;\nvar curry = zrUtil.curry;\nvar get = modelUtil.makeGetter();\n/**\n * Basic logic: check all axis, if they do not demand show/highlight,\n * then hide/downplay them.\n *\n * @param {Object} coordSysAxesInfo\n * @param {Object} payload\n * @param {string} [payload.currTrigger] 'click' | 'mousemove' | 'leave'\n * @param {Array.<number>} [payload.x] x and y, which are mandatory, specify a point to\n *              trigger axisPointer and tooltip.\n * @param {Array.<number>} [payload.y] x and y, which are mandatory, specify a point to\n *              trigger axisPointer and tooltip.\n * @param {Object} [payload.seriesIndex] finder, optional, restrict target axes.\n * @param {Object} [payload.dataIndex] finder, restrict target axes.\n * @param {Object} [payload.axesInfo] finder, restrict target axes.\n *        [{\n *          axisDim: 'x'|'y'|'angle'|...,\n *          axisIndex: ...,\n *          value: ...\n *        }, ...]\n * @param {Function} [payload.dispatchAction]\n * @param {Object} [payload.tooltipOption]\n * @param {Object|Array.<number>|Function} [payload.position] Tooltip position,\n *        which can be specified in dispatchAction\n * @param {module:echarts/model/Global} ecModel\n * @param {module:echarts/ExtensionAPI} api\n * @return {Object} content of event obj for echarts.connect.\n */\n\nfunction _default(payload, ecModel, api) {\n  var currTrigger = payload.currTrigger;\n  var point = [payload.x, payload.y];\n  var finder = payload;\n  var dispatchAction = payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);\n  var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo; // Pending\n  // See #6121. But we are not able to reproduce it yet.\n\n  if (!coordSysAxesInfo) {\n    return;\n  }\n\n  if (illegalPoint(point)) {\n    // Used in the default behavior of `connection`: use the sample seriesIndex\n    // and dataIndex. And also used in the tooltipView trigger.\n    point = findPointFromSeries({\n      seriesIndex: finder.seriesIndex,\n      // Do not use dataIndexInside from other ec instance.\n      // FIXME: auto detect it?\n      dataIndex: finder.dataIndex\n    }, ecModel).point;\n  }\n\n  var isIllegalPoint = illegalPoint(point); // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).\n  // Notice: In this case, it is difficult to get the `point` (which is necessary to show\n  // tooltip, so if point is not given, we just use the point found by sample seriesIndex\n  // and dataIndex.\n\n  var inputAxesInfo = finder.axesInfo;\n  var axesInfo = coordSysAxesInfo.axesInfo;\n  var shouldHide = currTrigger === 'leave' || illegalPoint(point);\n  var outputFinder = {};\n  var showValueMap = {};\n  var dataByCoordSys = {\n    list: [],\n    map: {}\n  };\n  var updaters = {\n    showPointer: curry(showPointer, showValueMap),\n    showTooltip: curry(showTooltip, dataByCoordSys)\n  }; // Process for triggered axes.\n\n  each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {\n    // If a point given, it must be contained by the coordinate system.\n    var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);\n    each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {\n      var axis = axisInfo.axis;\n      var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo); // If no inputAxesInfo, no axis is restricted.\n\n      if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {\n        var val = inputAxisInfo && inputAxisInfo.value;\n\n        if (val == null && !isIllegalPoint) {\n          val = axis.pointToData(point);\n        }\n\n        val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);\n      }\n    });\n  }); // Process for linked axes.\n\n  var linkTriggers = {};\n  each(axesInfo, function (tarAxisInfo, tarKey) {\n    var linkGroup = tarAxisInfo.linkGroup; // If axis has been triggered in the previous stage, it should not be triggered by link.\n\n    if (linkGroup && !showValueMap[tarKey]) {\n      each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {\n        var srcValItem = showValueMap[srcKey]; // If srcValItem exist, source axis is triggered, so link to target axis.\n\n        if (srcAxisInfo !== tarAxisInfo && srcValItem) {\n          var val = srcValItem.value;\n          linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo))));\n          linkTriggers[tarAxisInfo.key] = val;\n        }\n      });\n    }\n  });\n  each(linkTriggers, function (val, tarKey) {\n    processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);\n  });\n  updateModelActually(showValueMap, axesInfo, outputFinder);\n  dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);\n  dispatchHighDownActually(axesInfo, dispatchAction, api);\n  return outputFinder;\n}\n\nfunction processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {\n  var axis = axisInfo.axis;\n\n  if (axis.scale.isBlank() || !axis.containData(newValue)) {\n    return;\n  }\n\n  if (!axisInfo.involveSeries) {\n    updaters.showPointer(axisInfo, newValue);\n    return;\n  } // Heavy calculation. So put it after axis.containData checking.\n\n\n  var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);\n  var payloadBatch = payloadInfo.payloadBatch;\n  var snapToValue = payloadInfo.snapToValue; // Fill content of event obj for echarts.connect.\n  // By defualt use the first involved series data as a sample to connect.\n\n  if (payloadBatch[0] && outputFinder.seriesIndex == null) {\n    zrUtil.extend(outputFinder, payloadBatch[0]);\n  } // If no linkSource input, this process is for collecting link\n  // target, where snap should not be accepted.\n\n\n  if (!dontSnap && axisInfo.snap) {\n    if (axis.containData(snapToValue) && snapToValue != null) {\n      newValue = snapToValue;\n    }\n  }\n\n  updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder); // Tooltip should always be snapToValue, otherwise there will be\n  // incorrect \"axis value ~ series value\" mapping displayed in tooltip.\n\n  updaters.showTooltip(axisInfo, payloadInfo, snapToValue);\n}\n\nfunction buildPayloadsBySeries(value, axisInfo) {\n  var axis = axisInfo.axis;\n  var dim = axis.dim;\n  var snapToValue = value;\n  var payloadBatch = [];\n  var minDist = Number.MAX_VALUE;\n  var minDiff = -1;\n  each(axisInfo.seriesModels, function (series, idx) {\n    var dataDim = series.coordDimToDataDim(dim);\n    var seriesNestestValue;\n    var dataIndices;\n\n    if (series.getAxisTooltipData) {\n      var result = series.getAxisTooltipData(dataDim, value, axis);\n      dataIndices = result.dataIndices;\n      seriesNestestValue = result.nestestValue;\n    } else {\n      dataIndices = series.getData().indicesOfNearest(dataDim[0], value, // Add a threshold to avoid find the wrong dataIndex\n      // when data length is not same.\n      false, axis.type === 'category' ? 0.5 : null);\n\n      if (!dataIndices.length) {\n        return;\n      }\n\n      seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);\n    }\n\n    if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {\n      return;\n    }\n\n    var diff = value - seriesNestestValue;\n    var dist = Math.abs(diff); // Consider category case\n\n    if (dist <= minDist) {\n      if (dist < minDist || diff >= 0 && minDiff < 0) {\n        minDist = dist;\n        minDiff = diff;\n        snapToValue = seriesNestestValue;\n        payloadBatch.length = 0;\n      }\n\n      each(dataIndices, function (dataIndex) {\n        payloadBatch.push({\n          seriesIndex: series.seriesIndex,\n          dataIndexInside: dataIndex,\n          dataIndex: series.getData().getRawIndex(dataIndex)\n        });\n      });\n    }\n  });\n  return {\n    payloadBatch: payloadBatch,\n    snapToValue: snapToValue\n  };\n}\n\nfunction showPointer(showValueMap, axisInfo, value, payloadBatch) {\n  showValueMap[axisInfo.key] = {\n    value: value,\n    payloadBatch: payloadBatch\n  };\n}\n\nfunction showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {\n  var payloadBatch = payloadInfo.payloadBatch;\n  var axis = axisInfo.axis;\n  var axisModel = axis.model;\n  var axisPointerModel = axisInfo.axisPointerModel; // If no data, do not create anything in dataByCoordSys,\n  // whose length will be used to judge whether dispatch action.\n\n  if (!axisInfo.triggerTooltip || !payloadBatch.length) {\n    return;\n  }\n\n  var coordSysModel = axisInfo.coordSys.model;\n  var coordSysKey = modelHelper.makeKey(coordSysModel);\n  var coordSysItem = dataByCoordSys.map[coordSysKey];\n\n  if (!coordSysItem) {\n    coordSysItem = dataByCoordSys.map[coordSysKey] = {\n      coordSysId: coordSysModel.id,\n      coordSysIndex: coordSysModel.componentIndex,\n      coordSysType: coordSysModel.type,\n      coordSysMainType: coordSysModel.mainType,\n      dataByAxis: []\n    };\n    dataByCoordSys.list.push(coordSysItem);\n  }\n\n  coordSysItem.dataByAxis.push({\n    axisDim: axis.dim,\n    axisIndex: axisModel.componentIndex,\n    axisType: axisModel.type,\n    axisId: axisModel.id,\n    value: value,\n    // Caustion: viewHelper.getValueLabel is actually on \"view stage\", which\n    // depends that all models have been updated. So it should not be performed\n    // here. Considering axisPointerModel used here is volatile, which is hard\n    // to be retrieve in TooltipView, we prepare parameters here.\n    valueLabelOpt: {\n      precision: axisPointerModel.get('label.precision'),\n      formatter: axisPointerModel.get('label.formatter')\n    },\n    seriesDataIndices: payloadBatch.slice()\n  });\n}\n\nfunction updateModelActually(showValueMap, axesInfo, outputFinder) {\n  var outputAxesInfo = outputFinder.axesInfo = []; // Basic logic: If no 'show' required, 'hide' this axisPointer.\n\n  each(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    var valItem = showValueMap[key];\n\n    if (valItem) {\n      !axisInfo.useHandle && (option.status = 'show');\n      option.value = valItem.value; // For label formatter param and highlight.\n\n      option.seriesDataIndices = (valItem.payloadBatch || []).slice();\n    } // When always show (e.g., handle used), remain\n    // original value and status.\n    else {\n        // If hide, value still need to be set, consider\n        // click legend to toggle axis blank.\n        !axisInfo.useHandle && (option.status = 'hide');\n      } // If status is 'hide', should be no info in payload.\n\n\n    option.status === 'show' && outputAxesInfo.push({\n      axisDim: axisInfo.axis.dim,\n      axisIndex: axisInfo.axis.model.componentIndex,\n      value: option.value\n    });\n  });\n}\n\nfunction dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {\n  // Basic logic: If no showTip required, hideTip will be dispatched.\n  if (illegalPoint(point) || !dataByCoordSys.list.length) {\n    dispatchAction({\n      type: 'hideTip'\n    });\n    return;\n  } // In most case only one axis (or event one series is used). It is\n  // convinient to fetch payload.seriesIndex and payload.dataIndex\n  // dirtectly. So put the first seriesIndex and dataIndex of the first\n  // axis on the payload.\n\n\n  var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};\n  dispatchAction({\n    type: 'showTip',\n    escapeConnect: true,\n    x: point[0],\n    y: point[1],\n    tooltipOption: payload.tooltipOption,\n    position: payload.position,\n    dataIndexInside: sampleItem.dataIndexInside,\n    dataIndex: sampleItem.dataIndex,\n    seriesIndex: sampleItem.seriesIndex,\n    dataByCoordSys: dataByCoordSys.list\n  });\n}\n\nfunction dispatchHighDownActually(axesInfo, dispatchAction, api) {\n  // FIXME\n  // highlight status modification shoule be a stage of main process?\n  // (Consider confilct (e.g., legend and axisPointer) and setOption)\n  var zr = api.getZr();\n  var highDownKey = 'axisPointerLastHighlights';\n  var lastHighlights = get(zr)[highDownKey] || {};\n  var newHighlights = get(zr)[highDownKey] = {}; // Update highlight/downplay status according to axisPointer model.\n  // Build hash map and remove duplicate incidentally.\n\n  each(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {\n      var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;\n      newHighlights[key] = batchItem;\n    });\n  }); // Diff.\n\n  var toHighlight = [];\n  var toDownplay = [];\n  zrUtil.each(lastHighlights, function (batchItem, key) {\n    !newHighlights[key] && toDownplay.push(batchItem);\n  });\n  zrUtil.each(newHighlights, function (batchItem, key) {\n    !lastHighlights[key] && toHighlight.push(batchItem);\n  });\n  toDownplay.length && api.dispatchAction({\n    type: 'downplay',\n    escapeConnect: true,\n    batch: toDownplay\n  });\n  toHighlight.length && api.dispatchAction({\n    type: 'highlight',\n    escapeConnect: true,\n    batch: toHighlight\n  });\n}\n\nfunction findInputAxisInfo(inputAxesInfo, axisInfo) {\n  for (var i = 0; i < (inputAxesInfo || []).length; i++) {\n    var inputAxisInfo = inputAxesInfo[i];\n\n    if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) {\n      return inputAxisInfo;\n    }\n  }\n}\n\nfunction makeMapperParam(axisInfo) {\n  var axisModel = axisInfo.axis.model;\n  var item = {};\n  var dim = item.axisDim = axisInfo.axis.dim;\n  item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;\n  item.axisName = item[dim + 'AxisName'] = axisModel.name;\n  item.axisId = item[dim + 'AxisId'] = axisModel.id;\n  return item;\n}\n\nfunction illegalPoint(point) {\n  return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/axisPointer/axisTrigger.js"],"names":["zrUtil","require","modelUtil","modelHelper","findPointFromSeries","each","curry","get","makeGetter","_default","payload","ecModel","api","currTrigger","point","x","y","finder","dispatchAction","bind","coordSysAxesInfo","getComponent","illegalPoint","seriesIndex","dataIndex","isIllegalPoint","inputAxesInfo","axesInfo","shouldHide","outputFinder","showValueMap","dataByCoordSys","list","map","updaters","showPointer","showTooltip","coordSysMap","coordSys","coordSysKey","coordSysContainsPoint","containPoint","axisInfo","key","axis","inputAxisInfo","findInputAxisInfo","val","value","pointToData","processOnAxis","linkTriggers","tarAxisInfo","tarKey","linkGroup","srcAxisInfo","srcKey","srcValItem","mapper","scale","parse","makeMapperParam","updateModelActually","dispatchTooltipActually","dispatchHighDownActually","newValue","dontSnap","isBlank","containData","involveSeries","payloadInfo","buildPayloadsBySeries","payloadBatch","snapToValue","extend","snap","dim","minDist","Number","MAX_VALUE","minDiff","seriesModels","series","idx","dataDim","coordDimToDataDim","seriesNestestValue","dataIndices","getAxisTooltipData","result","nestestValue","getData","indicesOfNearest","type","length","isFinite","diff","dist","Math","abs","push","dataIndexInside","getRawIndex","axisModel","model","axisPointerModel","triggerTooltip","coordSysModel","makeKey","coordSysItem","coordSysId","id","coordSysIndex","componentIndex","coordSysType","coordSysMainType","mainType","dataByAxis","axisDim","axisIndex","axisType","axisId","valueLabelOpt","precision","formatter","seriesDataIndices","slice","outputAxesInfo","option","valItem","useHandle","status","sampleItem","escapeConnect","tooltipOption","position","zr","getZr","highDownKey","lastHighlights","newHighlights","batchItem","toHighlight","toDownplay","batch","i","item","axisName","name","isNaN","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar modelUtil = require(\"../../util/model\");\n\nvar modelHelper = require(\"./modelHelper\");\n\nvar findPointFromSeries = require(\"./findPointFromSeries\");\n\nvar each = zrUtil.each;\nvar curry = zrUtil.curry;\nvar get = modelUtil.makeGetter();\n/**\n * Basic logic: check all axis, if they do not demand show/highlight,\n * then hide/downplay them.\n *\n * @param {Object} coordSysAxesInfo\n * @param {Object} payload\n * @param {string} [payload.currTrigger] 'click' | 'mousemove' | 'leave'\n * @param {Array.<number>} [payload.x] x and y, which are mandatory, specify a point to\n *              trigger axisPointer and tooltip.\n * @param {Array.<number>} [payload.y] x and y, which are mandatory, specify a point to\n *              trigger axisPointer and tooltip.\n * @param {Object} [payload.seriesIndex] finder, optional, restrict target axes.\n * @param {Object} [payload.dataIndex] finder, restrict target axes.\n * @param {Object} [payload.axesInfo] finder, restrict target axes.\n *        [{\n *          axisDim: 'x'|'y'|'angle'|...,\n *          axisIndex: ...,\n *          value: ...\n *        }, ...]\n * @param {Function} [payload.dispatchAction]\n * @param {Object} [payload.tooltipOption]\n * @param {Object|Array.<number>|Function} [payload.position] Tooltip position,\n *        which can be specified in dispatchAction\n * @param {module:echarts/model/Global} ecModel\n * @param {module:echarts/ExtensionAPI} api\n * @return {Object} content of event obj for echarts.connect.\n */\n\nfunction _default(payload, ecModel, api) {\n  var currTrigger = payload.currTrigger;\n  var point = [payload.x, payload.y];\n  var finder = payload;\n  var dispatchAction = payload.dispatchAction || zrUtil.bind(api.dispatchAction, api);\n  var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo; // Pending\n  // See #6121. But we are not able to reproduce it yet.\n\n  if (!coordSysAxesInfo) {\n    return;\n  }\n\n  if (illegalPoint(point)) {\n    // Used in the default behavior of `connection`: use the sample seriesIndex\n    // and dataIndex. And also used in the tooltipView trigger.\n    point = findPointFromSeries({\n      seriesIndex: finder.seriesIndex,\n      // Do not use dataIndexInside from other ec instance.\n      // FIXME: auto detect it?\n      dataIndex: finder.dataIndex\n    }, ecModel).point;\n  }\n\n  var isIllegalPoint = illegalPoint(point); // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).\n  // Notice: In this case, it is difficult to get the `point` (which is necessary to show\n  // tooltip, so if point is not given, we just use the point found by sample seriesIndex\n  // and dataIndex.\n\n  var inputAxesInfo = finder.axesInfo;\n  var axesInfo = coordSysAxesInfo.axesInfo;\n  var shouldHide = currTrigger === 'leave' || illegalPoint(point);\n  var outputFinder = {};\n  var showValueMap = {};\n  var dataByCoordSys = {\n    list: [],\n    map: {}\n  };\n  var updaters = {\n    showPointer: curry(showPointer, showValueMap),\n    showTooltip: curry(showTooltip, dataByCoordSys)\n  }; // Process for triggered axes.\n\n  each(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {\n    // If a point given, it must be contained by the coordinate system.\n    var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);\n    each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {\n      var axis = axisInfo.axis;\n      var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo); // If no inputAxesInfo, no axis is restricted.\n\n      if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {\n        var val = inputAxisInfo && inputAxisInfo.value;\n\n        if (val == null && !isIllegalPoint) {\n          val = axis.pointToData(point);\n        }\n\n        val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);\n      }\n    });\n  }); // Process for linked axes.\n\n  var linkTriggers = {};\n  each(axesInfo, function (tarAxisInfo, tarKey) {\n    var linkGroup = tarAxisInfo.linkGroup; // If axis has been triggered in the previous stage, it should not be triggered by link.\n\n    if (linkGroup && !showValueMap[tarKey]) {\n      each(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {\n        var srcValItem = showValueMap[srcKey]; // If srcValItem exist, source axis is triggered, so link to target axis.\n\n        if (srcAxisInfo !== tarAxisInfo && srcValItem) {\n          var val = srcValItem.value;\n          linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo))));\n          linkTriggers[tarAxisInfo.key] = val;\n        }\n      });\n    }\n  });\n  each(linkTriggers, function (val, tarKey) {\n    processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);\n  });\n  updateModelActually(showValueMap, axesInfo, outputFinder);\n  dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);\n  dispatchHighDownActually(axesInfo, dispatchAction, api);\n  return outputFinder;\n}\n\nfunction processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {\n  var axis = axisInfo.axis;\n\n  if (axis.scale.isBlank() || !axis.containData(newValue)) {\n    return;\n  }\n\n  if (!axisInfo.involveSeries) {\n    updaters.showPointer(axisInfo, newValue);\n    return;\n  } // Heavy calculation. So put it after axis.containData checking.\n\n\n  var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);\n  var payloadBatch = payloadInfo.payloadBatch;\n  var snapToValue = payloadInfo.snapToValue; // Fill content of event obj for echarts.connect.\n  // By defualt use the first involved series data as a sample to connect.\n\n  if (payloadBatch[0] && outputFinder.seriesIndex == null) {\n    zrUtil.extend(outputFinder, payloadBatch[0]);\n  } // If no linkSource input, this process is for collecting link\n  // target, where snap should not be accepted.\n\n\n  if (!dontSnap && axisInfo.snap) {\n    if (axis.containData(snapToValue) && snapToValue != null) {\n      newValue = snapToValue;\n    }\n  }\n\n  updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder); // Tooltip should always be snapToValue, otherwise there will be\n  // incorrect \"axis value ~ series value\" mapping displayed in tooltip.\n\n  updaters.showTooltip(axisInfo, payloadInfo, snapToValue);\n}\n\nfunction buildPayloadsBySeries(value, axisInfo) {\n  var axis = axisInfo.axis;\n  var dim = axis.dim;\n  var snapToValue = value;\n  var payloadBatch = [];\n  var minDist = Number.MAX_VALUE;\n  var minDiff = -1;\n  each(axisInfo.seriesModels, function (series, idx) {\n    var dataDim = series.coordDimToDataDim(dim);\n    var seriesNestestValue;\n    var dataIndices;\n\n    if (series.getAxisTooltipData) {\n      var result = series.getAxisTooltipData(dataDim, value, axis);\n      dataIndices = result.dataIndices;\n      seriesNestestValue = result.nestestValue;\n    } else {\n      dataIndices = series.getData().indicesOfNearest(dataDim[0], value, // Add a threshold to avoid find the wrong dataIndex\n      // when data length is not same.\n      false, axis.type === 'category' ? 0.5 : null);\n\n      if (!dataIndices.length) {\n        return;\n      }\n\n      seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);\n    }\n\n    if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {\n      return;\n    }\n\n    var diff = value - seriesNestestValue;\n    var dist = Math.abs(diff); // Consider category case\n\n    if (dist <= minDist) {\n      if (dist < minDist || diff >= 0 && minDiff < 0) {\n        minDist = dist;\n        minDiff = diff;\n        snapToValue = seriesNestestValue;\n        payloadBatch.length = 0;\n      }\n\n      each(dataIndices, function (dataIndex) {\n        payloadBatch.push({\n          seriesIndex: series.seriesIndex,\n          dataIndexInside: dataIndex,\n          dataIndex: series.getData().getRawIndex(dataIndex)\n        });\n      });\n    }\n  });\n  return {\n    payloadBatch: payloadBatch,\n    snapToValue: snapToValue\n  };\n}\n\nfunction showPointer(showValueMap, axisInfo, value, payloadBatch) {\n  showValueMap[axisInfo.key] = {\n    value: value,\n    payloadBatch: payloadBatch\n  };\n}\n\nfunction showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {\n  var payloadBatch = payloadInfo.payloadBatch;\n  var axis = axisInfo.axis;\n  var axisModel = axis.model;\n  var axisPointerModel = axisInfo.axisPointerModel; // If no data, do not create anything in dataByCoordSys,\n  // whose length will be used to judge whether dispatch action.\n\n  if (!axisInfo.triggerTooltip || !payloadBatch.length) {\n    return;\n  }\n\n  var coordSysModel = axisInfo.coordSys.model;\n  var coordSysKey = modelHelper.makeKey(coordSysModel);\n  var coordSysItem = dataByCoordSys.map[coordSysKey];\n\n  if (!coordSysItem) {\n    coordSysItem = dataByCoordSys.map[coordSysKey] = {\n      coordSysId: coordSysModel.id,\n      coordSysIndex: coordSysModel.componentIndex,\n      coordSysType: coordSysModel.type,\n      coordSysMainType: coordSysModel.mainType,\n      dataByAxis: []\n    };\n    dataByCoordSys.list.push(coordSysItem);\n  }\n\n  coordSysItem.dataByAxis.push({\n    axisDim: axis.dim,\n    axisIndex: axisModel.componentIndex,\n    axisType: axisModel.type,\n    axisId: axisModel.id,\n    value: value,\n    // Caustion: viewHelper.getValueLabel is actually on \"view stage\", which\n    // depends that all models have been updated. So it should not be performed\n    // here. Considering axisPointerModel used here is volatile, which is hard\n    // to be retrieve in TooltipView, we prepare parameters here.\n    valueLabelOpt: {\n      precision: axisPointerModel.get('label.precision'),\n      formatter: axisPointerModel.get('label.formatter')\n    },\n    seriesDataIndices: payloadBatch.slice()\n  });\n}\n\nfunction updateModelActually(showValueMap, axesInfo, outputFinder) {\n  var outputAxesInfo = outputFinder.axesInfo = []; // Basic logic: If no 'show' required, 'hide' this axisPointer.\n\n  each(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    var valItem = showValueMap[key];\n\n    if (valItem) {\n      !axisInfo.useHandle && (option.status = 'show');\n      option.value = valItem.value; // For label formatter param and highlight.\n\n      option.seriesDataIndices = (valItem.payloadBatch || []).slice();\n    } // When always show (e.g., handle used), remain\n    // original value and status.\n    else {\n        // If hide, value still need to be set, consider\n        // click legend to toggle axis blank.\n        !axisInfo.useHandle && (option.status = 'hide');\n      } // If status is 'hide', should be no info in payload.\n\n\n    option.status === 'show' && outputAxesInfo.push({\n      axisDim: axisInfo.axis.dim,\n      axisIndex: axisInfo.axis.model.componentIndex,\n      value: option.value\n    });\n  });\n}\n\nfunction dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {\n  // Basic logic: If no showTip required, hideTip will be dispatched.\n  if (illegalPoint(point) || !dataByCoordSys.list.length) {\n    dispatchAction({\n      type: 'hideTip'\n    });\n    return;\n  } // In most case only one axis (or event one series is used). It is\n  // convinient to fetch payload.seriesIndex and payload.dataIndex\n  // dirtectly. So put the first seriesIndex and dataIndex of the first\n  // axis on the payload.\n\n\n  var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};\n  dispatchAction({\n    type: 'showTip',\n    escapeConnect: true,\n    x: point[0],\n    y: point[1],\n    tooltipOption: payload.tooltipOption,\n    position: payload.position,\n    dataIndexInside: sampleItem.dataIndexInside,\n    dataIndex: sampleItem.dataIndex,\n    seriesIndex: sampleItem.seriesIndex,\n    dataByCoordSys: dataByCoordSys.list\n  });\n}\n\nfunction dispatchHighDownActually(axesInfo, dispatchAction, api) {\n  // FIXME\n  // highlight status modification shoule be a stage of main process?\n  // (Consider confilct (e.g., legend and axisPointer) and setOption)\n  var zr = api.getZr();\n  var highDownKey = 'axisPointerLastHighlights';\n  var lastHighlights = get(zr)[highDownKey] || {};\n  var newHighlights = get(zr)[highDownKey] = {}; // Update highlight/downplay status according to axisPointer model.\n  // Build hash map and remove duplicate incidentally.\n\n  each(axesInfo, function (axisInfo, key) {\n    var option = axisInfo.axisPointerModel.option;\n    option.status === 'show' && each(option.seriesDataIndices, function (batchItem) {\n      var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;\n      newHighlights[key] = batchItem;\n    });\n  }); // Diff.\n\n  var toHighlight = [];\n  var toDownplay = [];\n  zrUtil.each(lastHighlights, function (batchItem, key) {\n    !newHighlights[key] && toDownplay.push(batchItem);\n  });\n  zrUtil.each(newHighlights, function (batchItem, key) {\n    !lastHighlights[key] && toHighlight.push(batchItem);\n  });\n  toDownplay.length && api.dispatchAction({\n    type: 'downplay',\n    escapeConnect: true,\n    batch: toDownplay\n  });\n  toHighlight.length && api.dispatchAction({\n    type: 'highlight',\n    escapeConnect: true,\n    batch: toHighlight\n  });\n}\n\nfunction findInputAxisInfo(inputAxesInfo, axisInfo) {\n  for (var i = 0; i < (inputAxesInfo || []).length; i++) {\n    var inputAxisInfo = inputAxesInfo[i];\n\n    if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) {\n      return inputAxisInfo;\n    }\n  }\n}\n\nfunction makeMapperParam(axisInfo) {\n  var axisModel = axisInfo.axis.model;\n  var item = {};\n  var dim = item.axisDim = axisInfo.axis.dim;\n  item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;\n  item.axisName = item[dim + 'AxisName'] = axisModel.name;\n  item.axisId = item[dim + 'AxisId'] = axisModel.id;\n  return item;\n}\n\nfunction illegalPoint(point) {\n  return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}