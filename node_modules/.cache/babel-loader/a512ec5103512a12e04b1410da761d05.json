{"ast":null,"code":"var _jsxFileName = \"/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart.jsx\";\nimport React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nam4core.useTheme(am4themes_animated);\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.option = {\n      title: {\n        text: this.props.title,\n        textStyle: {\n          color: '#FFF'\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        // formatter: function (params) {\n        //     params = params[0];\n        //     var date = new Date(params.name);\n        //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n        // },\n        axisPointer: {\n          animation: false\n        }\n      },\n      xAxis: {\n        type: 'time',\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#FFF'\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: [0, '100%'],\n        splitLine: {\n          show: false\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#FFF'\n          }\n        }\n      },\n      series: [{\n        name: 'CHART',\n        type: 'line',\n        showSymbol: false,\n        hoverAnimation: false,\n        data: this.props.data\n      }]\n    };\n    this.boxRef = React.createRef();\n    this.state = {};\n  }\n\n  componentDidMount() {\n    let chart = am4core.create(this.props.company, am4charts.XYChart);\n    chart.data = this.props.data;\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n    series.tooltipText = \"{valueY.value}\";\n    chart.cursor = new am4charts.XYCursor(); // let scrollbarX = new am4charts.XYChartScrollbar();\n    // scrollbarX.series.push(series);\n    // chart.scrollbarX = scrollbarX;\n\n    this.chart = chart;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.prueba !== prevProps.prueba) {\n      this.option.series[0].data = this.props.data;\n    }\n  }\n\n  render() {\n    // let option = {\n    //     title: {\n    //         text: this.props.title,\n    //         textStyle: {\n    //             color: '#FFF'\n    //         }\n    //     },\n    //     tooltip: {\n    //         trigger: 'axis',\n    //         // formatter: function (params) {\n    //         //     params = params[0];\n    //         //     var date = new Date(params.name);\n    //         //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n    //         // },\n    //         axisPointer: {\n    //             animation: false\n    //         }\n    //     },\n    //     xAxis: {\n    //         type: 'time',\n    //         splitLine: {\n    //             show: false\n    //         },\n    //         axisLine: {\n    //             lineStyle: {\n    //                 color: '#FFF'\n    //             }\n    //         }\n    //     },\n    //     yAxis: {\n    //         type: 'value',\n    //         boundaryGap: [0, '100%'],\n    //         splitLine: {\n    //             show: false\n    //         },\n    //         axisLine: {\n    //             lineStyle: {\n    //                 color: '#FFF'\n    //             }\n    //         }\n    //     },\n    //     series: [{\n    //         name: 'CHART',\n    //         type: 'line',\n    //         showSymbol: false,\n    //         hoverAnimation: false,\n    //         data: this.props.data\n    //     }]\n    // };\n    const setInterval = () => {\n      //console.log(this.boxRef)\n      let charts = echarts.init(document.getElementById('chart')); //ref={this.boxRef} this.boxRef.current\n\n      this.option.series[0].data = this.props.data;\n      charts.setOption(this.option);\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: this.props.company,\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ReactEcharts, {\n      ref: this.boxRef,\n      option: option,\n      style: {\n        height: 360\n      },\n      opts: {\n        renderer: 'svg'\n      },\n      onChartReady: setInterval,\n      notMerge: true,\n      lazyUpdate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\n;\nexport default Chart;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart.jsx"],"names":["React","Component","ReactEcharts","echarts","am4core","am4charts","am4themes_animated","useTheme","Chart","constructor","props","option","title","text","textStyle","color","tooltip","trigger","axisPointer","animation","xAxis","type","splitLine","show","axisLine","lineStyle","yAxis","boundaryGap","series","name","showSymbol","hoverAnimation","data","boxRef","createRef","state","componentDidMount","chart","create","company","XYChart","dateAxis","xAxes","push","DateAxis","renderer","grid","template","location","valueAxis","yAxes","ValueAxis","disabled","minWidth","LineSeries","dataFields","dateX","valueY","tooltipText","cursor","XYCursor","componentDidUpdate","prevProps","prueba","render","setInterval","charts","init","document","getElementById","setOption","width","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\n\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n        this.boxRef = React.createRef();\n        this.state = {\n\n        };    \n    };\n\n    option = {\n        title: {\n            text: this.props.title,\n            textStyle: {\n                color: '#FFF'\n            }\n        },\n        tooltip: {\n            trigger: 'axis',\n            // formatter: function (params) {\n            //     params = params[0];\n            //     var date = new Date(params.name);\n            //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n            // },\n            axisPointer: {\n                animation: false\n            }\n        },\n        xAxis: {\n            type: 'time',\n            splitLine: {\n                show: false\n            },\n            axisLine: {\n                lineStyle: {\n                    color: '#FFF'\n                }\n            }\n        },\n        yAxis: {\n            type: 'value',\n            boundaryGap: [0, '100%'],\n            splitLine: {\n                show: false\n            },\n            axisLine: {\n                lineStyle: {\n                    color: '#FFF'\n                }\n            }\n        },\n        series: [{\n            name: 'CHART',\n            type: 'line',\n            showSymbol: false,\n            hoverAnimation: false,\n            data: this.props.data\n        }]\n    };\n\n    componentDidMount() {\n        let chart = am4core.create(this.props.company, am4charts.XYChart);\n        \n        chart.data = this.props.data;\n\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n        dateAxis.renderer.grid.template.location = 0;\n    \n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n        valueAxis.tooltip.disabled = true;\n        valueAxis.renderer.minWidth = 35;\n    \n        let series = chart.series.push(new am4charts.LineSeries());\n        series.dataFields.dateX = \"date\";\n        series.dataFields.valueY = \"value\";\n    \n        series.tooltipText = \"{valueY.value}\";\n        chart.cursor = new am4charts.XYCursor();\n    \n        // let scrollbarX = new am4charts.XYChartScrollbar();\n        // scrollbarX.series.push(series);\n        // chart.scrollbarX = scrollbarX;\n        this.chart = chart;\n    };\n    \n\n    componentDidUpdate(prevProps) {\n\n        if (this.props.prueba !== prevProps.prueba) {\n            this.option.series[0].data = this.props.data;\n        }\n    }\n\n        \n    render() {\n    \n        // let option = {\n        //     title: {\n        //         text: this.props.title,\n        //         textStyle: {\n        //             color: '#FFF'\n        //         }\n        //     },\n        //     tooltip: {\n        //         trigger: 'axis',\n        //         // formatter: function (params) {\n        //         //     params = params[0];\n        //         //     var date = new Date(params.name);\n        //         //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n        //         // },\n        //         axisPointer: {\n        //             animation: false\n        //         }\n        //     },\n        //     xAxis: {\n        //         type: 'time',\n        //         splitLine: {\n        //             show: false\n        //         },\n        //         axisLine: {\n        //             lineStyle: {\n        //                 color: '#FFF'\n        //             }\n        //         }\n        //     },\n        //     yAxis: {\n        //         type: 'value',\n        //         boundaryGap: [0, '100%'],\n        //         splitLine: {\n        //             show: false\n        //         },\n        //         axisLine: {\n        //             lineStyle: {\n        //                 color: '#FFF'\n        //             }\n        //         }\n        //     },\n        //     series: [{\n        //         name: 'CHART',\n        //         type: 'line',\n        //         showSymbol: false,\n        //         hoverAnimation: false,\n        //         data: this.props.data\n        //     }]\n        // };\n\n        const setInterval = () => {\n            //console.log(this.boxRef)\n            let charts = echarts.init(document.getElementById('chart')); //ref={this.boxRef} this.boxRef.current\n            this.option.series[0].data = this.props.data;\n        \n            charts.setOption(this.option);\n        }\n        \n        return (\n            <div>\n                <div id={this.props.company} style={{ width: \"100%\", height: \"500px\" }}></div>\n                <div id=\"chart\" >\n                    <ReactEcharts\n                        ref={this.boxRef}\n                        option={option}\n                        style={{height: 360}}\n                        opts={{renderer: 'svg'}}\n                        onChartReady={setInterval}\n                        notMerge={true}\n                        lazyUpdate={true}\n    \n                    /> \n                </div>\n            </div>\n        );\n    }\n\n};\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}