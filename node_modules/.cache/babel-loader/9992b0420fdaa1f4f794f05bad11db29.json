{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar List = require(\"../../data/List\");\n\nvar Graph = require(\"../../data/Graph\");\n\nvar linkList = require(\"../../data/helper/linkList\");\n\nvar completeDimensions = require(\"../../data/helper/completeDimensions\");\n\nvar CoordinateSystem = require(\"../../CoordinateSystem\");\n\nvar createListFromArray = require(\"./createListFromArray\");\n\nfunction _default(nodes, edges, hostModel, directed, beforeLink) {\n  var graph = new Graph(directed);\n\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(zrUtil.retrieve( // Id, name, dataIndex\n    nodes[i].id, nodes[i].name, i), i);\n  }\n\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target; // addEdge may fail when source or target not exists\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(zrUtil.retrieve(link.id, source + ' > ' + target));\n      linkCount++;\n    }\n  }\n\n  var coordSys = hostModel.get('coordinateSystem');\n  var nodeData;\n\n  if (coordSys === 'cartesian2d' || coordSys === 'polar') {\n    nodeData = createListFromArray(nodes, hostModel, hostModel.ecModel);\n  } else {\n    // FIXME\n    var coordSysCtor = CoordinateSystem.get(coordSys); // FIXME\n\n    var dimensionNames = completeDimensions((coordSysCtor && coordSysCtor.type !== 'view' ? coordSysCtor.dimensions || [] : []).concat(['value']), nodes);\n    nodeData = new List(dimensionNames, hostModel);\n    nodeData.initData(nodes);\n  }\n\n  var edgeData = new List(['value'], hostModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkList({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  }); // Update dataIndex of nodes and edges because invalid edge may be removed\n\n  graph.update();\n  return graph;\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/helper/createGraphFromNodeEdge.js"],"names":["zrUtil","require","List","Graph","linkList","completeDimensions","CoordinateSystem","createListFromArray","_default","nodes","edges","hostModel","directed","beforeLink","graph","i","length","addNode","retrieve","id","name","linkNameList","validEdges","linkCount","link","source","target","addEdge","push","coordSys","get","nodeData","ecModel","coordSysCtor","dimensionNames","type","dimensions","concat","initData","edgeData","mainData","struct","structAttr","datas","node","edge","datasAttr","update","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar List = require(\"../../data/List\");\n\nvar Graph = require(\"../../data/Graph\");\n\nvar linkList = require(\"../../data/helper/linkList\");\n\nvar completeDimensions = require(\"../../data/helper/completeDimensions\");\n\nvar CoordinateSystem = require(\"../../CoordinateSystem\");\n\nvar createListFromArray = require(\"./createListFromArray\");\n\nfunction _default(nodes, edges, hostModel, directed, beforeLink) {\n  var graph = new Graph(directed);\n\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(zrUtil.retrieve( // Id, name, dataIndex\n    nodes[i].id, nodes[i].name, i), i);\n  }\n\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target; // addEdge may fail when source or target not exists\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(zrUtil.retrieve(link.id, source + ' > ' + target));\n      linkCount++;\n    }\n  }\n\n  var coordSys = hostModel.get('coordinateSystem');\n  var nodeData;\n\n  if (coordSys === 'cartesian2d' || coordSys === 'polar') {\n    nodeData = createListFromArray(nodes, hostModel, hostModel.ecModel);\n  } else {\n    // FIXME\n    var coordSysCtor = CoordinateSystem.get(coordSys); // FIXME\n\n    var dimensionNames = completeDimensions((coordSysCtor && coordSysCtor.type !== 'view' ? coordSysCtor.dimensions || [] : []).concat(['value']), nodes);\n    nodeData = new List(dimensionNames, hostModel);\n    nodeData.initData(nodes);\n  }\n\n  var edgeData = new List(['value'], hostModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkList({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  }); // Update dataIndex of nodes and edges because invalid edge may be removed\n\n  graph.update();\n  return graph;\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}