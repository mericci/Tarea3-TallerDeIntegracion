{"ast":null,"code":"var _jsxFileName = \"/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ExchangeDetail from './components/ExchangeDetail';\nimport io from 'socket.io-client';\nconst server = 'wss://le-18262636.bitzonte.com';\nvar now = +new Date(1997, 9, 3);\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      stock_exchange: {},\n      exchanges: [],\n      is_loading: true,\n      prueba: [],\n      big_updates: {},\n      small_updates: {},\n      last_updates: {},\n      total_volume: {},\n      all_exchange_volume: 0\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.is_loading) {\n      const socket = io(server, {\n        path: '/stocks'\n      });\n      socket.emit('EXCHANGES');\n      socket.on('EXCHANGES', data => {\n        socket.emit('STOCKS');\n        socket.on('STOCKS', stocks_info => {\n          const exchange_info = Object.entries(data).map(([key, value]) => {\n            return value;\n          });\n          exchange_info.map(exchange => {\n            exchange.listed_companies.map(comp => {\n              stocks_info.map(stock => {\n                if (comp === stock.company_name) {\n                  this.setState({\n                    stock_exchange: {\n                      [stock.ticker]: exchange.name,\n                      ...this.state.stock_exchange\n                    }\n                  });\n                }\n              });\n            });\n          });\n          this.setState({\n            exchanges: Object.entries(data).map(([key, value]) => {\n              return {\n                name: value.name,\n                exchange_ticker: value.exchange_ticker,\n                stocks: value.listed_companies.map(company => {\n                  var tick = '';\n                  stocks_info.map(stock => {\n                    if (company === stock.company_name) {\n                      tick = stock.ticker;\n                    }\n                  });\n                  return {\n                    company: company,\n                    update: [],\n                    update_time: [],\n                    buy: [],\n                    sell: [],\n                    ticker: tick\n                  };\n                }),\n                buy_volume: 0,\n                sell_volume: 0\n              };\n            })\n          });\n          stocks_info.map(stock => {\n            this.setState({\n              big_updates: {\n                [stock.ticker]: 0,\n                ...this.state.big_updates\n              }\n            });\n            this.setState({\n              small_updates: {\n                [stock.ticker]: Infinity,\n                ...this.state.small_updates\n              }\n            });\n            this.setState({\n              last_updates: {\n                [stock.ticker]: 0,\n                ...this.state.last_updates\n              }\n            });\n            this.setState({\n              total_volume: {\n                [stock.ticker]: 0,\n                ...this.state.total_volume\n              }\n            });\n          });\n        });\n      });\n      socket.on('UPDATE', data => {\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if (exchange.name === exchange_input) {\n            exchange.stocks.map(stock => {\n              if (stock.ticker === data.ticker) {\n                stock.update.push({\n                  date: data.time,\n                  value: data.value\n                }); //update.length - 1\n              }\n            });\n          }\n        });\n        this.state.last_updates[data.ticker] = data.value;\n\n        if (data.value > this.state.big_updates[data.ticker]) {\n          this.state.big_updates[data.ticker] = data.value;\n        }\n\n        if (data.value < this.state.small_updates[data.ticker]) {\n          this.state.small_updates[data.ticker] = data.value;\n        }\n\n        var oneDay = 24 * 3600 * 1000;\n        now = new Date(+now + oneDay);\n        this.setState({\n          prueba: [{\n            name: now.toString(),\n            value: [String(now), data.value]\n          }, ...this.state.prueba]\n        });\n        console.log(this.state.prueba);\n      });\n      socket.on('BUY', data => {\n        this.state.all_exchange_volume += data.volume;\n        this.state.total_volume[data.ticker] += data.volume;\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if (exchange.name === exchange_input) {\n            if (exchange.name === exchange_input) {\n              exchange.buy_volume += data.volume;\n            }\n          }\n        });\n      });\n      socket.on('SELL', data => {\n        this.state.all_exchange_volume += data.volume;\n        this.state.total_volume[data.ticker] += data.volume;\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if (exchange.name === exchange_input) {\n            exchange.sell_volume += data.volume;\n          }\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"exchanges\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }, this.state.exchanges.map(exchange => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"exchange col-md-12\",\n        key: exchange.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ExchangeDetail, {\n        key: exchange.name,\n        exchange: exchange,\n        prueba: this.state.prueba,\n        bigs: this.state.big_updates,\n        smalls: this.state.small_updates,\n        lasts: this.state.last_updates,\n        volume: this.state.total_volume,\n        total_volume: this.state.all_exchange_volume,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }\n      }));\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/App.js"],"names":["React","Component","ExchangeDetail","io","server","now","Date","App","constructor","state","stock_exchange","exchanges","is_loading","prueba","big_updates","small_updates","last_updates","total_volume","all_exchange_volume","componentDidMount","socket","path","emit","on","data","stocks_info","exchange_info","Object","entries","map","key","value","exchange","listed_companies","comp","stock","company_name","setState","ticker","name","exchange_ticker","stocks","company","tick","update","update_time","buy","sell","buy_volume","sell_volume","Infinity","exchange_input","push","date","time","oneDay","toString","String","console","log","volume","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport ExchangeDetail from './components/ExchangeDetail';\n\nimport io from 'socket.io-client'\n\n\nconst server = 'wss://le-18262636.bitzonte.com';\n\nvar now = +new Date(1997, 9, 3);\n\nclass App extends Component{\n\n  constructor(){\n    super();\n\n    this.state = {\n      stock_exchange: {},\n      exchanges: [],\n      is_loading: true,\n      prueba: [],\n      big_updates: {},\n      small_updates: {},\n      last_updates: {},\n      total_volume: {},\n      all_exchange_volume: 0\n\n    };    \n  }\n\n  componentDidMount() {\n    if (this.state.is_loading) {\n      const socket = io(server, {  \n        path: '/stocks'\n      });\n     \n      socket.emit('EXCHANGES')\n      socket.on('EXCHANGES', (data) => {\n        socket.emit('STOCKS');\n        socket.on('STOCKS', (stocks_info) => {\n          const exchange_info = Object.entries(data).map(([key,value])=>{return(value)});\n          exchange_info.map(exchange => {\n            exchange.listed_companies.map(comp => {\n              stocks_info.map(stock => {\n                if(comp === stock.company_name) {\n                  this.setState({stock_exchange: {[stock.ticker]: exchange.name, ...this.state.stock_exchange}})\n                }\n              })\n            })\n          })\n\n          this.setState({exchanges: Object.entries(data).map(([key,value])=>{\n              \n              return({\n                name: value.name,\n                exchange_ticker: value.exchange_ticker,\n                stocks: \n                  value.listed_companies.map(company => {\n                    var tick = '';\n                    stocks_info.map(stock => {\n                      if (company === stock.company_name){\n                        tick = stock.ticker;\n                      }\n                    })\n                    return {\n                      company: company,\n                      update: [],\n                      update_time: [],\n                      buy: [],\n                      sell: [],\n                      ticker: tick,\n          \n                    }\n                  }),\n                  buy_volume: 0,\n                  sell_volume: 0,\n              })\n            })\n          });\n        \n          stocks_info.map(stock => {\n            this.setState({big_updates: {[stock.ticker]: 0, ...this.state.big_updates}})\n            this.setState({small_updates: {[stock.ticker]: Infinity, ...this.state.small_updates}})\n            this.setState({last_updates: {[stock.ticker]: 0, ...this.state.last_updates}})\n            this.setState({total_volume: {[stock.ticker]: 0, ...this.state.total_volume}})\n          })\n          \n        \n        \n        });\n      });\n\n      socket.on('UPDATE', (data) => {\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n            exchange.stocks.map(stock => {\n              if(stock.ticker === data.ticker) {\n                stock.update.push({date: data.time, value: data.value }) //update.length - 1\n              }\n            })\n          }\n        });\n\n        \n        this.state.last_updates[data.ticker] = data.value;\n        if(data.value > this.state.big_updates[data.ticker]) {\n          this.state.big_updates[data.ticker] = data.value;\n        } \n        if(data.value < this.state.small_updates[data.ticker]) {\n          this.state.small_updates[data.ticker] = data.value;\n        }\n\n\n        var oneDay = 24 * 3600 * 1000;\n        now = new Date(+now + oneDay);\n    \n        this.setState({prueba: [{name: now.toString(), value: [String(now), data.value]} , ...this.state.prueba] })\n\n        console.log(this.state.prueba)\n\n        \n        \n\n      \n\n      });\n\n      socket.on('BUY', (data) => {\n        this.state.all_exchange_volume += data.volume;\n        this.state.total_volume[data.ticker] += data.volume;\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n            if(exchange.name === exchange_input) {\n              exchange.buy_volume += data.volume\n            }\n          }\n        });\n      \n      });\n\n      socket.on('SELL', (data) => {\n        this.state.all_exchange_volume += data.volume;\n        this.state.total_volume[data.ticker] += data.volume;\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n              exchange.sell_volume += data.volume\n            }\n        \n          }\n        );\n      });\n    }\n  }\n\n\n  \n  render() {\n    return(\n      <div className=\"App\">\n        <div className=\"exchanges\">\n          {this.state.exchanges.map(exchange => {\n            return(\n              <div className=\"exchange col-md-12\" key={exchange.name}>\n                <ExchangeDetail\n                  key={exchange.name} \n                  exchange = {exchange}\n                  prueba = {this.state.prueba}\n                  bigs = {this.state.big_updates}\n                  smalls = {this.state.small_updates}\n                  lasts = {this.state.last_updates}\n                  volume = {this.state.total_volume}\n                  total_volume = {this.state.all_exchange_volume}\n                />\n              </div>\n            )\n          })}\n        </div>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}