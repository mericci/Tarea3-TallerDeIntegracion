{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar RoamController = require(\"../../component/helper/RoamController\");\n\nvar throttleUtil = require(\"../../util/throttle\"); // Only create one roam controller for each coordinate system.\n// one roam controller might be refered by two inside data zoom\n// components (for example, one for x and one for y). When user\n// pan or zoom, only dispatch one action for those data zoom\n// components.\n\n\nvar curry = zrUtil.curry;\nvar ATTR = '\\0_ec_dataZoom_roams';\n/**\n * @public\n * @param {module:echarts/ExtensionAPI} api\n * @param {Object} dataZoomInfo\n * @param {string} dataZoomInfo.coordId\n * @param {Function} dataZoomInfo.containsPoint\n * @param {Array.<string>} dataZoomInfo.allCoordIds\n * @param {string} dataZoomInfo.dataZoomId\n * @param {number} dataZoomInfo.throttleRate\n * @param {Function} dataZoomInfo.panGetRange\n * @param {Function} dataZoomInfo.zoomGetRange\n * @param {boolean} [dataZoomInfo.zoomLock]\n * @param {boolean} [dataZoomInfo.disabled]\n */\n\nfunction register(api, dataZoomInfo) {\n  var store = giveStore(api);\n  var theDataZoomId = dataZoomInfo.dataZoomId;\n  var theCoordId = dataZoomInfo.coordId; // Do clean when a dataZoom changes its target coordnate system.\n  // Avoid memory leak, dispose all not-used-registered.\n\n  zrUtil.each(store, function (record, coordId) {\n    var dataZoomInfos = record.dataZoomInfos;\n\n    if (dataZoomInfos[theDataZoomId] && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0) {\n      delete dataZoomInfos[theDataZoomId];\n      record.count--;\n    }\n  });\n  cleanStore(store);\n  var record = store[theCoordId]; // Create if needed.\n\n  if (!record) {\n    record = store[theCoordId] = {\n      coordId: theCoordId,\n      dataZoomInfos: {},\n      count: 0\n    };\n    record.controller = createController(api, record);\n    record.dispatchAction = zrUtil.curry(dispatchAction, api);\n  } // Update reference of dataZoom.\n\n\n  !record.dataZoomInfos[theDataZoomId] && record.count++;\n  record.dataZoomInfos[theDataZoomId] = dataZoomInfo;\n  var controllerParams = mergeControllerParams(record.dataZoomInfos);\n  record.controller.enable(controllerParams.controlType, controllerParams.opt); // Consider resize, area should be always updated.\n\n  record.controller.setPointerChecker(dataZoomInfo.containsPoint); // Update throttle.\n\n  throttleUtil.createOrUpdate(record, 'dispatchAction', dataZoomInfo.throttleRate, 'fixRate');\n}\n/**\n * @public\n * @param {module:echarts/ExtensionAPI} api\n * @param {string} dataZoomId\n */\n\n\nfunction unregister(api, dataZoomId) {\n  var store = giveStore(api);\n  zrUtil.each(store, function (record) {\n    record.controller.dispose();\n    var dataZoomInfos = record.dataZoomInfos;\n\n    if (dataZoomInfos[dataZoomId]) {\n      delete dataZoomInfos[dataZoomId];\n      record.count--;\n    }\n  });\n  cleanStore(store);\n}\n/**\n * @public\n */\n\n\nfunction shouldRecordRange(payload, dataZoomId) {\n  if (payload && payload.type === 'dataZoom' && payload.batch) {\n    for (var i = 0, len = payload.batch.length; i < len; i++) {\n      if (payload.batch[i].dataZoomId === dataZoomId) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * @public\n */\n\n\nfunction generateCoordId(coordModel) {\n  return coordModel.type + '\\0_' + coordModel.id;\n}\n/**\n * Key: coordId, value: {dataZoomInfos: [], count, controller}\n * @type {Array.<Object>}\n */\n\n\nfunction giveStore(api) {\n  // Mount store on zrender instance, so that we do not\n  // need to worry about dispose.\n  var zr = api.getZr();\n  return zr[ATTR] || (zr[ATTR] = {});\n}\n\nfunction createController(api, newRecord) {\n  var controller = new RoamController(api.getZr());\n  controller.on('pan', curry(onPan, newRecord));\n  controller.on('zoom', curry(onZoom, newRecord));\n  return controller;\n}\n\nfunction cleanStore(store) {\n  zrUtil.each(store, function (record, coordId) {\n    if (!record.count) {\n      record.controller.dispose();\n      delete store[coordId];\n    }\n  });\n}\n\nfunction onPan(record, dx, dy, oldX, oldY, newX, newY) {\n  wrapAndDispatch(record, function (info) {\n    return info.panGetRange(record.controller, dx, dy, oldX, oldY, newX, newY);\n  });\n}\n\nfunction onZoom(record, scale, mouseX, mouseY) {\n  wrapAndDispatch(record, function (info) {\n    return info.zoomGetRange(record.controller, scale, mouseX, mouseY);\n  });\n}\n\nfunction wrapAndDispatch(record, getRange) {\n  var batch = [];\n  zrUtil.each(record.dataZoomInfos, function (info) {\n    var range = getRange(info);\n    !info.disabled && range && batch.push({\n      dataZoomId: info.dataZoomId,\n      start: range[0],\n      end: range[1]\n    });\n  });\n  record.dispatchAction(batch);\n}\n/**\n * This action will be throttled.\n */\n\n\nfunction dispatchAction(api, batch) {\n  api.dispatchAction({\n    type: 'dataZoom',\n    batch: batch\n  });\n}\n/**\n * Merge roamController settings when multiple dataZooms share one roamController.\n */\n\n\nfunction mergeControllerParams(dataZoomInfos) {\n  var controlType;\n  var opt = {};\n  var typePriority = {\n    'true': 2,\n    'move': 1,\n    'false': 0,\n    'undefined': -1\n  };\n  zrUtil.each(dataZoomInfos, function (dataZoomInfo) {\n    var oneType = dataZoomInfo.disabled ? false : dataZoomInfo.zoomLock ? 'move' : true;\n    typePriority[oneType] > typePriority[controlType] && (controlType = oneType); // Do not support that different 'shift'/'ctrl'/'alt' setting used in one coord sys.\n\n    zrUtil.extend(opt, dataZoomInfo.roamControllerOpt);\n  });\n  return {\n    controlType: controlType,\n    opt: opt\n  };\n}\n\nexports.register = register;\nexports.unregister = unregister;\nexports.shouldRecordRange = shouldRecordRange;\nexports.generateCoordId = generateCoordId;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/dataZoom/roams.js"],"names":["zrUtil","require","RoamController","throttleUtil","curry","ATTR","register","api","dataZoomInfo","store","giveStore","theDataZoomId","dataZoomId","theCoordId","coordId","each","record","dataZoomInfos","indexOf","allCoordIds","count","cleanStore","controller","createController","dispatchAction","controllerParams","mergeControllerParams","enable","controlType","opt","setPointerChecker","containsPoint","createOrUpdate","throttleRate","unregister","dispose","shouldRecordRange","payload","type","batch","i","len","length","generateCoordId","coordModel","id","zr","getZr","newRecord","on","onPan","onZoom","dx","dy","oldX","oldY","newX","newY","wrapAndDispatch","info","panGetRange","scale","mouseX","mouseY","zoomGetRange","getRange","range","disabled","push","start","end","typePriority","oneType","zoomLock","extend","roamControllerOpt","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar RoamController = require(\"../../component/helper/RoamController\");\n\nvar throttleUtil = require(\"../../util/throttle\");\n\n// Only create one roam controller for each coordinate system.\n// one roam controller might be refered by two inside data zoom\n// components (for example, one for x and one for y). When user\n// pan or zoom, only dispatch one action for those data zoom\n// components.\nvar curry = zrUtil.curry;\nvar ATTR = '\\0_ec_dataZoom_roams';\n/**\n * @public\n * @param {module:echarts/ExtensionAPI} api\n * @param {Object} dataZoomInfo\n * @param {string} dataZoomInfo.coordId\n * @param {Function} dataZoomInfo.containsPoint\n * @param {Array.<string>} dataZoomInfo.allCoordIds\n * @param {string} dataZoomInfo.dataZoomId\n * @param {number} dataZoomInfo.throttleRate\n * @param {Function} dataZoomInfo.panGetRange\n * @param {Function} dataZoomInfo.zoomGetRange\n * @param {boolean} [dataZoomInfo.zoomLock]\n * @param {boolean} [dataZoomInfo.disabled]\n */\n\nfunction register(api, dataZoomInfo) {\n  var store = giveStore(api);\n  var theDataZoomId = dataZoomInfo.dataZoomId;\n  var theCoordId = dataZoomInfo.coordId; // Do clean when a dataZoom changes its target coordnate system.\n  // Avoid memory leak, dispose all not-used-registered.\n\n  zrUtil.each(store, function (record, coordId) {\n    var dataZoomInfos = record.dataZoomInfos;\n\n    if (dataZoomInfos[theDataZoomId] && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0) {\n      delete dataZoomInfos[theDataZoomId];\n      record.count--;\n    }\n  });\n  cleanStore(store);\n  var record = store[theCoordId]; // Create if needed.\n\n  if (!record) {\n    record = store[theCoordId] = {\n      coordId: theCoordId,\n      dataZoomInfos: {},\n      count: 0\n    };\n    record.controller = createController(api, record);\n    record.dispatchAction = zrUtil.curry(dispatchAction, api);\n  } // Update reference of dataZoom.\n\n\n  !record.dataZoomInfos[theDataZoomId] && record.count++;\n  record.dataZoomInfos[theDataZoomId] = dataZoomInfo;\n  var controllerParams = mergeControllerParams(record.dataZoomInfos);\n  record.controller.enable(controllerParams.controlType, controllerParams.opt); // Consider resize, area should be always updated.\n\n  record.controller.setPointerChecker(dataZoomInfo.containsPoint); // Update throttle.\n\n  throttleUtil.createOrUpdate(record, 'dispatchAction', dataZoomInfo.throttleRate, 'fixRate');\n}\n/**\n * @public\n * @param {module:echarts/ExtensionAPI} api\n * @param {string} dataZoomId\n */\n\n\nfunction unregister(api, dataZoomId) {\n  var store = giveStore(api);\n  zrUtil.each(store, function (record) {\n    record.controller.dispose();\n    var dataZoomInfos = record.dataZoomInfos;\n\n    if (dataZoomInfos[dataZoomId]) {\n      delete dataZoomInfos[dataZoomId];\n      record.count--;\n    }\n  });\n  cleanStore(store);\n}\n/**\n * @public\n */\n\n\nfunction shouldRecordRange(payload, dataZoomId) {\n  if (payload && payload.type === 'dataZoom' && payload.batch) {\n    for (var i = 0, len = payload.batch.length; i < len; i++) {\n      if (payload.batch[i].dataZoomId === dataZoomId) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * @public\n */\n\n\nfunction generateCoordId(coordModel) {\n  return coordModel.type + '\\0_' + coordModel.id;\n}\n/**\n * Key: coordId, value: {dataZoomInfos: [], count, controller}\n * @type {Array.<Object>}\n */\n\n\nfunction giveStore(api) {\n  // Mount store on zrender instance, so that we do not\n  // need to worry about dispose.\n  var zr = api.getZr();\n  return zr[ATTR] || (zr[ATTR] = {});\n}\n\nfunction createController(api, newRecord) {\n  var controller = new RoamController(api.getZr());\n  controller.on('pan', curry(onPan, newRecord));\n  controller.on('zoom', curry(onZoom, newRecord));\n  return controller;\n}\n\nfunction cleanStore(store) {\n  zrUtil.each(store, function (record, coordId) {\n    if (!record.count) {\n      record.controller.dispose();\n      delete store[coordId];\n    }\n  });\n}\n\nfunction onPan(record, dx, dy, oldX, oldY, newX, newY) {\n  wrapAndDispatch(record, function (info) {\n    return info.panGetRange(record.controller, dx, dy, oldX, oldY, newX, newY);\n  });\n}\n\nfunction onZoom(record, scale, mouseX, mouseY) {\n  wrapAndDispatch(record, function (info) {\n    return info.zoomGetRange(record.controller, scale, mouseX, mouseY);\n  });\n}\n\nfunction wrapAndDispatch(record, getRange) {\n  var batch = [];\n  zrUtil.each(record.dataZoomInfos, function (info) {\n    var range = getRange(info);\n    !info.disabled && range && batch.push({\n      dataZoomId: info.dataZoomId,\n      start: range[0],\n      end: range[1]\n    });\n  });\n  record.dispatchAction(batch);\n}\n/**\n * This action will be throttled.\n */\n\n\nfunction dispatchAction(api, batch) {\n  api.dispatchAction({\n    type: 'dataZoom',\n    batch: batch\n  });\n}\n/**\n * Merge roamController settings when multiple dataZooms share one roamController.\n */\n\n\nfunction mergeControllerParams(dataZoomInfos) {\n  var controlType;\n  var opt = {};\n  var typePriority = {\n    'true': 2,\n    'move': 1,\n    'false': 0,\n    'undefined': -1\n  };\n  zrUtil.each(dataZoomInfos, function (dataZoomInfo) {\n    var oneType = dataZoomInfo.disabled ? false : dataZoomInfo.zoomLock ? 'move' : true;\n    typePriority[oneType] > typePriority[controlType] && (controlType = oneType); // Do not support that different 'shift'/'ctrl'/'alt' setting used in one coord sys.\n\n    zrUtil.extend(opt, dataZoomInfo.roamControllerOpt);\n  });\n  return {\n    controlType: controlType,\n    opt: opt\n  };\n}\n\nexports.register = register;\nexports.unregister = unregister;\nexports.shouldRecordRange = shouldRecordRange;\nexports.generateCoordId = generateCoordId;"]},"metadata":{},"sourceType":"script"}