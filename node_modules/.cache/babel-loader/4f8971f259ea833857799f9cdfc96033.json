{"ast":null,"code":"var _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar modelUtil = require(\"../util/model\");\n\nvar graphicUtil = require(\"../util/graphic\");\n\nvar layoutUtil = require(\"../util/layout\"); // -------------\n// Preprocessor\n// -------------\n\n\necharts.registerPreprocessor(function (option) {\n  var graphicOption = option.graphic; // Convert\n  // {graphic: [{left: 10, type: 'circle'}, ...]}\n  // or\n  // {graphic: {left: 10, type: 'circle'}}\n  // to\n  // {graphic: [{elements: [{left: 10, type: 'circle'}, ...]}]}\n\n  if (zrUtil.isArray(graphicOption)) {\n    if (!graphicOption[0] || !graphicOption[0].elements) {\n      option.graphic = [{\n        elements: graphicOption\n      }];\n    } else {\n      // Only one graphic instance can be instantiated. (We dont\n      // want that too many views are created in echarts._viewMap)\n      option.graphic = [option.graphic[0]];\n    }\n  } else if (graphicOption && !graphicOption.elements) {\n    option.graphic = [{\n      elements: [graphicOption]\n    }];\n  }\n}); // ------\n// Model\n// ------\n\nvar GraphicModel = echarts.extendComponentModel({\n  type: 'graphic',\n  defaultOption: {\n    // Extra properties for each elements:\n    //\n    // left/right/top/bottom: (like 12, '22%', 'center', default undefined)\n    //      If left/rigth is set, shape.x/shape.cx/position will not be used.\n    //      If top/bottom is set, shape.y/shape.cy/position will not be used.\n    //      This mechanism is useful when you want to position a group/element\n    //      against the right side or the center of this container.\n    //\n    // width/height: (can only be pixel value, default 0)\n    //      Only be used to specify contianer(group) size, if needed. And\n    //      can not be percentage value (like '33%'). See the reason in the\n    //      layout algorithm below.\n    //\n    // bounding: (enum: 'all' (default) | 'raw')\n    //      Specify how to calculate boundingRect when locating.\n    //      'all': Get uioned and transformed boundingRect\n    //          from both itself and its descendants.\n    //          This mode simplies confining a group of elements in the bounding\n    //          of their ancester container (e.g., using 'right: 0').\n    //      'raw': Only use the boundingRect of itself and before transformed.\n    //          This mode is similar to css behavior, which is useful when you\n    //          want an element to be able to overflow its container. (Consider\n    //          a rotated circle needs to be located in a corner.)\n    // Note: elements is always behind its ancestors in this elements array.\n    elements: [],\n    parentId: null\n  },\n\n  /**\n   * Save el options for the sake of the performance (only update modified graphics).\n   * The order is the same as those in option. (ancesters -> descendants)\n   *\n   * @private\n   * @type {Array.<Object>}\n   */\n  _elOptionsToUpdate: null,\n\n  /**\n   * @override\n   */\n  mergeOption: function (option) {\n    // Prevent default merge to elements\n    var elements = this.option.elements;\n    this.option.elements = null;\n    GraphicModel.superApply(this, 'mergeOption', arguments);\n    this.option.elements = elements;\n  },\n\n  /**\n   * @override\n   */\n  optionUpdated: function (newOption, isInit) {\n    var thisOption = this.option;\n    var newList = (isInit ? thisOption : newOption).elements;\n    var existList = thisOption.elements = isInit ? [] : thisOption.elements;\n    var flattenedList = [];\n\n    this._flatten(newList, flattenedList);\n\n    var mappingResult = modelUtil.mappingToExists(existList, flattenedList);\n    modelUtil.makeIdAndName(mappingResult); // Clear elOptionsToUpdate\n\n    var elOptionsToUpdate = this._elOptionsToUpdate = [];\n    zrUtil.each(mappingResult, function (resultItem, index) {\n      var newElOption = resultItem.option;\n\n      if (!newElOption) {\n        return;\n      }\n\n      elOptionsToUpdate.push(newElOption);\n      setKeyInfoToNewElOption(resultItem, newElOption);\n      mergeNewElOptionToExist(existList, index, newElOption);\n      setLayoutInfoToExist(existList[index], newElOption);\n    }, this); // Clean\n\n    for (var i = existList.length - 1; i >= 0; i--) {\n      if (existList[i] == null) {\n        existList.splice(i, 1);\n      } else {\n        // $action should be volatile, otherwise option gotten from\n        // `getOption` will contain unexpected $action.\n        delete existList[i].$action;\n      }\n    }\n  },\n\n  /**\n   * Convert\n   * [{\n   *  type: 'group',\n   *  id: 'xx',\n   *  children: [{type: 'circle'}, {type: 'polygon'}]\n   * }]\n   * to\n   * [\n   *  {type: 'group', id: 'xx'},\n   *  {type: 'circle', parentId: 'xx'},\n   *  {type: 'polygon', parentId: 'xx'}\n   * ]\n   *\n   * @private\n   * @param {Array.<Object>} optionList option list\n   * @param {Array.<Object>} result result of flatten\n   * @param {Object} parentOption parent option\n   */\n  _flatten: function (optionList, result, parentOption) {\n    zrUtil.each(optionList, function (option) {\n      if (!option) {\n        return;\n      }\n\n      if (parentOption) {\n        option.parentOption = parentOption;\n      }\n\n      result.push(option);\n      var children = option.children;\n\n      if (option.type === 'group' && children) {\n        this._flatten(children, result, option);\n      } // Deleting for JSON output, and for not affecting group creation.\n\n\n      delete option.children;\n    }, this);\n  },\n  // FIXME\n  // Pass to view using payload? setOption has a payload?\n  useElOptionsToUpdate: function () {\n    var els = this._elOptionsToUpdate; // Clear to avoid render duplicately when zooming.\n\n    this._elOptionsToUpdate = null;\n    return els;\n  }\n}); // -----\n// View\n// -----\n\necharts.extendComponentView({\n  type: 'graphic',\n\n  /**\n   * @override\n   */\n  init: function (ecModel, api) {\n    /**\n     * @private\n     * @type {module:zrender/core/util.HashMap}\n     */\n    this._elMap = zrUtil.createHashMap();\n    /**\n     * @private\n     * @type {module:echarts/graphic/GraphicModel}\n     */\n\n    this._lastGraphicModel;\n  },\n\n  /**\n   * @override\n   */\n  render: function (graphicModel, ecModel, api) {\n    // Having leveraged between use cases and algorithm complexity, a very\n    // simple layout mechanism is used:\n    // The size(width/height) can be determined by itself or its parent (not\n    // implemented yet), but can not by its children. (Top-down travel)\n    // The location(x/y) can be determined by the bounding rect of itself\n    // (can including its descendants or not) and the size of its parent.\n    // (Bottom-up travel)\n    // When `chart.clear()` or `chart.setOption({...}, true)` with the same id,\n    // view will be reused.\n    if (graphicModel !== this._lastGraphicModel) {\n      this._clear();\n    }\n\n    this._lastGraphicModel = graphicModel;\n\n    this._updateElements(graphicModel, api);\n\n    this._relocate(graphicModel, api);\n  },\n\n  /**\n   * Update graphic elements.\n   *\n   * @private\n   * @param {Object} graphicModel graphic model\n   * @param {module:echarts/ExtensionAPI} api extension API\n   */\n  _updateElements: function (graphicModel, api) {\n    var elOptionsToUpdate = graphicModel.useElOptionsToUpdate();\n\n    if (!elOptionsToUpdate) {\n      return;\n    }\n\n    var elMap = this._elMap;\n    var rootGroup = this.group; // Top-down tranverse to assign graphic settings to each elements.\n\n    zrUtil.each(elOptionsToUpdate, function (elOption) {\n      var $action = elOption.$action;\n      var id = elOption.id;\n      var existEl = elMap.get(id);\n      var parentId = elOption.parentId;\n      var targetElParent = parentId != null ? elMap.get(parentId) : rootGroup;\n\n      if (elOption.type === 'text') {\n        var elOptionStyle = elOption.style; // In top/bottom mode, textVerticalAlign should not be used, which cause\n        // inaccurately locating.\n\n        if (elOption.hv && elOption.hv[1]) {\n          elOptionStyle.textVerticalAlign = elOptionStyle.textBaseline = null;\n        } // Compatible with previous setting: both support fill and textFill,\n        // stroke and textStroke.\n\n\n        !elOptionStyle.hasOwnProperty('textFill') && elOptionStyle.fill && (elOptionStyle.textFill = elOptionStyle.fill);\n        !elOptionStyle.hasOwnProperty('textStroke') && elOptionStyle.stroke && (elOptionStyle.textStroke = elOptionStyle.stroke);\n      } // Remove unnecessary props to avoid potential problems.\n\n\n      var elOptionCleaned = getCleanedElOption(elOption); // For simple, do not support parent change, otherwise reorder is needed.\n\n      if (!$action || $action === 'merge') {\n        existEl ? existEl.attr(elOptionCleaned) : createEl(id, targetElParent, elOptionCleaned, elMap);\n      } else if ($action === 'replace') {\n        removeEl(existEl, elMap);\n        createEl(id, targetElParent, elOptionCleaned, elMap);\n      } else if ($action === 'remove') {\n        removeEl(existEl, elMap);\n      }\n\n      var el = elMap.get(id);\n\n      if (el) {\n        el.__ecGraphicWidth = elOption.width;\n        el.__ecGraphicHeight = elOption.height;\n      }\n    });\n  },\n\n  /**\n   * Locate graphic elements.\n   *\n   * @private\n   * @param {Object} graphicModel graphic model\n   * @param {module:echarts/ExtensionAPI} api extension API\n   */\n  _relocate: function (graphicModel, api) {\n    var elOptions = graphicModel.option.elements;\n    var rootGroup = this.group;\n    var elMap = this._elMap; // Bottom-up tranvese all elements (consider ec resize) to locate elements.\n\n    for (var i = elOptions.length - 1; i >= 0; i--) {\n      var elOption = elOptions[i];\n      var el = elMap.get(elOption.id);\n\n      if (!el) {\n        continue;\n      }\n\n      var parentEl = el.parent;\n      var containerInfo = parentEl === rootGroup ? {\n        width: api.getWidth(),\n        height: api.getHeight()\n      } : {\n        // Like 'position:absolut' in css, default 0.\n        width: parentEl.__ecGraphicWidth || 0,\n        height: parentEl.__ecGraphicHeight || 0\n      };\n      layoutUtil.positionElement(el, elOption, containerInfo, null, {\n        hv: elOption.hv,\n        boundingMode: elOption.bounding\n      });\n    }\n  },\n\n  /**\n   * Clear all elements.\n   *\n   * @private\n   */\n  _clear: function () {\n    var elMap = this._elMap;\n    elMap.each(function (el) {\n      removeEl(el, elMap);\n    });\n    this._elMap = zrUtil.createHashMap();\n  },\n\n  /**\n   * @override\n   */\n  dispose: function () {\n    this._clear();\n  }\n});\n\nfunction createEl(id, targetElParent, elOption, elMap) {\n  var graphicType = elOption.type;\n  var Clz = graphicUtil[graphicType.charAt(0).toUpperCase() + graphicType.slice(1)];\n  var el = new Clz(elOption);\n  targetElParent.add(el);\n  elMap.set(id, el);\n  el.__ecGraphicId = id;\n}\n\nfunction removeEl(existEl, elMap) {\n  var existElParent = existEl && existEl.parent;\n\n  if (existElParent) {\n    existEl.type === 'group' && existEl.traverse(function (el) {\n      removeEl(el, elMap);\n    });\n    elMap.removeKey(existEl.__ecGraphicId);\n    existElParent.remove(existEl);\n  }\n} // Remove unnecessary props to avoid potential problems.\n\n\nfunction getCleanedElOption(elOption) {\n  elOption = zrUtil.extend({}, elOption);\n  zrUtil.each(['id', 'parentId', '$action', 'hv', 'bounding'].concat(layoutUtil.LOCATION_PARAMS), function (name) {\n    delete elOption[name];\n  });\n  return elOption;\n}\n\nfunction isSetLoc(obj, props) {\n  var isSet;\n  zrUtil.each(props, function (prop) {\n    obj[prop] != null && obj[prop] !== 'auto' && (isSet = true);\n  });\n  return isSet;\n}\n\nfunction setKeyInfoToNewElOption(resultItem, newElOption) {\n  var existElOption = resultItem.exist; // Set id and type after id assigned.\n\n  newElOption.id = resultItem.keyInfo.id;\n  !newElOption.type && existElOption && (newElOption.type = existElOption.type); // Set parent id if not specified\n\n  if (newElOption.parentId == null) {\n    var newElParentOption = newElOption.parentOption;\n\n    if (newElParentOption) {\n      newElOption.parentId = newElParentOption.id;\n    } else if (existElOption) {\n      newElOption.parentId = existElOption.parentId;\n    }\n  } // Clear\n\n\n  newElOption.parentOption = null;\n}\n\nfunction mergeNewElOptionToExist(existList, index, newElOption) {\n  // Update existing options, for `getOption` feature.\n  var newElOptCopy = zrUtil.extend({}, newElOption);\n  var existElOption = existList[index];\n  var $action = newElOption.$action || 'merge';\n\n  if ($action === 'merge') {\n    if (existElOption) {\n      // We can ensure that newElOptCopy and existElOption are not\n      // the same object, so `merge` will not change newElOptCopy.\n      zrUtil.merge(existElOption, newElOptCopy, true); // Rigid body, use ignoreSize.\n\n      layoutUtil.mergeLayoutParam(existElOption, newElOptCopy, {\n        ignoreSize: true\n      }); // Will be used in render.\n\n      layoutUtil.copyLayoutParams(newElOption, existElOption);\n    } else {\n      existList[index] = newElOptCopy;\n    }\n  } else if ($action === 'replace') {\n    existList[index] = newElOptCopy;\n  } else if ($action === 'remove') {\n    // null will be cleaned later.\n    existElOption && (existList[index] = null);\n  }\n}\n\nfunction setLayoutInfoToExist(existItem, newElOption) {\n  if (!existItem) {\n    return;\n  }\n\n  existItem.hv = newElOption.hv = [// Rigid body, dont care `width`.\n  isSetLoc(newElOption, ['left', 'right']), // Rigid body, dont care `height`.\n  isSetLoc(newElOption, ['top', 'bottom'])]; // Give default group size. Otherwise layout error may occur.\n\n  if (existItem.type === 'group') {\n    existItem.width == null && (existItem.width = newElOption.width = 0);\n    existItem.height == null && (existItem.height = newElOption.height = 0);\n  }\n}","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/graphic.js"],"names":["_config","require","__DEV__","echarts","zrUtil","modelUtil","graphicUtil","layoutUtil","registerPreprocessor","option","graphicOption","graphic","isArray","elements","GraphicModel","extendComponentModel","type","defaultOption","parentId","_elOptionsToUpdate","mergeOption","superApply","arguments","optionUpdated","newOption","isInit","thisOption","newList","existList","flattenedList","_flatten","mappingResult","mappingToExists","makeIdAndName","elOptionsToUpdate","each","resultItem","index","newElOption","push","setKeyInfoToNewElOption","mergeNewElOptionToExist","setLayoutInfoToExist","i","length","splice","$action","optionList","result","parentOption","children","useElOptionsToUpdate","els","extendComponentView","init","ecModel","api","_elMap","createHashMap","_lastGraphicModel","render","graphicModel","_clear","_updateElements","_relocate","elMap","rootGroup","group","elOption","id","existEl","get","targetElParent","elOptionStyle","style","hv","textVerticalAlign","textBaseline","hasOwnProperty","fill","textFill","stroke","textStroke","elOptionCleaned","getCleanedElOption","attr","createEl","removeEl","el","__ecGraphicWidth","width","__ecGraphicHeight","height","elOptions","parentEl","parent","containerInfo","getWidth","getHeight","positionElement","boundingMode","bounding","dispose","graphicType","Clz","charAt","toUpperCase","slice","add","set","__ecGraphicId","existElParent","traverse","removeKey","remove","extend","concat","LOCATION_PARAMS","name","isSetLoc","obj","props","isSet","prop","existElOption","exist","keyInfo","newElParentOption","newElOptCopy","merge","mergeLayoutParam","ignoreSize","copyLayoutParams","existItem"],"mappings":"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","sourcesContent":["var _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar modelUtil = require(\"../util/model\");\n\nvar graphicUtil = require(\"../util/graphic\");\n\nvar layoutUtil = require(\"../util/layout\");\n\n// -------------\n// Preprocessor\n// -------------\necharts.registerPreprocessor(function (option) {\n  var graphicOption = option.graphic; // Convert\n  // {graphic: [{left: 10, type: 'circle'}, ...]}\n  // or\n  // {graphic: {left: 10, type: 'circle'}}\n  // to\n  // {graphic: [{elements: [{left: 10, type: 'circle'}, ...]}]}\n\n  if (zrUtil.isArray(graphicOption)) {\n    if (!graphicOption[0] || !graphicOption[0].elements) {\n      option.graphic = [{\n        elements: graphicOption\n      }];\n    } else {\n      // Only one graphic instance can be instantiated. (We dont\n      // want that too many views are created in echarts._viewMap)\n      option.graphic = [option.graphic[0]];\n    }\n  } else if (graphicOption && !graphicOption.elements) {\n    option.graphic = [{\n      elements: [graphicOption]\n    }];\n  }\n}); // ------\n// Model\n// ------\n\nvar GraphicModel = echarts.extendComponentModel({\n  type: 'graphic',\n  defaultOption: {\n    // Extra properties for each elements:\n    //\n    // left/right/top/bottom: (like 12, '22%', 'center', default undefined)\n    //      If left/rigth is set, shape.x/shape.cx/position will not be used.\n    //      If top/bottom is set, shape.y/shape.cy/position will not be used.\n    //      This mechanism is useful when you want to position a group/element\n    //      against the right side or the center of this container.\n    //\n    // width/height: (can only be pixel value, default 0)\n    //      Only be used to specify contianer(group) size, if needed. And\n    //      can not be percentage value (like '33%'). See the reason in the\n    //      layout algorithm below.\n    //\n    // bounding: (enum: 'all' (default) | 'raw')\n    //      Specify how to calculate boundingRect when locating.\n    //      'all': Get uioned and transformed boundingRect\n    //          from both itself and its descendants.\n    //          This mode simplies confining a group of elements in the bounding\n    //          of their ancester container (e.g., using 'right: 0').\n    //      'raw': Only use the boundingRect of itself and before transformed.\n    //          This mode is similar to css behavior, which is useful when you\n    //          want an element to be able to overflow its container. (Consider\n    //          a rotated circle needs to be located in a corner.)\n    // Note: elements is always behind its ancestors in this elements array.\n    elements: [],\n    parentId: null\n  },\n\n  /**\n   * Save el options for the sake of the performance (only update modified graphics).\n   * The order is the same as those in option. (ancesters -> descendants)\n   *\n   * @private\n   * @type {Array.<Object>}\n   */\n  _elOptionsToUpdate: null,\n\n  /**\n   * @override\n   */\n  mergeOption: function (option) {\n    // Prevent default merge to elements\n    var elements = this.option.elements;\n    this.option.elements = null;\n    GraphicModel.superApply(this, 'mergeOption', arguments);\n    this.option.elements = elements;\n  },\n\n  /**\n   * @override\n   */\n  optionUpdated: function (newOption, isInit) {\n    var thisOption = this.option;\n    var newList = (isInit ? thisOption : newOption).elements;\n    var existList = thisOption.elements = isInit ? [] : thisOption.elements;\n    var flattenedList = [];\n\n    this._flatten(newList, flattenedList);\n\n    var mappingResult = modelUtil.mappingToExists(existList, flattenedList);\n    modelUtil.makeIdAndName(mappingResult); // Clear elOptionsToUpdate\n\n    var elOptionsToUpdate = this._elOptionsToUpdate = [];\n    zrUtil.each(mappingResult, function (resultItem, index) {\n      var newElOption = resultItem.option;\n\n      if (!newElOption) {\n        return;\n      }\n\n      elOptionsToUpdate.push(newElOption);\n      setKeyInfoToNewElOption(resultItem, newElOption);\n      mergeNewElOptionToExist(existList, index, newElOption);\n      setLayoutInfoToExist(existList[index], newElOption);\n    }, this); // Clean\n\n    for (var i = existList.length - 1; i >= 0; i--) {\n      if (existList[i] == null) {\n        existList.splice(i, 1);\n      } else {\n        // $action should be volatile, otherwise option gotten from\n        // `getOption` will contain unexpected $action.\n        delete existList[i].$action;\n      }\n    }\n  },\n\n  /**\n   * Convert\n   * [{\n   *  type: 'group',\n   *  id: 'xx',\n   *  children: [{type: 'circle'}, {type: 'polygon'}]\n   * }]\n   * to\n   * [\n   *  {type: 'group', id: 'xx'},\n   *  {type: 'circle', parentId: 'xx'},\n   *  {type: 'polygon', parentId: 'xx'}\n   * ]\n   *\n   * @private\n   * @param {Array.<Object>} optionList option list\n   * @param {Array.<Object>} result result of flatten\n   * @param {Object} parentOption parent option\n   */\n  _flatten: function (optionList, result, parentOption) {\n    zrUtil.each(optionList, function (option) {\n      if (!option) {\n        return;\n      }\n\n      if (parentOption) {\n        option.parentOption = parentOption;\n      }\n\n      result.push(option);\n      var children = option.children;\n\n      if (option.type === 'group' && children) {\n        this._flatten(children, result, option);\n      } // Deleting for JSON output, and for not affecting group creation.\n\n\n      delete option.children;\n    }, this);\n  },\n  // FIXME\n  // Pass to view using payload? setOption has a payload?\n  useElOptionsToUpdate: function () {\n    var els = this._elOptionsToUpdate; // Clear to avoid render duplicately when zooming.\n\n    this._elOptionsToUpdate = null;\n    return els;\n  }\n}); // -----\n// View\n// -----\n\necharts.extendComponentView({\n  type: 'graphic',\n\n  /**\n   * @override\n   */\n  init: function (ecModel, api) {\n    /**\n     * @private\n     * @type {module:zrender/core/util.HashMap}\n     */\n    this._elMap = zrUtil.createHashMap();\n    /**\n     * @private\n     * @type {module:echarts/graphic/GraphicModel}\n     */\n\n    this._lastGraphicModel;\n  },\n\n  /**\n   * @override\n   */\n  render: function (graphicModel, ecModel, api) {\n    // Having leveraged between use cases and algorithm complexity, a very\n    // simple layout mechanism is used:\n    // The size(width/height) can be determined by itself or its parent (not\n    // implemented yet), but can not by its children. (Top-down travel)\n    // The location(x/y) can be determined by the bounding rect of itself\n    // (can including its descendants or not) and the size of its parent.\n    // (Bottom-up travel)\n    // When `chart.clear()` or `chart.setOption({...}, true)` with the same id,\n    // view will be reused.\n    if (graphicModel !== this._lastGraphicModel) {\n      this._clear();\n    }\n\n    this._lastGraphicModel = graphicModel;\n\n    this._updateElements(graphicModel, api);\n\n    this._relocate(graphicModel, api);\n  },\n\n  /**\n   * Update graphic elements.\n   *\n   * @private\n   * @param {Object} graphicModel graphic model\n   * @param {module:echarts/ExtensionAPI} api extension API\n   */\n  _updateElements: function (graphicModel, api) {\n    var elOptionsToUpdate = graphicModel.useElOptionsToUpdate();\n\n    if (!elOptionsToUpdate) {\n      return;\n    }\n\n    var elMap = this._elMap;\n    var rootGroup = this.group; // Top-down tranverse to assign graphic settings to each elements.\n\n    zrUtil.each(elOptionsToUpdate, function (elOption) {\n      var $action = elOption.$action;\n      var id = elOption.id;\n      var existEl = elMap.get(id);\n      var parentId = elOption.parentId;\n      var targetElParent = parentId != null ? elMap.get(parentId) : rootGroup;\n\n      if (elOption.type === 'text') {\n        var elOptionStyle = elOption.style; // In top/bottom mode, textVerticalAlign should not be used, which cause\n        // inaccurately locating.\n\n        if (elOption.hv && elOption.hv[1]) {\n          elOptionStyle.textVerticalAlign = elOptionStyle.textBaseline = null;\n        } // Compatible with previous setting: both support fill and textFill,\n        // stroke and textStroke.\n\n\n        !elOptionStyle.hasOwnProperty('textFill') && elOptionStyle.fill && (elOptionStyle.textFill = elOptionStyle.fill);\n        !elOptionStyle.hasOwnProperty('textStroke') && elOptionStyle.stroke && (elOptionStyle.textStroke = elOptionStyle.stroke);\n      } // Remove unnecessary props to avoid potential problems.\n\n\n      var elOptionCleaned = getCleanedElOption(elOption); // For simple, do not support parent change, otherwise reorder is needed.\n\n      if (!$action || $action === 'merge') {\n        existEl ? existEl.attr(elOptionCleaned) : createEl(id, targetElParent, elOptionCleaned, elMap);\n      } else if ($action === 'replace') {\n        removeEl(existEl, elMap);\n        createEl(id, targetElParent, elOptionCleaned, elMap);\n      } else if ($action === 'remove') {\n        removeEl(existEl, elMap);\n      }\n\n      var el = elMap.get(id);\n\n      if (el) {\n        el.__ecGraphicWidth = elOption.width;\n        el.__ecGraphicHeight = elOption.height;\n      }\n    });\n  },\n\n  /**\n   * Locate graphic elements.\n   *\n   * @private\n   * @param {Object} graphicModel graphic model\n   * @param {module:echarts/ExtensionAPI} api extension API\n   */\n  _relocate: function (graphicModel, api) {\n    var elOptions = graphicModel.option.elements;\n    var rootGroup = this.group;\n    var elMap = this._elMap; // Bottom-up tranvese all elements (consider ec resize) to locate elements.\n\n    for (var i = elOptions.length - 1; i >= 0; i--) {\n      var elOption = elOptions[i];\n      var el = elMap.get(elOption.id);\n\n      if (!el) {\n        continue;\n      }\n\n      var parentEl = el.parent;\n      var containerInfo = parentEl === rootGroup ? {\n        width: api.getWidth(),\n        height: api.getHeight()\n      } : {\n        // Like 'position:absolut' in css, default 0.\n        width: parentEl.__ecGraphicWidth || 0,\n        height: parentEl.__ecGraphicHeight || 0\n      };\n      layoutUtil.positionElement(el, elOption, containerInfo, null, {\n        hv: elOption.hv,\n        boundingMode: elOption.bounding\n      });\n    }\n  },\n\n  /**\n   * Clear all elements.\n   *\n   * @private\n   */\n  _clear: function () {\n    var elMap = this._elMap;\n    elMap.each(function (el) {\n      removeEl(el, elMap);\n    });\n    this._elMap = zrUtil.createHashMap();\n  },\n\n  /**\n   * @override\n   */\n  dispose: function () {\n    this._clear();\n  }\n});\n\nfunction createEl(id, targetElParent, elOption, elMap) {\n  var graphicType = elOption.type;\n  var Clz = graphicUtil[graphicType.charAt(0).toUpperCase() + graphicType.slice(1)];\n  var el = new Clz(elOption);\n  targetElParent.add(el);\n  elMap.set(id, el);\n  el.__ecGraphicId = id;\n}\n\nfunction removeEl(existEl, elMap) {\n  var existElParent = existEl && existEl.parent;\n\n  if (existElParent) {\n    existEl.type === 'group' && existEl.traverse(function (el) {\n      removeEl(el, elMap);\n    });\n    elMap.removeKey(existEl.__ecGraphicId);\n    existElParent.remove(existEl);\n  }\n} // Remove unnecessary props to avoid potential problems.\n\n\nfunction getCleanedElOption(elOption) {\n  elOption = zrUtil.extend({}, elOption);\n  zrUtil.each(['id', 'parentId', '$action', 'hv', 'bounding'].concat(layoutUtil.LOCATION_PARAMS), function (name) {\n    delete elOption[name];\n  });\n  return elOption;\n}\n\nfunction isSetLoc(obj, props) {\n  var isSet;\n  zrUtil.each(props, function (prop) {\n    obj[prop] != null && obj[prop] !== 'auto' && (isSet = true);\n  });\n  return isSet;\n}\n\nfunction setKeyInfoToNewElOption(resultItem, newElOption) {\n  var existElOption = resultItem.exist; // Set id and type after id assigned.\n\n  newElOption.id = resultItem.keyInfo.id;\n  !newElOption.type && existElOption && (newElOption.type = existElOption.type); // Set parent id if not specified\n\n  if (newElOption.parentId == null) {\n    var newElParentOption = newElOption.parentOption;\n\n    if (newElParentOption) {\n      newElOption.parentId = newElParentOption.id;\n    } else if (existElOption) {\n      newElOption.parentId = existElOption.parentId;\n    }\n  } // Clear\n\n\n  newElOption.parentOption = null;\n}\n\nfunction mergeNewElOptionToExist(existList, index, newElOption) {\n  // Update existing options, for `getOption` feature.\n  var newElOptCopy = zrUtil.extend({}, newElOption);\n  var existElOption = existList[index];\n  var $action = newElOption.$action || 'merge';\n\n  if ($action === 'merge') {\n    if (existElOption) {\n      // We can ensure that newElOptCopy and existElOption are not\n      // the same object, so `merge` will not change newElOptCopy.\n      zrUtil.merge(existElOption, newElOptCopy, true); // Rigid body, use ignoreSize.\n\n      layoutUtil.mergeLayoutParam(existElOption, newElOptCopy, {\n        ignoreSize: true\n      }); // Will be used in render.\n\n      layoutUtil.copyLayoutParams(newElOption, existElOption);\n    } else {\n      existList[index] = newElOptCopy;\n    }\n  } else if ($action === 'replace') {\n    existList[index] = newElOptCopy;\n  } else if ($action === 'remove') {\n    // null will be cleaned later.\n    existElOption && (existList[index] = null);\n  }\n}\n\nfunction setLayoutInfoToExist(existItem, newElOption) {\n  if (!existItem) {\n    return;\n  }\n\n  existItem.hv = newElOption.hv = [// Rigid body, dont care `width`.\n  isSetLoc(newElOption, ['left', 'right']), // Rigid body, dont care `height`.\n  isSetLoc(newElOption, ['top', 'bottom'])]; // Give default group size. Otherwise layout error may occur.\n\n  if (existItem.type === 'group') {\n    existItem.width == null && (existItem.width = newElOption.width = 0);\n    existItem.height == null && (existItem.height = newElOption.height = 0);\n  }\n}"]},"metadata":{},"sourceType":"script"}