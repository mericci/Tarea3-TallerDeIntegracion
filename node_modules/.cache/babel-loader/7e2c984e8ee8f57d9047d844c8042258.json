{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar Path = require(\"zrender/lib/graphic/Path\");\n/**\n * @module echarts/chart/helper/Symbol\n */\n\n\nvar WhiskerPath = Path.extend({\n  type: 'whiskerInBox',\n  shape: {},\n  buildPath: function (ctx, shape) {\n    for (var i in shape) {\n      if (shape.hasOwnProperty(i) && i.indexOf('ends') === 0) {\n        var pts = shape[i];\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        ctx.lineTo(pts[1][0], pts[1][1]);\n      }\n    }\n  }\n});\n/**\n * @constructor\n * @alias {module:echarts/chart/helper/WhiskerBox}\n * @param {module:echarts/data/List} data\n * @param {number} idx\n * @param {Function} styleUpdater\n * @param {boolean} isInit\n * @extends {module:zrender/graphic/Group}\n */\n\nfunction WhiskerBox(data, idx, styleUpdater, isInit) {\n  graphic.Group.call(this);\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.bodyIndex;\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.whiskerIndex;\n  /**\n   * @type {Function}\n   */\n\n  this.styleUpdater = styleUpdater;\n\n  this._createContent(data, idx, isInit);\n\n  this.updateData(data, idx, isInit);\n  /**\n   * Last series model.\n   * @type {module:echarts/model/Series}\n   */\n\n  this._seriesModel;\n}\n\nvar whiskerBoxProto = WhiskerBox.prototype;\n\nwhiskerBoxProto._createContent = function (data, idx, isInit) {\n  var itemLayout = data.getItemLayout(idx);\n  var constDim = itemLayout.chartLayout === 'horizontal' ? 1 : 0;\n  var count = 0; // Whisker element.\n\n  this.add(new graphic.Polygon({\n    shape: {\n      points: isInit ? transInit(itemLayout.bodyEnds, constDim, itemLayout) : itemLayout.bodyEnds\n    },\n    style: {\n      strokeNoScale: true\n    },\n    z2: 100\n  }));\n  this.bodyIndex = count++; // Box element.\n\n  var whiskerEnds = zrUtil.map(itemLayout.whiskerEnds, function (ends) {\n    return isInit ? transInit(ends, constDim, itemLayout) : ends;\n  });\n  this.add(new WhiskerPath({\n    shape: makeWhiskerEndsShape(whiskerEnds),\n    style: {\n      strokeNoScale: true\n    },\n    z2: 100\n  }));\n  this.whiskerIndex = count++;\n};\n\nfunction transInit(points, dim, itemLayout) {\n  return zrUtil.map(points, function (point) {\n    point = point.slice();\n    point[dim] = itemLayout.initBaseline;\n    return point;\n  });\n}\n\nfunction makeWhiskerEndsShape(whiskerEnds) {\n  // zr animation only support 2-dim array.\n  var shape = {};\n  zrUtil.each(whiskerEnds, function (ends, i) {\n    shape['ends' + i] = ends;\n  });\n  return shape;\n}\n/**\n * Update symbol properties\n * @param  {module:echarts/data/List} data\n * @param  {number} idx\n */\n\n\nwhiskerBoxProto.updateData = function (data, idx, isInit) {\n  var seriesModel = this._seriesModel = data.hostModel;\n  var itemLayout = data.getItemLayout(idx);\n  var updateMethod = graphic[isInit ? 'initProps' : 'updateProps']; // this.childAt(this.bodyIndex).stopAnimation(true);\n  // this.childAt(this.whiskerIndex).stopAnimation(true);\n\n  updateMethod(this.childAt(this.bodyIndex), {\n    shape: {\n      points: itemLayout.bodyEnds\n    }\n  }, seriesModel, idx);\n  updateMethod(this.childAt(this.whiskerIndex), {\n    shape: makeWhiskerEndsShape(itemLayout.whiskerEnds)\n  }, seriesModel, idx);\n  this.styleUpdater.call(null, this, data, idx);\n};\n\nzrUtil.inherits(WhiskerBox, graphic.Group);\n/**\n * @constructor\n * @alias module:echarts/chart/helper/WhiskerBoxDraw\n */\n\nfunction WhiskerBoxDraw(styleUpdater) {\n  this.group = new graphic.Group();\n  this.styleUpdater = styleUpdater;\n}\n\nvar whiskerBoxDrawProto = WhiskerBoxDraw.prototype;\n/**\n * Update symbols draw by new data\n * @param {module:echarts/data/List} data\n */\n\nwhiskerBoxDrawProto.updateData = function (data) {\n  var group = this.group;\n  var oldData = this._data;\n  var styleUpdater = this.styleUpdater;\n  data.diff(oldData).add(function (newIdx) {\n    if (data.hasValue(newIdx)) {\n      var symbolEl = new WhiskerBox(data, newIdx, styleUpdater, true);\n      data.setItemGraphicEl(newIdx, symbolEl);\n      group.add(symbolEl);\n    }\n  }).update(function (newIdx, oldIdx) {\n    var symbolEl = oldData.getItemGraphicEl(oldIdx); // Empty data\n\n    if (!data.hasValue(newIdx)) {\n      group.remove(symbolEl);\n      return;\n    }\n\n    if (!symbolEl) {\n      symbolEl = new WhiskerBox(data, newIdx, styleUpdater);\n    } else {\n      symbolEl.updateData(data, newIdx);\n    } // Add back\n\n\n    group.add(symbolEl);\n    data.setItemGraphicEl(newIdx, symbolEl);\n  }).remove(function (oldIdx) {\n    var el = oldData.getItemGraphicEl(oldIdx);\n    el && group.remove(el);\n  }).execute();\n  this._data = data;\n};\n/**\n * Remove symbols.\n * @param {module:echarts/data/List} data\n */\n\n\nwhiskerBoxDrawProto.remove = function () {\n  var group = this.group;\n  var data = this._data;\n  this._data = null;\n  data && data.eachItemGraphicEl(function (el) {\n    el && group.remove(el);\n  });\n};\n\nvar _default = WhiskerBoxDraw;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/helper/WhiskerBoxDraw.js"],"names":["zrUtil","require","graphic","Path","WhiskerPath","extend","type","shape","buildPath","ctx","i","hasOwnProperty","indexOf","pts","moveTo","lineTo","WhiskerBox","data","idx","styleUpdater","isInit","Group","call","bodyIndex","whiskerIndex","_createContent","updateData","_seriesModel","whiskerBoxProto","prototype","itemLayout","getItemLayout","constDim","chartLayout","count","add","Polygon","points","transInit","bodyEnds","style","strokeNoScale","z2","whiskerEnds","map","ends","makeWhiskerEndsShape","dim","point","slice","initBaseline","each","seriesModel","hostModel","updateMethod","childAt","inherits","WhiskerBoxDraw","group","whiskerBoxDrawProto","oldData","_data","diff","newIdx","hasValue","symbolEl","setItemGraphicEl","update","oldIdx","getItemGraphicEl","remove","el","execute","eachItemGraphicEl","_default","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar Path = require(\"zrender/lib/graphic/Path\");\n\n/**\n * @module echarts/chart/helper/Symbol\n */\nvar WhiskerPath = Path.extend({\n  type: 'whiskerInBox',\n  shape: {},\n  buildPath: function (ctx, shape) {\n    for (var i in shape) {\n      if (shape.hasOwnProperty(i) && i.indexOf('ends') === 0) {\n        var pts = shape[i];\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        ctx.lineTo(pts[1][0], pts[1][1]);\n      }\n    }\n  }\n});\n/**\n * @constructor\n * @alias {module:echarts/chart/helper/WhiskerBox}\n * @param {module:echarts/data/List} data\n * @param {number} idx\n * @param {Function} styleUpdater\n * @param {boolean} isInit\n * @extends {module:zrender/graphic/Group}\n */\n\nfunction WhiskerBox(data, idx, styleUpdater, isInit) {\n  graphic.Group.call(this);\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.bodyIndex;\n  /**\n   * @type {number}\n   * @readOnly\n   */\n\n  this.whiskerIndex;\n  /**\n   * @type {Function}\n   */\n\n  this.styleUpdater = styleUpdater;\n\n  this._createContent(data, idx, isInit);\n\n  this.updateData(data, idx, isInit);\n  /**\n   * Last series model.\n   * @type {module:echarts/model/Series}\n   */\n\n  this._seriesModel;\n}\n\nvar whiskerBoxProto = WhiskerBox.prototype;\n\nwhiskerBoxProto._createContent = function (data, idx, isInit) {\n  var itemLayout = data.getItemLayout(idx);\n  var constDim = itemLayout.chartLayout === 'horizontal' ? 1 : 0;\n  var count = 0; // Whisker element.\n\n  this.add(new graphic.Polygon({\n    shape: {\n      points: isInit ? transInit(itemLayout.bodyEnds, constDim, itemLayout) : itemLayout.bodyEnds\n    },\n    style: {\n      strokeNoScale: true\n    },\n    z2: 100\n  }));\n  this.bodyIndex = count++; // Box element.\n\n  var whiskerEnds = zrUtil.map(itemLayout.whiskerEnds, function (ends) {\n    return isInit ? transInit(ends, constDim, itemLayout) : ends;\n  });\n  this.add(new WhiskerPath({\n    shape: makeWhiskerEndsShape(whiskerEnds),\n    style: {\n      strokeNoScale: true\n    },\n    z2: 100\n  }));\n  this.whiskerIndex = count++;\n};\n\nfunction transInit(points, dim, itemLayout) {\n  return zrUtil.map(points, function (point) {\n    point = point.slice();\n    point[dim] = itemLayout.initBaseline;\n    return point;\n  });\n}\n\nfunction makeWhiskerEndsShape(whiskerEnds) {\n  // zr animation only support 2-dim array.\n  var shape = {};\n  zrUtil.each(whiskerEnds, function (ends, i) {\n    shape['ends' + i] = ends;\n  });\n  return shape;\n}\n/**\n * Update symbol properties\n * @param  {module:echarts/data/List} data\n * @param  {number} idx\n */\n\n\nwhiskerBoxProto.updateData = function (data, idx, isInit) {\n  var seriesModel = this._seriesModel = data.hostModel;\n  var itemLayout = data.getItemLayout(idx);\n  var updateMethod = graphic[isInit ? 'initProps' : 'updateProps']; // this.childAt(this.bodyIndex).stopAnimation(true);\n  // this.childAt(this.whiskerIndex).stopAnimation(true);\n\n  updateMethod(this.childAt(this.bodyIndex), {\n    shape: {\n      points: itemLayout.bodyEnds\n    }\n  }, seriesModel, idx);\n  updateMethod(this.childAt(this.whiskerIndex), {\n    shape: makeWhiskerEndsShape(itemLayout.whiskerEnds)\n  }, seriesModel, idx);\n  this.styleUpdater.call(null, this, data, idx);\n};\n\nzrUtil.inherits(WhiskerBox, graphic.Group);\n/**\n * @constructor\n * @alias module:echarts/chart/helper/WhiskerBoxDraw\n */\n\nfunction WhiskerBoxDraw(styleUpdater) {\n  this.group = new graphic.Group();\n  this.styleUpdater = styleUpdater;\n}\n\nvar whiskerBoxDrawProto = WhiskerBoxDraw.prototype;\n/**\n * Update symbols draw by new data\n * @param {module:echarts/data/List} data\n */\n\nwhiskerBoxDrawProto.updateData = function (data) {\n  var group = this.group;\n  var oldData = this._data;\n  var styleUpdater = this.styleUpdater;\n  data.diff(oldData).add(function (newIdx) {\n    if (data.hasValue(newIdx)) {\n      var symbolEl = new WhiskerBox(data, newIdx, styleUpdater, true);\n      data.setItemGraphicEl(newIdx, symbolEl);\n      group.add(symbolEl);\n    }\n  }).update(function (newIdx, oldIdx) {\n    var symbolEl = oldData.getItemGraphicEl(oldIdx); // Empty data\n\n    if (!data.hasValue(newIdx)) {\n      group.remove(symbolEl);\n      return;\n    }\n\n    if (!symbolEl) {\n      symbolEl = new WhiskerBox(data, newIdx, styleUpdater);\n    } else {\n      symbolEl.updateData(data, newIdx);\n    } // Add back\n\n\n    group.add(symbolEl);\n    data.setItemGraphicEl(newIdx, symbolEl);\n  }).remove(function (oldIdx) {\n    var el = oldData.getItemGraphicEl(oldIdx);\n    el && group.remove(el);\n  }).execute();\n  this._data = data;\n};\n/**\n * Remove symbols.\n * @param {module:echarts/data/List} data\n */\n\n\nwhiskerBoxDrawProto.remove = function () {\n  var group = this.group;\n  var data = this._data;\n  this._data = null;\n  data && data.eachItemGraphicEl(function (el) {\n    el && group.remove(el);\n  });\n};\n\nvar _default = WhiskerBoxDraw;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}