{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar List = require(\"../../data/List\");\n\nvar numberUtil = require(\"../../util/number\");\n\nvar markerHelper = require(\"./markerHelper\");\n\nvar LineDraw = require(\"../../chart/helper/LineDraw\");\n\nvar MarkerView = require(\"./MarkerView\");\n\nvar markLineTransform = function (seriesModel, coordSys, mlModel, item) {\n  var data = seriesModel.getData(); // Special type markLine like 'min', 'max', 'average'\n\n  var mlType = item.type;\n\n  if (!zrUtil.isArray(item) && (mlType === 'min' || mlType === 'max' || mlType === 'average' // In case\n  // data: [{\n  //   yAxis: 10\n  // }]\n  || item.xAxis != null || item.yAxis != null)) {\n    var valueAxis;\n    var valueDataDim;\n    var value;\n\n    if (item.yAxis != null || item.xAxis != null) {\n      valueDataDim = item.yAxis != null ? 'y' : 'x';\n      valueAxis = coordSys.getAxis(valueDataDim);\n      value = zrUtil.retrieve(item.yAxis, item.xAxis);\n    } else {\n      var axisInfo = markerHelper.getAxisInfo(item, data, coordSys, seriesModel);\n      valueDataDim = axisInfo.valueDataDim;\n      valueAxis = axisInfo.valueAxis;\n      value = markerHelper.numCalculate(data, valueDataDim, mlType);\n    }\n\n    var valueIndex = valueDataDim === 'x' ? 0 : 1;\n    var baseIndex = 1 - valueIndex;\n    var mlFrom = zrUtil.clone(item);\n    var mlTo = {};\n    mlFrom.type = null;\n    mlFrom.coord = [];\n    mlTo.coord = [];\n    mlFrom.coord[baseIndex] = -Infinity;\n    mlTo.coord[baseIndex] = Infinity;\n    var precision = mlModel.get('precision');\n\n    if (precision >= 0 && typeof value === 'number') {\n      value = +value.toFixed(Math.min(precision, 20));\n    }\n\n    mlFrom.coord[valueIndex] = mlTo.coord[valueIndex] = value;\n    item = [mlFrom, mlTo, {\n      // Extra option for tooltip and label\n      type: mlType,\n      valueIndex: item.valueIndex,\n      // Force to use the value of calculated value.\n      value: value\n    }];\n  }\n\n  item = [markerHelper.dataTransform(seriesModel, item[0]), markerHelper.dataTransform(seriesModel, item[1]), zrUtil.extend({}, item[2])]; // Avoid line data type is extended by from(to) data type\n\n  item[2].type = item[2].type || ''; // Merge from option and to option into line option\n\n  zrUtil.merge(item[2], item[0]);\n  zrUtil.merge(item[2], item[1]);\n  return item;\n};\n\nfunction isInifinity(val) {\n  return !isNaN(val) && !isFinite(val);\n} // If a markLine has one dim\n\n\nfunction ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {\n  var otherDimIndex = 1 - dimIndex;\n  var dimName = coordSys.dimensions[dimIndex];\n  return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]) && fromCoord[dimIndex] === toCoord[dimIndex] && coordSys.getAxis(dimName).containData(fromCoord[dimIndex]);\n}\n\nfunction markLineFilter(coordSys, item) {\n  if (coordSys.type === 'cartesian2d') {\n    var fromCoord = item[0].coord;\n    var toCoord = item[1].coord; // In case\n    // {\n    //  markLine: {\n    //    data: [{ yAxis: 2 }]\n    //  }\n    // }\n\n    if (fromCoord && toCoord && (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))) {\n      return true;\n    }\n  }\n\n  return markerHelper.dataFilter(coordSys, item[0]) && markerHelper.dataFilter(coordSys, item[1]);\n}\n\nfunction updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api) {\n  var coordSys = seriesModel.coordinateSystem;\n  var itemModel = data.getItemModel(idx);\n  var point;\n  var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());\n  var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());\n\n  if (!isNaN(xPx) && !isNaN(yPx)) {\n    point = [xPx, yPx];\n  } else {\n    // Chart like bar may have there own marker positioning logic\n    if (seriesModel.getMarkerPosition) {\n      // Use the getMarkerPoisition\n      point = seriesModel.getMarkerPosition(data.getValues(data.dimensions, idx));\n    } else {\n      var dims = coordSys.dimensions;\n      var x = data.get(dims[0], idx);\n      var y = data.get(dims[1], idx);\n      point = coordSys.dataToPoint([x, y]);\n    } // Expand line to the edge of grid if value on one axis is Inifnity\n    // In case\n    //  markLine: {\n    //    data: [{\n    //      yAxis: 2\n    //      // or\n    //      type: 'average'\n    //    }]\n    //  }\n\n\n    if (coordSys.type === 'cartesian2d') {\n      var xAxis = coordSys.getAxis('x');\n      var yAxis = coordSys.getAxis('y');\n      var dims = coordSys.dimensions;\n\n      if (isInifinity(data.get(dims[0], idx))) {\n        point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[isFrom ? 0 : 1]);\n      } else if (isInifinity(data.get(dims[1], idx))) {\n        point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[isFrom ? 0 : 1]);\n      }\n    } // Use x, y if has any\n\n\n    if (!isNaN(xPx)) {\n      point[0] = xPx;\n    }\n\n    if (!isNaN(yPx)) {\n      point[1] = yPx;\n    }\n  }\n\n  data.setItemLayout(idx, point);\n}\n\nvar _default = MarkerView.extend({\n  type: 'markLine',\n  updateLayout: function (markLineModel, ecModel, api) {\n    ecModel.eachSeries(function (seriesModel) {\n      var mlModel = seriesModel.markLineModel;\n\n      if (mlModel) {\n        var mlData = mlModel.getData();\n        var fromData = mlModel.__from;\n        var toData = mlModel.__to; // Update visual and layout of from symbol and to symbol\n\n        fromData.each(function (idx) {\n          updateSingleMarkerEndLayout(fromData, idx, true, seriesModel, api);\n          updateSingleMarkerEndLayout(toData, idx, false, seriesModel, api);\n        }); // Update layout of line\n\n        mlData.each(function (idx) {\n          mlData.setItemLayout(idx, [fromData.getItemLayout(idx), toData.getItemLayout(idx)]);\n        });\n        this.markerGroupMap.get(seriesModel.id).updateLayout();\n      }\n    }, this);\n  },\n  renderSeries: function (seriesModel, mlModel, ecModel, api) {\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesId = seriesModel.id;\n    var seriesData = seriesModel.getData();\n    var lineDrawMap = this.markerGroupMap;\n    var lineDraw = lineDrawMap.get(seriesId) || lineDrawMap.set(seriesId, new LineDraw());\n    this.group.add(lineDraw.group);\n    var mlData = createList(coordSys, seriesModel, mlModel);\n    var fromData = mlData.from;\n    var toData = mlData.to;\n    var lineData = mlData.line;\n    mlModel.__from = fromData;\n    mlModel.__to = toData; // Line data for tooltip and formatter\n\n    mlModel.setData(lineData);\n    var symbolType = mlModel.get('symbol');\n    var symbolSize = mlModel.get('symbolSize');\n\n    if (!zrUtil.isArray(symbolType)) {\n      symbolType = [symbolType, symbolType];\n    }\n\n    if (typeof symbolSize === 'number') {\n      symbolSize = [symbolSize, symbolSize];\n    } // Update visual and layout of from symbol and to symbol\n\n\n    mlData.from.each(function (idx) {\n      updateDataVisualAndLayout(fromData, idx, true);\n      updateDataVisualAndLayout(toData, idx, false);\n    }); // Update visual and layout of line\n\n    lineData.each(function (idx) {\n      var lineColor = lineData.getItemModel(idx).get('lineStyle.normal.color');\n      lineData.setItemVisual(idx, {\n        color: lineColor || fromData.getItemVisual(idx, 'color')\n      });\n      lineData.setItemLayout(idx, [fromData.getItemLayout(idx), toData.getItemLayout(idx)]);\n      lineData.setItemVisual(idx, {\n        'fromSymbolSize': fromData.getItemVisual(idx, 'symbolSize'),\n        'fromSymbol': fromData.getItemVisual(idx, 'symbol'),\n        'toSymbolSize': toData.getItemVisual(idx, 'symbolSize'),\n        'toSymbol': toData.getItemVisual(idx, 'symbol')\n      });\n    });\n    lineDraw.updateData(lineData); // Set host model for tooltip\n    // FIXME\n\n    mlData.line.eachItemGraphicEl(function (el, idx) {\n      el.traverse(function (child) {\n        child.dataModel = mlModel;\n      });\n    });\n\n    function updateDataVisualAndLayout(data, idx, isFrom) {\n      var itemModel = data.getItemModel(idx);\n      updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api);\n      data.setItemVisual(idx, {\n        symbolSize: itemModel.get('symbolSize') || symbolSize[isFrom ? 0 : 1],\n        symbol: itemModel.get('symbol', true) || symbolType[isFrom ? 0 : 1],\n        color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color')\n      });\n    }\n\n    lineDraw.__keep = true;\n    lineDraw.group.silent = mlModel.get('silent') || seriesModel.get('silent');\n  }\n});\n/**\n * @inner\n * @param {module:echarts/coord/*} coordSys\n * @param {module:echarts/model/Series} seriesModel\n * @param {module:echarts/model/Model} mpModel\n */\n\n\nfunction createList(coordSys, seriesModel, mlModel) {\n  var coordDimsInfos;\n\n  if (coordSys) {\n    coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {\n      var info = seriesModel.getData().getDimensionInfo(seriesModel.coordDimToDataDim(coordDim)[0]) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys\n\n      info.name = coordDim;\n      return info;\n    });\n  } else {\n    coordDimsInfos = [{\n      name: 'value',\n      type: 'float'\n    }];\n  }\n\n  var fromData = new List(coordDimsInfos, mlModel);\n  var toData = new List(coordDimsInfos, mlModel); // No dimensions\n\n  var lineData = new List([], mlModel);\n  var optData = zrUtil.map(mlModel.get('data'), zrUtil.curry(markLineTransform, seriesModel, coordSys, mlModel));\n\n  if (coordSys) {\n    optData = zrUtil.filter(optData, zrUtil.curry(markLineFilter, coordSys));\n  }\n\n  var dimValueGetter = coordSys ? markerHelper.dimValueGetter : function (item) {\n    return item.value;\n  };\n  fromData.initData(zrUtil.map(optData, function (item) {\n    return item[0];\n  }), null, dimValueGetter);\n  toData.initData(zrUtil.map(optData, function (item) {\n    return item[1];\n  }), null, dimValueGetter);\n  lineData.initData(zrUtil.map(optData, function (item) {\n    return item[2];\n  }));\n  lineData.hasItemOption = true;\n  return {\n    from: fromData,\n    to: toData,\n    line: lineData\n  };\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/marker/MarkLineView.js"],"names":["zrUtil","require","List","numberUtil","markerHelper","LineDraw","MarkerView","markLineTransform","seriesModel","coordSys","mlModel","item","data","getData","mlType","type","isArray","xAxis","yAxis","valueAxis","valueDataDim","value","getAxis","retrieve","axisInfo","getAxisInfo","numCalculate","valueIndex","baseIndex","mlFrom","clone","mlTo","coord","Infinity","precision","get","toFixed","Math","min","dataTransform","extend","merge","isInifinity","val","isNaN","isFinite","ifMarkLineHasOnlyDim","dimIndex","fromCoord","toCoord","otherDimIndex","dimName","dimensions","containData","markLineFilter","dataFilter","updateSingleMarkerEndLayout","idx","isFrom","api","coordinateSystem","itemModel","getItemModel","point","xPx","parsePercent","getWidth","yPx","getHeight","getMarkerPosition","getValues","dims","x","y","dataToPoint","toGlobalCoord","getExtent","setItemLayout","_default","updateLayout","markLineModel","ecModel","eachSeries","mlData","fromData","__from","toData","__to","each","getItemLayout","markerGroupMap","id","renderSeries","seriesId","seriesData","lineDrawMap","lineDraw","set","group","add","createList","from","to","lineData","line","setData","symbolType","symbolSize","updateDataVisualAndLayout","lineColor","setItemVisual","color","getItemVisual","updateData","eachItemGraphicEl","el","traverse","child","dataModel","symbol","getVisual","__keep","silent","coordDimsInfos","map","coordDim","info","getDimensionInfo","coordDimToDataDim","name","optData","curry","filter","dimValueGetter","initData","hasItemOption","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar List = require(\"../../data/List\");\n\nvar numberUtil = require(\"../../util/number\");\n\nvar markerHelper = require(\"./markerHelper\");\n\nvar LineDraw = require(\"../../chart/helper/LineDraw\");\n\nvar MarkerView = require(\"./MarkerView\");\n\nvar markLineTransform = function (seriesModel, coordSys, mlModel, item) {\n  var data = seriesModel.getData(); // Special type markLine like 'min', 'max', 'average'\n\n  var mlType = item.type;\n\n  if (!zrUtil.isArray(item) && (mlType === 'min' || mlType === 'max' || mlType === 'average' // In case\n  // data: [{\n  //   yAxis: 10\n  // }]\n  || item.xAxis != null || item.yAxis != null)) {\n    var valueAxis;\n    var valueDataDim;\n    var value;\n\n    if (item.yAxis != null || item.xAxis != null) {\n      valueDataDim = item.yAxis != null ? 'y' : 'x';\n      valueAxis = coordSys.getAxis(valueDataDim);\n      value = zrUtil.retrieve(item.yAxis, item.xAxis);\n    } else {\n      var axisInfo = markerHelper.getAxisInfo(item, data, coordSys, seriesModel);\n      valueDataDim = axisInfo.valueDataDim;\n      valueAxis = axisInfo.valueAxis;\n      value = markerHelper.numCalculate(data, valueDataDim, mlType);\n    }\n\n    var valueIndex = valueDataDim === 'x' ? 0 : 1;\n    var baseIndex = 1 - valueIndex;\n    var mlFrom = zrUtil.clone(item);\n    var mlTo = {};\n    mlFrom.type = null;\n    mlFrom.coord = [];\n    mlTo.coord = [];\n    mlFrom.coord[baseIndex] = -Infinity;\n    mlTo.coord[baseIndex] = Infinity;\n    var precision = mlModel.get('precision');\n\n    if (precision >= 0 && typeof value === 'number') {\n      value = +value.toFixed(Math.min(precision, 20));\n    }\n\n    mlFrom.coord[valueIndex] = mlTo.coord[valueIndex] = value;\n    item = [mlFrom, mlTo, {\n      // Extra option for tooltip and label\n      type: mlType,\n      valueIndex: item.valueIndex,\n      // Force to use the value of calculated value.\n      value: value\n    }];\n  }\n\n  item = [markerHelper.dataTransform(seriesModel, item[0]), markerHelper.dataTransform(seriesModel, item[1]), zrUtil.extend({}, item[2])]; // Avoid line data type is extended by from(to) data type\n\n  item[2].type = item[2].type || ''; // Merge from option and to option into line option\n\n  zrUtil.merge(item[2], item[0]);\n  zrUtil.merge(item[2], item[1]);\n  return item;\n};\n\nfunction isInifinity(val) {\n  return !isNaN(val) && !isFinite(val);\n} // If a markLine has one dim\n\n\nfunction ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {\n  var otherDimIndex = 1 - dimIndex;\n  var dimName = coordSys.dimensions[dimIndex];\n  return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]) && fromCoord[dimIndex] === toCoord[dimIndex] && coordSys.getAxis(dimName).containData(fromCoord[dimIndex]);\n}\n\nfunction markLineFilter(coordSys, item) {\n  if (coordSys.type === 'cartesian2d') {\n    var fromCoord = item[0].coord;\n    var toCoord = item[1].coord; // In case\n    // {\n    //  markLine: {\n    //    data: [{ yAxis: 2 }]\n    //  }\n    // }\n\n    if (fromCoord && toCoord && (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))) {\n      return true;\n    }\n  }\n\n  return markerHelper.dataFilter(coordSys, item[0]) && markerHelper.dataFilter(coordSys, item[1]);\n}\n\nfunction updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api) {\n  var coordSys = seriesModel.coordinateSystem;\n  var itemModel = data.getItemModel(idx);\n  var point;\n  var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());\n  var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());\n\n  if (!isNaN(xPx) && !isNaN(yPx)) {\n    point = [xPx, yPx];\n  } else {\n    // Chart like bar may have there own marker positioning logic\n    if (seriesModel.getMarkerPosition) {\n      // Use the getMarkerPoisition\n      point = seriesModel.getMarkerPosition(data.getValues(data.dimensions, idx));\n    } else {\n      var dims = coordSys.dimensions;\n      var x = data.get(dims[0], idx);\n      var y = data.get(dims[1], idx);\n      point = coordSys.dataToPoint([x, y]);\n    } // Expand line to the edge of grid if value on one axis is Inifnity\n    // In case\n    //  markLine: {\n    //    data: [{\n    //      yAxis: 2\n    //      // or\n    //      type: 'average'\n    //    }]\n    //  }\n\n\n    if (coordSys.type === 'cartesian2d') {\n      var xAxis = coordSys.getAxis('x');\n      var yAxis = coordSys.getAxis('y');\n      var dims = coordSys.dimensions;\n\n      if (isInifinity(data.get(dims[0], idx))) {\n        point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[isFrom ? 0 : 1]);\n      } else if (isInifinity(data.get(dims[1], idx))) {\n        point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[isFrom ? 0 : 1]);\n      }\n    } // Use x, y if has any\n\n\n    if (!isNaN(xPx)) {\n      point[0] = xPx;\n    }\n\n    if (!isNaN(yPx)) {\n      point[1] = yPx;\n    }\n  }\n\n  data.setItemLayout(idx, point);\n}\n\nvar _default = MarkerView.extend({\n  type: 'markLine',\n  updateLayout: function (markLineModel, ecModel, api) {\n    ecModel.eachSeries(function (seriesModel) {\n      var mlModel = seriesModel.markLineModel;\n\n      if (mlModel) {\n        var mlData = mlModel.getData();\n        var fromData = mlModel.__from;\n        var toData = mlModel.__to; // Update visual and layout of from symbol and to symbol\n\n        fromData.each(function (idx) {\n          updateSingleMarkerEndLayout(fromData, idx, true, seriesModel, api);\n          updateSingleMarkerEndLayout(toData, idx, false, seriesModel, api);\n        }); // Update layout of line\n\n        mlData.each(function (idx) {\n          mlData.setItemLayout(idx, [fromData.getItemLayout(idx), toData.getItemLayout(idx)]);\n        });\n        this.markerGroupMap.get(seriesModel.id).updateLayout();\n      }\n    }, this);\n  },\n  renderSeries: function (seriesModel, mlModel, ecModel, api) {\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesId = seriesModel.id;\n    var seriesData = seriesModel.getData();\n    var lineDrawMap = this.markerGroupMap;\n    var lineDraw = lineDrawMap.get(seriesId) || lineDrawMap.set(seriesId, new LineDraw());\n    this.group.add(lineDraw.group);\n    var mlData = createList(coordSys, seriesModel, mlModel);\n    var fromData = mlData.from;\n    var toData = mlData.to;\n    var lineData = mlData.line;\n    mlModel.__from = fromData;\n    mlModel.__to = toData; // Line data for tooltip and formatter\n\n    mlModel.setData(lineData);\n    var symbolType = mlModel.get('symbol');\n    var symbolSize = mlModel.get('symbolSize');\n\n    if (!zrUtil.isArray(symbolType)) {\n      symbolType = [symbolType, symbolType];\n    }\n\n    if (typeof symbolSize === 'number') {\n      symbolSize = [symbolSize, symbolSize];\n    } // Update visual and layout of from symbol and to symbol\n\n\n    mlData.from.each(function (idx) {\n      updateDataVisualAndLayout(fromData, idx, true);\n      updateDataVisualAndLayout(toData, idx, false);\n    }); // Update visual and layout of line\n\n    lineData.each(function (idx) {\n      var lineColor = lineData.getItemModel(idx).get('lineStyle.normal.color');\n      lineData.setItemVisual(idx, {\n        color: lineColor || fromData.getItemVisual(idx, 'color')\n      });\n      lineData.setItemLayout(idx, [fromData.getItemLayout(idx), toData.getItemLayout(idx)]);\n      lineData.setItemVisual(idx, {\n        'fromSymbolSize': fromData.getItemVisual(idx, 'symbolSize'),\n        'fromSymbol': fromData.getItemVisual(idx, 'symbol'),\n        'toSymbolSize': toData.getItemVisual(idx, 'symbolSize'),\n        'toSymbol': toData.getItemVisual(idx, 'symbol')\n      });\n    });\n    lineDraw.updateData(lineData); // Set host model for tooltip\n    // FIXME\n\n    mlData.line.eachItemGraphicEl(function (el, idx) {\n      el.traverse(function (child) {\n        child.dataModel = mlModel;\n      });\n    });\n\n    function updateDataVisualAndLayout(data, idx, isFrom) {\n      var itemModel = data.getItemModel(idx);\n      updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api);\n      data.setItemVisual(idx, {\n        symbolSize: itemModel.get('symbolSize') || symbolSize[isFrom ? 0 : 1],\n        symbol: itemModel.get('symbol', true) || symbolType[isFrom ? 0 : 1],\n        color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color')\n      });\n    }\n\n    lineDraw.__keep = true;\n    lineDraw.group.silent = mlModel.get('silent') || seriesModel.get('silent');\n  }\n});\n/**\n * @inner\n * @param {module:echarts/coord/*} coordSys\n * @param {module:echarts/model/Series} seriesModel\n * @param {module:echarts/model/Model} mpModel\n */\n\n\nfunction createList(coordSys, seriesModel, mlModel) {\n  var coordDimsInfos;\n\n  if (coordSys) {\n    coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {\n      var info = seriesModel.getData().getDimensionInfo(seriesModel.coordDimToDataDim(coordDim)[0]) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys\n\n      info.name = coordDim;\n      return info;\n    });\n  } else {\n    coordDimsInfos = [{\n      name: 'value',\n      type: 'float'\n    }];\n  }\n\n  var fromData = new List(coordDimsInfos, mlModel);\n  var toData = new List(coordDimsInfos, mlModel); // No dimensions\n\n  var lineData = new List([], mlModel);\n  var optData = zrUtil.map(mlModel.get('data'), zrUtil.curry(markLineTransform, seriesModel, coordSys, mlModel));\n\n  if (coordSys) {\n    optData = zrUtil.filter(optData, zrUtil.curry(markLineFilter, coordSys));\n  }\n\n  var dimValueGetter = coordSys ? markerHelper.dimValueGetter : function (item) {\n    return item.value;\n  };\n  fromData.initData(zrUtil.map(optData, function (item) {\n    return item[0];\n  }), null, dimValueGetter);\n  toData.initData(zrUtil.map(optData, function (item) {\n    return item[1];\n  }), null, dimValueGetter);\n  lineData.initData(zrUtil.map(optData, function (item) {\n    return item[2];\n  }));\n  lineData.hasItemOption = true;\n  return {\n    from: fromData,\n    to: toData,\n    line: lineData\n  };\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}