{"ast":null,"code":"var graphic = require(\"../../util/graphic\");\n\nvar echarts = require(\"../../echarts\");\n/**\n * @file  The file used to draw sankey view\n * @author  Deqing Li(annong035@gmail.com)\n */\n\n\nvar SankeyShape = graphic.extendShape({\n  shape: {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    cpx1: 0,\n    cpy1: 0,\n    cpx2: 0,\n    cpy2: 0,\n    extent: 0\n  },\n  buildPath: function (ctx, shape) {\n    var halfExtent = shape.extent / 2;\n    ctx.moveTo(shape.x1, shape.y1 - halfExtent);\n    ctx.bezierCurveTo(shape.cpx1, shape.cpy1 - halfExtent, shape.cpx2, shape.cpy2 - halfExtent, shape.x2, shape.y2 - halfExtent);\n    ctx.lineTo(shape.x2, shape.y2 + halfExtent);\n    ctx.bezierCurveTo(shape.cpx2, shape.cpy2 + halfExtent, shape.cpx1, shape.cpy1 + halfExtent, shape.x1, shape.y1 + halfExtent);\n    ctx.closePath();\n  }\n});\n\nvar _default = echarts.extendChartView({\n  type: 'sankey',\n\n  /**\n   * @private\n   * @type {module:echarts/chart/sankey/SankeySeries}\n   */\n  _model: null,\n  render: function (seriesModel, ecModel, api) {\n    var graph = seriesModel.getGraph();\n    var group = this.group;\n    var layoutInfo = seriesModel.layoutInfo;\n    var nodeData = seriesModel.getData();\n    var edgeData = seriesModel.getData('edge');\n    this._model = seriesModel;\n    group.removeAll();\n    group.attr('position', [layoutInfo.x, layoutInfo.y]); // generate a bezire Curve for each edge\n\n    graph.eachEdge(function (edge) {\n      var curve = new SankeyShape();\n      curve.dataIndex = edge.dataIndex;\n      curve.seriesIndex = seriesModel.seriesIndex;\n      curve.dataType = 'edge';\n      var lineStyleModel = edge.getModel('lineStyle.normal');\n      var curvature = lineStyleModel.get('curveness');\n      var n1Layout = edge.node1.getLayout();\n      var n2Layout = edge.node2.getLayout();\n      var edgeLayout = edge.getLayout();\n      curve.shape.extent = Math.max(1, edgeLayout.dy);\n      var x1 = n1Layout.x + n1Layout.dx;\n      var y1 = n1Layout.y + edgeLayout.sy + edgeLayout.dy / 2;\n      var x2 = n2Layout.x;\n      var y2 = n2Layout.y + edgeLayout.ty + edgeLayout.dy / 2;\n      var cpx1 = x1 * (1 - curvature) + x2 * curvature;\n      var cpy1 = y1;\n      var cpx2 = x1 * curvature + x2 * (1 - curvature);\n      var cpy2 = y2;\n      curve.setShape({\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        cpx1: cpx1,\n        cpy1: cpy1,\n        cpx2: cpx2,\n        cpy2: cpy2\n      });\n      curve.setStyle(lineStyleModel.getItemStyle()); // Special color, use source node color or target node color\n\n      switch (curve.style.fill) {\n        case 'source':\n          curve.style.fill = edge.node1.getVisual('color');\n          break;\n\n        case 'target':\n          curve.style.fill = edge.node2.getVisual('color');\n          break;\n      }\n\n      graphic.setHoverStyle(curve, edge.getModel('lineStyle.emphasis').getItemStyle());\n      group.add(curve);\n      edgeData.setItemGraphicEl(edge.dataIndex, curve);\n    }); // generate a rect  for each node\n\n    graph.eachNode(function (node) {\n      var layout = node.getLayout();\n      var itemModel = node.getModel();\n      var labelModel = itemModel.getModel('label.normal');\n      var labelHoverModel = itemModel.getModel('label.emphasis');\n      var rect = new graphic.Rect({\n        shape: {\n          x: layout.x,\n          y: layout.y,\n          width: node.getLayout().dx,\n          height: node.getLayout().dy\n        },\n        style: itemModel.getModel('itemStyle.normal').getItemStyle()\n      });\n      var hoverStyle = node.getModel('itemStyle.emphasis').getItemStyle();\n      graphic.setLabelStyle(rect.style, hoverStyle, labelModel, labelHoverModel, {\n        labelFetcher: seriesModel,\n        labelDataIndex: node.dataIndex,\n        defaultText: node.id,\n        isRectText: true\n      });\n      rect.setStyle('fill', node.getVisual('color'));\n      graphic.setHoverStyle(rect, hoverStyle);\n      group.add(rect);\n      nodeData.setItemGraphicEl(node.dataIndex, rect);\n      rect.dataType = 'node';\n    });\n\n    if (!this._data && seriesModel.get('animation')) {\n      group.setClipPath(createGridClipShape(group.getBoundingRect(), seriesModel, function () {\n        group.removeClipPath();\n      }));\n    }\n\n    this._data = seriesModel.getData();\n  },\n  dispose: function () {}\n}); // add animation to the view\n\n\nfunction createGridClipShape(rect, seriesModel, cb) {\n  var rectEl = new graphic.Rect({\n    shape: {\n      x: rect.x - 10,\n      y: rect.y - 10,\n      width: 0,\n      height: rect.height + 20\n    }\n  });\n  graphic.initProps(rectEl, {\n    shape: {\n      width: rect.width + 20,\n      height: rect.height + 20\n    }\n  }, seriesModel, cb);\n  return rectEl;\n}\n\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/chart/sankey/SankeyView.js"],"names":["graphic","require","echarts","SankeyShape","extendShape","shape","x1","y1","x2","y2","cpx1","cpy1","cpx2","cpy2","extent","buildPath","ctx","halfExtent","moveTo","bezierCurveTo","lineTo","closePath","_default","extendChartView","type","_model","render","seriesModel","ecModel","api","graph","getGraph","group","layoutInfo","nodeData","getData","edgeData","removeAll","attr","x","y","eachEdge","edge","curve","dataIndex","seriesIndex","dataType","lineStyleModel","getModel","curvature","get","n1Layout","node1","getLayout","n2Layout","node2","edgeLayout","Math","max","dy","dx","sy","ty","setShape","setStyle","getItemStyle","style","fill","getVisual","setHoverStyle","add","setItemGraphicEl","eachNode","node","layout","itemModel","labelModel","labelHoverModel","rect","Rect","width","height","hoverStyle","setLabelStyle","labelFetcher","labelDataIndex","defaultText","id","isRectText","_data","setClipPath","createGridClipShape","getBoundingRect","removeClipPath","dispose","cb","rectEl","initProps","module","exports"],"mappings":"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","sourcesContent":["var graphic = require(\"../../util/graphic\");\n\nvar echarts = require(\"../../echarts\");\n\n/**\n * @file  The file used to draw sankey view\n * @author  Deqing Li(annong035@gmail.com)\n */\nvar SankeyShape = graphic.extendShape({\n  shape: {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    cpx1: 0,\n    cpy1: 0,\n    cpx2: 0,\n    cpy2: 0,\n    extent: 0\n  },\n  buildPath: function (ctx, shape) {\n    var halfExtent = shape.extent / 2;\n    ctx.moveTo(shape.x1, shape.y1 - halfExtent);\n    ctx.bezierCurveTo(shape.cpx1, shape.cpy1 - halfExtent, shape.cpx2, shape.cpy2 - halfExtent, shape.x2, shape.y2 - halfExtent);\n    ctx.lineTo(shape.x2, shape.y2 + halfExtent);\n    ctx.bezierCurveTo(shape.cpx2, shape.cpy2 + halfExtent, shape.cpx1, shape.cpy1 + halfExtent, shape.x1, shape.y1 + halfExtent);\n    ctx.closePath();\n  }\n});\n\nvar _default = echarts.extendChartView({\n  type: 'sankey',\n\n  /**\n   * @private\n   * @type {module:echarts/chart/sankey/SankeySeries}\n   */\n  _model: null,\n  render: function (seriesModel, ecModel, api) {\n    var graph = seriesModel.getGraph();\n    var group = this.group;\n    var layoutInfo = seriesModel.layoutInfo;\n    var nodeData = seriesModel.getData();\n    var edgeData = seriesModel.getData('edge');\n    this._model = seriesModel;\n    group.removeAll();\n    group.attr('position', [layoutInfo.x, layoutInfo.y]); // generate a bezire Curve for each edge\n\n    graph.eachEdge(function (edge) {\n      var curve = new SankeyShape();\n      curve.dataIndex = edge.dataIndex;\n      curve.seriesIndex = seriesModel.seriesIndex;\n      curve.dataType = 'edge';\n      var lineStyleModel = edge.getModel('lineStyle.normal');\n      var curvature = lineStyleModel.get('curveness');\n      var n1Layout = edge.node1.getLayout();\n      var n2Layout = edge.node2.getLayout();\n      var edgeLayout = edge.getLayout();\n      curve.shape.extent = Math.max(1, edgeLayout.dy);\n      var x1 = n1Layout.x + n1Layout.dx;\n      var y1 = n1Layout.y + edgeLayout.sy + edgeLayout.dy / 2;\n      var x2 = n2Layout.x;\n      var y2 = n2Layout.y + edgeLayout.ty + edgeLayout.dy / 2;\n      var cpx1 = x1 * (1 - curvature) + x2 * curvature;\n      var cpy1 = y1;\n      var cpx2 = x1 * curvature + x2 * (1 - curvature);\n      var cpy2 = y2;\n      curve.setShape({\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        cpx1: cpx1,\n        cpy1: cpy1,\n        cpx2: cpx2,\n        cpy2: cpy2\n      });\n      curve.setStyle(lineStyleModel.getItemStyle()); // Special color, use source node color or target node color\n\n      switch (curve.style.fill) {\n        case 'source':\n          curve.style.fill = edge.node1.getVisual('color');\n          break;\n\n        case 'target':\n          curve.style.fill = edge.node2.getVisual('color');\n          break;\n      }\n\n      graphic.setHoverStyle(curve, edge.getModel('lineStyle.emphasis').getItemStyle());\n      group.add(curve);\n      edgeData.setItemGraphicEl(edge.dataIndex, curve);\n    }); // generate a rect  for each node\n\n    graph.eachNode(function (node) {\n      var layout = node.getLayout();\n      var itemModel = node.getModel();\n      var labelModel = itemModel.getModel('label.normal');\n      var labelHoverModel = itemModel.getModel('label.emphasis');\n      var rect = new graphic.Rect({\n        shape: {\n          x: layout.x,\n          y: layout.y,\n          width: node.getLayout().dx,\n          height: node.getLayout().dy\n        },\n        style: itemModel.getModel('itemStyle.normal').getItemStyle()\n      });\n      var hoverStyle = node.getModel('itemStyle.emphasis').getItemStyle();\n      graphic.setLabelStyle(rect.style, hoverStyle, labelModel, labelHoverModel, {\n        labelFetcher: seriesModel,\n        labelDataIndex: node.dataIndex,\n        defaultText: node.id,\n        isRectText: true\n      });\n      rect.setStyle('fill', node.getVisual('color'));\n      graphic.setHoverStyle(rect, hoverStyle);\n      group.add(rect);\n      nodeData.setItemGraphicEl(node.dataIndex, rect);\n      rect.dataType = 'node';\n    });\n\n    if (!this._data && seriesModel.get('animation')) {\n      group.setClipPath(createGridClipShape(group.getBoundingRect(), seriesModel, function () {\n        group.removeClipPath();\n      }));\n    }\n\n    this._data = seriesModel.getData();\n  },\n  dispose: function () {}\n}); // add animation to the view\n\n\nfunction createGridClipShape(rect, seriesModel, cb) {\n  var rectEl = new graphic.Rect({\n    shape: {\n      x: rect.x - 10,\n      y: rect.y - 10,\n      width: 0,\n      height: rect.height + 20\n    }\n  });\n  graphic.initProps(rectEl, {\n    shape: {\n      width: rect.width + 20,\n      height: rect.height + 20\n    }\n  }, seriesModel, cb);\n  return rectEl;\n}\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}