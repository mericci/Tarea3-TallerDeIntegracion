{"ast":null,"code":"var zrUtil = require(\"zrender/lib/core/util\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar singleAxisHelper = require(\"./singleAxisHelper\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar getInterval = AxisBuilder.getInterval;\nvar ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttr = 'splitLine';\nvar SingleAxisView = AxisView.extend({\n  type: 'singleAxis',\n  axisPointerClass: 'SingleAxisPointer',\n  render: function (axisModel, ecModel, api, payload) {\n    var group = this.group;\n    group.removeAll();\n    var layout = singleAxisHelper.layout(axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    group.add(axisBuilder.getGroup());\n\n    if (axisModel.get(selfBuilderAttr + '.show')) {\n      this['_' + selfBuilderAttr](axisModel, layout.labelInterval);\n    }\n\n    SingleAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n  },\n  _splitLine: function (axisModel, labelInterval) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineWidth = lineStyleModel.get('width');\n    var lineColors = lineStyleModel.get('color');\n    var lineInterval = getInterval(splitLineModel, labelInterval);\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var gridRect = axisModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var splitLines = [];\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords();\n    var p1 = [];\n    var p2 = [];\n    var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n    var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n    for (var i = 0; i < ticksCoords.length; ++i) {\n      if (ifIgnoreOnTick(axis, i, lineInterval, ticksCoords.length, showMinLabel, showMaxLabel)) {\n        continue;\n      }\n\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line(graphic.subPixelOptimizeLine({\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: {\n          lineWidth: lineWidth\n        },\n        silent: true\n      })));\n    }\n\n    for (var i = 0; i < splitLines.length; ++i) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: {\n          stroke: lineColors[i % lineColors.length],\n          lineDash: lineStyleModel.getLineDash(lineWidth),\n          lineWidth: lineWidth\n        },\n        silent: true\n      }));\n    }\n  }\n});\nvar _default = SingleAxisView;\nmodule.exports = _default;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/axis/SingleAxisView.js"],"names":["zrUtil","require","AxisBuilder","graphic","singleAxisHelper","AxisView","getInterval","ifIgnoreOnTick","axisBuilderAttrs","selfBuilderAttr","SingleAxisView","extend","type","axisPointerClass","render","axisModel","ecModel","api","payload","group","removeAll","layout","axisBuilder","each","add","getGroup","get","labelInterval","superCall","_splitLine","axis","scale","isBlank","splitLineModel","getModel","lineStyleModel","lineWidth","lineColors","lineInterval","Array","gridRect","coordinateSystem","getRect","isHorizontal","splitLines","lineCount","ticksCoords","getTicksCoords","p1","p2","showMinLabel","showMaxLabel","i","length","tickCoord","toGlobalCoord","y","height","x","width","colorIndex","push","Line","subPixelOptimizeLine","shape","x1","y1","x2","y2","style","silent","mergePath","stroke","lineDash","getLineDash","_default","module","exports"],"mappings":"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","sourcesContent":["var zrUtil = require(\"zrender/lib/core/util\");\n\nvar AxisBuilder = require(\"./AxisBuilder\");\n\nvar graphic = require(\"../../util/graphic\");\n\nvar singleAxisHelper = require(\"./singleAxisHelper\");\n\nvar AxisView = require(\"./AxisView\");\n\nvar getInterval = AxisBuilder.getInterval;\nvar ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttr = 'splitLine';\nvar SingleAxisView = AxisView.extend({\n  type: 'singleAxis',\n  axisPointerClass: 'SingleAxisPointer',\n  render: function (axisModel, ecModel, api, payload) {\n    var group = this.group;\n    group.removeAll();\n    var layout = singleAxisHelper.layout(axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    group.add(axisBuilder.getGroup());\n\n    if (axisModel.get(selfBuilderAttr + '.show')) {\n      this['_' + selfBuilderAttr](axisModel, layout.labelInterval);\n    }\n\n    SingleAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);\n  },\n  _splitLine: function (axisModel, labelInterval) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineWidth = lineStyleModel.get('width');\n    var lineColors = lineStyleModel.get('color');\n    var lineInterval = getInterval(splitLineModel, labelInterval);\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var gridRect = axisModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var splitLines = [];\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords();\n    var p1 = [];\n    var p2 = [];\n    var showMinLabel = axisModel.get('axisLabel.showMinLabel');\n    var showMaxLabel = axisModel.get('axisLabel.showMaxLabel');\n\n    for (var i = 0; i < ticksCoords.length; ++i) {\n      if (ifIgnoreOnTick(axis, i, lineInterval, ticksCoords.length, showMinLabel, showMaxLabel)) {\n        continue;\n      }\n\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Line(graphic.subPixelOptimizeLine({\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: {\n          lineWidth: lineWidth\n        },\n        silent: true\n      })));\n    }\n\n    for (var i = 0; i < splitLines.length; ++i) {\n      this.group.add(graphic.mergePath(splitLines[i], {\n        style: {\n          stroke: lineColors[i % lineColors.length],\n          lineDash: lineStyleModel.getLineDash(lineWidth),\n          lineWidth: lineWidth\n        },\n        silent: true\n      }));\n    }\n  }\n});\nvar _default = SingleAxisView;\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}