{"ast":null,"code":"var _jsxFileName = \"/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart.jsx\";\nimport React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nam4core.useTheme(am4themes_animated);\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    let chart = am4core.create(\"chartdiv\", am4charts.XYChart); // let data = [];\n    // let visits = 10;\n    // for (let i = 1; i < 366; i++) {\n    //   visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n    //   data.push({ date: new Date(2018, 0, i), name: \"name\" + i, value: visits });\n    // }\n\n    chart.data = [{\n      date: 1,\n      value: 1\n    }, {\n      date: 2,\n      value: 2\n    }, {\n      date: 3,\n      value: 3\n    }, {\n      date: 1,\n      value: 1\n    }, {\n      date: 1,\n      value: 1\n    }, {\n      date: 1,\n      value: 1\n    }, {\n      date: 1,\n      value: 1\n    }];\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n    series.tooltipText = \"{valueY.value}\";\n    chart.cursor = new am4charts.XYCursor(); // let scrollbarX = new am4charts.XYChartScrollbar();\n    // scrollbarX.series.push(series);\n    // chart.scrollbarX = scrollbarX;\n\n    this.chart = chart;\n  }\n\n  componentDidUpdate(oldProps) {\n    if (oldProps.data !== this.props.data) {\n      this.chart.data = this.props.data;\n    }\n  }\n\n  render() {\n    // const option = {\n    //     title: {\n    //         text: this.props.title,\n    //         textStyle: {\n    //             color: '#FFF'\n    //         }\n    //     },\n    //     tooltip: {\n    //         trigger: 'axis',\n    //         // formatter: function (params) {\n    //         //     params = params[0];\n    //         //     var date = new Date(params.name);\n    //         //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n    //         // },\n    //         axisPointer: {\n    //             animation: false\n    //         }\n    //     },\n    //     xAxis: {\n    //         type: 'time',\n    //         splitLine: {\n    //             show: false\n    //         },\n    //         axisLine: {\n    //             lineStyle: {\n    //                 color: '#FFF'\n    //             }\n    //         }\n    //     },\n    //     yAxis: {\n    //         type: 'value',\n    //         boundaryGap: [0, '100%'],\n    //         splitLine: {\n    //             show: false\n    //         },\n    //         axisLine: {\n    //             lineStyle: {\n    //                 color: '#FFF'\n    //             }\n    //         }\n    //     },\n    //     series: [{\n    //         name: 'CHART',\n    //         type: 'line',\n    //         showSymbol: false,\n    //         hoverAnimation: false,\n    //         data: this.props.data\n    //     }]\n    // };\n    // setInterval(function () {\n    //     let chart = echarts.init(document.getElementById('chart'));\n    //     this.option.series[0].data = this.props.data;\n    //     chart.setOption(option);\n    // }, 1000);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }) //     <div id=\"chart\">\n    //         <ReactEcharts\n    //             option={option}\n    //             style={{height: 360}}\n    //             opts={{renderer: 'svg'}}\n    //             onChartReady={setInterval}\n    //             notMerge={true}\n    //             lazyUpdate={true}\n    //         /> \n    // </div>\n    ;\n  }\n\n}\n\n;\nexport default Chart;","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/src/components/Chart.jsx"],"names":["React","Component","ReactEcharts","echarts","am4core","am4charts","am4themes_animated","useTheme","Chart","constructor","props","state","componentDidMount","chart","create","XYChart","data","date","value","dateAxis","xAxes","push","DateAxis","renderer","grid","template","location","valueAxis","yAxes","ValueAxis","tooltip","disabled","minWidth","series","LineSeries","dataFields","dateX","valueY","tooltipText","cursor","XYCursor","componentDidUpdate","oldProps","render","width","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\n\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n\n        };    \n    };\n\n    componentDidMount() {\n        let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n    \n        \n    \n        // let data = [];\n        // let visits = 10;\n        // for (let i = 1; i < 366; i++) {\n        //   visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n        //   data.push({ date: new Date(2018, 0, i), name: \"name\" + i, value: visits });\n        // }\n        chart.data = [{date:1, value:1},{date:2, value:2},{date:3, value:3},{date:1, value:1},{date:1, value:1},{date:1, value:1},{date:1, value:1},];\n\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n        dateAxis.renderer.grid.template.location = 0;\n    \n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n        valueAxis.tooltip.disabled = true;\n        valueAxis.renderer.minWidth = 35;\n    \n        let series = chart.series.push(new am4charts.LineSeries());\n        series.dataFields.dateX = \"date\";\n        series.dataFields.valueY = \"value\";\n    \n        series.tooltipText = \"{valueY.value}\";\n        chart.cursor = new am4charts.XYCursor();\n    \n        // let scrollbarX = new am4charts.XYChartScrollbar();\n        // scrollbarX.series.push(series);\n        // chart.scrollbarX = scrollbarX;\n    \n        this.chart = chart;\n      };\n\n      componentDidUpdate(oldProps) {\n        if (oldProps.data !== this.props.data) {\n          this.chart.data = this.props.data;\n        }\n      }\n\n        \n    render() {\n       \n\n        // const option = {\n        //     title: {\n        //         text: this.props.title,\n        //         textStyle: {\n        //             color: '#FFF'\n        //         }\n        //     },\n        //     tooltip: {\n        //         trigger: 'axis',\n        //         // formatter: function (params) {\n        //         //     params = params[0];\n        //         //     var date = new Date(params.name);\n        //         //     return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];\n        //         // },\n        //         axisPointer: {\n        //             animation: false\n        //         }\n        //     },\n        //     xAxis: {\n        //         type: 'time',\n        //         splitLine: {\n        //             show: false\n        //         },\n        //         axisLine: {\n        //             lineStyle: {\n        //                 color: '#FFF'\n        //             }\n        //         }\n        //     },\n        //     yAxis: {\n        //         type: 'value',\n        //         boundaryGap: [0, '100%'],\n        //         splitLine: {\n        //             show: false\n        //         },\n        //         axisLine: {\n        //             lineStyle: {\n        //                 color: '#FFF'\n        //             }\n        //         }\n        //     },\n        //     series: [{\n        //         name: 'CHART',\n        //         type: 'line',\n        //         showSymbol: false,\n        //         hoverAnimation: false,\n        //         data: this.props.data\n        //     }]\n        // };\n\n        // setInterval(function () {\n        //     let chart = echarts.init(document.getElementById('chart'));\n        //     this.option.series[0].data = this.props.data;\n        \n        //     chart.setOption(option);\n        // }, 1000);\n        \n        return (\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        //     <div id=\"chart\">\n        //         <ReactEcharts\n                    \n        //             option={option}\n        //             style={{height: 360}}\n        //             opts={{renderer: 'svg'}}\n        //             onChartReady={setInterval}\n        //             notMerge={true}\n        //             lazyUpdate={true}\n                    \n                    \n        //         /> \n        // </div>\n        );\n    }\n\n};\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}