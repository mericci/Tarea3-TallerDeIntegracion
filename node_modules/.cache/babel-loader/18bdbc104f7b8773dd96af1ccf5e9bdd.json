{"ast":null,"code":"var echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar visualSolution = require(\"../../visual/visualSolution\");\n\nvar VisualMapping = require(\"../../visual/VisualMapping\");\n\necharts.registerVisual(echarts.PRIORITY.VISUAL.COMPONENT, function (ecModel) {\n  ecModel.eachComponent('visualMap', function (visualMapModel) {\n    processSingleVisualMap(visualMapModel, ecModel);\n  });\n  prepareVisualMeta(ecModel);\n});\n\nfunction processSingleVisualMap(visualMapModel, ecModel) {\n  visualMapModel.eachTargetSeries(function (seriesModel) {\n    var data = seriesModel.getData();\n    visualSolution.applyVisual(visualMapModel.stateList, visualMapModel.targetVisuals, data, visualMapModel.getValueState, visualMapModel, visualMapModel.getDataDimension(data));\n  });\n} // Only support color.\n\n\nfunction prepareVisualMeta(ecModel) {\n  ecModel.eachSeries(function (seriesModel) {\n    var data = seriesModel.getData();\n    var visualMetaList = [];\n    ecModel.eachComponent('visualMap', function (visualMapModel) {\n      if (visualMapModel.isTargetSeries(seriesModel)) {\n        var visualMeta = visualMapModel.getVisualMeta(zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)) || {\n          stops: [],\n          outerColors: []\n        };\n        visualMeta.dimension = visualMapModel.getDataDimension(data);\n        visualMetaList.push(visualMeta);\n      }\n    }); // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));\n\n    seriesModel.getData().setVisual('visualMeta', visualMetaList);\n  });\n} // FIXME\n// performance and export for heatmap?\n// value can be Infinity or -Infinity\n\n\nfunction getColorVisual(seriesModel, visualMapModel, value, valueState) {\n  var mappings = visualMapModel.targetVisuals[valueState];\n  var visualTypes = VisualMapping.prepareVisualTypes(mappings);\n  var resultVisual = {\n    color: seriesModel.getData().getVisual('color') // default color.\n\n  };\n\n  for (var i = 0, len = visualTypes.length; i < len; i++) {\n    var type = visualTypes[i];\n    var mapping = mappings[type === 'opacity' ? '__alphaForOpacity' : type];\n    mapping && mapping.applyVisual(value, getVisual, setVisual);\n  }\n\n  return resultVisual.color;\n\n  function getVisual(key) {\n    return resultVisual[key];\n  }\n\n  function setVisual(key, value) {\n    resultVisual[key] = value;\n  }\n}","map":{"version":3,"sources":["/home/martin/Escritorio/Taller de Integracion/Tarea3-TallerDeIntegracion/node_modules/react-echarts/node_modules/echarts/lib/component/visualMap/visualEncoding.js"],"names":["echarts","require","zrUtil","visualSolution","VisualMapping","registerVisual","PRIORITY","VISUAL","COMPONENT","ecModel","eachComponent","visualMapModel","processSingleVisualMap","prepareVisualMeta","eachTargetSeries","seriesModel","data","getData","applyVisual","stateList","targetVisuals","getValueState","getDataDimension","eachSeries","visualMetaList","isTargetSeries","visualMeta","getVisualMeta","bind","getColorVisual","stops","outerColors","dimension","push","setVisual","value","valueState","mappings","visualTypes","prepareVisualTypes","resultVisual","color","getVisual","i","len","length","type","mapping","key"],"mappings":"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","sourcesContent":["var echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar visualSolution = require(\"../../visual/visualSolution\");\n\nvar VisualMapping = require(\"../../visual/VisualMapping\");\n\necharts.registerVisual(echarts.PRIORITY.VISUAL.COMPONENT, function (ecModel) {\n  ecModel.eachComponent('visualMap', function (visualMapModel) {\n    processSingleVisualMap(visualMapModel, ecModel);\n  });\n  prepareVisualMeta(ecModel);\n});\n\nfunction processSingleVisualMap(visualMapModel, ecModel) {\n  visualMapModel.eachTargetSeries(function (seriesModel) {\n    var data = seriesModel.getData();\n    visualSolution.applyVisual(visualMapModel.stateList, visualMapModel.targetVisuals, data, visualMapModel.getValueState, visualMapModel, visualMapModel.getDataDimension(data));\n  });\n} // Only support color.\n\n\nfunction prepareVisualMeta(ecModel) {\n  ecModel.eachSeries(function (seriesModel) {\n    var data = seriesModel.getData();\n    var visualMetaList = [];\n    ecModel.eachComponent('visualMap', function (visualMapModel) {\n      if (visualMapModel.isTargetSeries(seriesModel)) {\n        var visualMeta = visualMapModel.getVisualMeta(zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)) || {\n          stops: [],\n          outerColors: []\n        };\n        visualMeta.dimension = visualMapModel.getDataDimension(data);\n        visualMetaList.push(visualMeta);\n      }\n    }); // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));\n\n    seriesModel.getData().setVisual('visualMeta', visualMetaList);\n  });\n} // FIXME\n// performance and export for heatmap?\n// value can be Infinity or -Infinity\n\n\nfunction getColorVisual(seriesModel, visualMapModel, value, valueState) {\n  var mappings = visualMapModel.targetVisuals[valueState];\n  var visualTypes = VisualMapping.prepareVisualTypes(mappings);\n  var resultVisual = {\n    color: seriesModel.getData().getVisual('color') // default color.\n\n  };\n\n  for (var i = 0, len = visualTypes.length; i < len; i++) {\n    var type = visualTypes[i];\n    var mapping = mappings[type === 'opacity' ? '__alphaForOpacity' : type];\n    mapping && mapping.applyVisual(value, getVisual, setVisual);\n  }\n\n  return resultVisual.color;\n\n  function getVisual(key) {\n    return resultVisual[key];\n  }\n\n  function setVisual(key, value) {\n    resultVisual[key] = value;\n  }\n}"]},"metadata":{},"sourceType":"script"}