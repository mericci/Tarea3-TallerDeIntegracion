{"version":3,"sources":["components/Chart.jsx","components/TickerDetail.jsx","components/ExchangeDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["am4core","am4themes_dark","am4themes_animated","Chart","props","boxRef","React","createRef","state","chart","this","company","am4charts","data","stock_data","dateAxis","xAxes","push","renderer","grid","template","location","valueAxis","yAxes","tooltip","disabled","minWidth","series","dataFields","dateX","valueY","tooltipText","ticker","money","cursor","xAxis","prevProps","console","log","id","style","width","height","Component","TickerDetail","volume","big","small","last","variation","prueba","setState","porc_var","Math","round","className","country","key","update","time","update_time","title","socket","io","path","App","set_exchanges","emit","on","stocks_info","is_loading","Object","entries","map","exchange","exchange_volume","name","listed_companies","comp","stock","company_name","stock_exchange","exchanges","value","exchange_ticker","stocks","tick","quote_base","buy","sell","buy_volume","sell_volume","big_updates","small_updates","Infinity","last_updates","total_volume","set_updates","exchange_input","stocks_updates","now","Date","date","getHours","getMinutes","set_buy","isNaN","all_exchange_volume","set_sell","control_socket","connected","disconnect","button_text","connect","stock_act","onClick","length","dataKey","stroke","domain","formatter","labelFormatter","type","fill","strokeWidth","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.092a94d2.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport am4themes_dark from \"@amcharts/amcharts4/themes/dark\";\n\nam4core.useTheme(am4themes_dark);\nam4core.useTheme(am4themes_animated);\n\n\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n        this.boxRef = React.createRef();\n        this.state = {\n\n        };    \n    };\n\n    componentDidMount() {\n        let chart = am4core.create(this.props.company, am4charts.XYChart);\n        \n        chart.data = [...this.props.stock_data];\n\n\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n        dateAxis.renderer.grid.template.location = 0;\n    \n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n        valueAxis.tooltip.disabled = true;\n        valueAxis.renderer.minWidth = 35;\n    \n        let series = chart.series.push(new am4charts.LineSeries());\n        series.dataFields.dateX = \"date\";\n        series.dataFields.valueY = \"value\";\n        series.tooltipText = \"{valueY} \" + this.props.ticker.money;\n\n        chart.cursor = new am4charts.XYCursor();\n        chart.cursor.xAxis = dateAxis;\n    \n        this.chart = chart;\n    };\n\n    componentDidUpdate(prevProps) {\n        console.log(this.props.stock_data)\n        console.log(prevProps.stock_data)\n        if (this.props.stock_data !== prevProps.stock_data) {\n            this.chart.data = this.props.stock_data\n\n        }\n    }\n\n        \n    render() {\n\n        return (\n            <div id={this.props.company} style={{ width: \"100%\", height: '300px' }}></div>\n        );\n    }\n\n};\n\nexport default Chart;","import React, {Component} from 'react';\n\nimport Chart from './Chart';\n\nclass TickerDetail extends Component {\n    constructor(props){\n        super(props);\n    \n        this.state = {\n            volume: 0,\n            big: 0,\n            small: 0,\n            last: 0,\n            variation: '0%'\n        };    \n      }\n    //Chart.setOption({series:[{data:props.ticker.update}]})\n\n    // componentDidMount(){\n    //     this.setState({\n    //         volume: this.props.volume,\n    //         big: this.props.big,\n    //         small: this.props.small,\n    //         last: this.props.last\n    //     })\n\n    // }\n\n    componentDidUpdate(prevProps){\n        //console.log(this.props.volume)\n        if (this.props.prueba !== prevProps.prueba) {\n            this.setState({\n                volume: this.props.volume,\n                big: this.props.big,\n                small: this.props.small,\n                last: this.props.last\n            })\n    \n        }\n        if (this.props.last !== prevProps.last) {\n            const porc_var = Math.round(((this.props.last - prevProps.last)/prevProps.last)*10000)/100\n            this.setState({\n                variation: porc_var + \"%\"\n            })\n    \n        }\n    }\n\n    render(){\n        return (\n            <div className=\"ticker\">\n                <div className=\"col-md-12 border-right company\">\n        \n\n                    <table className=\"ticker-table\">\n                        <tr>\n                    \n                            \n                                <div className='title-table'>\n                                    <h3 className=\"title-ticker\">{this.props.ticker.company} <span className=\"ticker-company\">({this.props.ticker.ticker})</span></h3>\n                                    <h5 className=\"country\">{this.props.ticker.country}</h5>\n                                </div>\n                            \n                        </tr>\n                        <tr>\n                            <div>\n                                <Chart \n                                    key={this.props.ticker.company}\n                                    data = {this.props.ticker.update}\n                                    time = {this.props.ticker.update_time}\n                                    title = {this.props.ticker.company}\n                                    company = {this.props.ticker.company}\n                                    prueba = {this.props.prueba}\n                                    ticker = {this.props.ticker}\n                                    stock_data = {this.props.stock_data}\n                                />\n                            </div>\n                            <tr>\n                                <th>Volumen Total</th>\n                                <th>Alto Histórico</th>\n                                <th>Bajo Histórico</th>\n                                <th>Último Precio</th>\n                                <th>Variación (%)</th>\n                            </tr>\n                            <tr>\n                                <th>{this.props.volume}</th>\n                                {/* <th>{this.props.buy_volume + this.props.sell_volume}</th> */}\n                                <th>{this.state.big}</th>\n                                <th>{this.state.small}</th>\n                                <th>{this.state.last}</th>\n                                <th>{this.state.variation}</th>\n                            </tr>\n                        </tr>\n                        \n                            \n                    </table>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default TickerDetail;","import React, {Component} from 'react';\nimport TickerDetail from './TickerDetail';\n\n\nclass ExchangeDetail extends Component {\n    constructor(props){\n        super(props);\n    \n        this.state = {\n            buy_volume: 0,\n            sell_volume: 0,\n            total_volume: 0,\n            actions_count: 0,\n            participation: 0\n        };    \n    }\n    \n    // componentDidMount(){\n    //     this.setState({\n    //         buy_volume: this.props.exchange.buy_volume,\n    //         sell_volume: this.props.exchange.sell_volume,\n    //         total_volume: this.props.exchange.buy_volume + this.props.exchange.sell_volume,\n    //         actions_count: this.props.exchange.stocks.length,\n    //         participation: 0\n    //     })\n\n    // }\n\n    // componentDidUpdate(prevProps){\n    //     if (this.props.buy_sell) {\n           \n    //         console.log(this.props.exchange.buy_volume + this.props.exchange.sell_volume)\n    //     }\n\n    // }\n    \n    render(){\n        return (\n            <div className=\"exchange-map\">\n                <div className=\"row exchange-title-info\">\n                    <div className=\"col-md-6 border-right title-exchange\">\n                        <h1>{this.props.exchange.name}</h1>\n                    </div>\n                    <div className=\"exchange_info col-md-6 border-left\">\n                        <div>\n                            <table className=\"exchange-table\">\n                                <tr>\n                                    <th>Volumen de compra</th>\n                                    <th>Volumen de venta</th>\n                                    <th>Volumen total</th>\n                                    <th>Cantidad de acciones</th>\n                                    <th>Participación de mercado</th>\n            \n                                </tr>\n                                <tr>\n                                    <th>{this.props.exchange.buy_volume}</th>\n                                    <th>{this.props.exchange.sell_volume}</th>\n                                    <th>{this.props.exchange_volume}</th>\n                                    <th>{this.props.exchange.stocks.length}</th>\n                                    <th>{Math.round(((this.props.exchange_volume)/this.props.total_volume)*10000)/100}</th>\n            \n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"table-ticker-div row\">\n                    \n                        {this.props.exchange.stocks.map(company => {\n                            //console.log(company.ticker)\n                            return(\n                                // <div className=\"table-ticker-div\">\n                                // <table className=\"table-tickers\">\n                                    // <th>\n                                        <TickerDetail\n                                            key = {company.company}\n                                            ticker = {company}\n                                            prueba = {this.props.prueba}\n                                            big = {this.props.bigs[company.ticker]}\n                                            small = {this.props.smalls[company.ticker]}\n                                            last = {this.props.lasts[company.ticker]}\n                                            volume = {this.props.volume[company.ticker]}\n                                            buy_volume = {this.props.buy_volume[company.ticker]}\n                                            sell_volume = {this.props.sell_volume[company.ticker]}\n                                            stock_data = {this.props.stock_data[company.ticker]}\n                                        /> \n                                    // </th>\n                                // </table>\n                                //  </div>\n                                \n                            )\n                        })}\n                    \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ExchangeDetail;","import React, {Component} from 'react';\nimport './App.css';\nimport ExchangeDetail from './components/ExchangeDetail';\n\nimport io from 'socket.io-client'\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport am4themes_dark from \"@amcharts/amcharts4/themes/dark\";\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nam4core.useTheme(am4themes_dark);\nam4core.useTheme(am4themes_animated);\n\n\nconst server = 'wss://le-18262636.bitzonte.com';\n\nconst socket = io(server, {  \n  path: '/stocks'\n});\n\nclass App extends Component{\n  \n\n  constructor(){\n    super();\n\n    this.state = {\n      stock_exchange: {},\n      exchanges: [],\n      is_loading: false,\n      prueba: [],\n      big_updates: {},\n      small_updates: {},\n      last_updates: {},\n      total_volume: {},\n      all_exchange_volume: 0,\n      buy_volume: {},\n      sell_volume: {},\n      exchange_volume: {},\n      button_text: 'Desconectar Socket',\n      stock_data: {},\n      stock_act : {}\n\n    };    \n  }\n\n  set_exchanges = () => {\n    socket.emit('EXCHANGES')\n      socket.on('EXCHANGES', (data) => {\n        socket.emit('STOCKS');\n        socket.on('STOCKS', (stocks_info) => {\n          if (!this.state.is_loading){\n            const exchange_info = Object.entries(data).map(([key,value])=>{return(value)});\n            exchange_info.map(exchange => {\n              this.setState({exchange_volume: {[exchange.name]: 0, ...this.state.exchange_volume}})\n\n              exchange.listed_companies.map(comp => {\n                stocks_info.map(stock => {\n                  this.setState({stock_data: {[stock.ticker]: [], ...this.state.stock_data}})\n                  if(comp === stock.company_name) {\n                    this.setState({stock_exchange: {[stock.ticker]: exchange.name, ...this.state.stock_exchange}})\n                  }\n                })\n              })\n            })\n\n            this.setState({exchanges: Object.entries(data).map(([key,value])=>{    \n                return({\n                  name: value.name,\n                  exchange_ticker: value.exchange_ticker,\n                  stocks: \n                    value.listed_companies.map(company => {\n                      var tick = '';\n                      var money = '';\n                      var country = '';\n                      stocks_info.map(stock => {\n                        if (company === stock.company_name){\n                          tick = stock.ticker;\n                          money = stock.quote_base;\n                          country = stock.country\n                        }\n                      })\n                      return {\n                        company: company,\n                        update: [],\n                        update_time: [],\n                        buy: [],\n                        sell: [],\n                        ticker: tick,\n                        money: money,\n                        country: country\n                      }\n                    }),\n                    buy_volume: 0,\n                    sell_volume: 0,\n                })\n              })\n            });\n          \n            stocks_info.map(stock => {\n              this.setState({\n                big_updates: {[stock.ticker]: 0, ...this.state.big_updates},\n                small_updates: {[stock.ticker]: Infinity, ...this.state.small_updates},\n                last_updates: {[stock.ticker]: 0, ...this.state.last_updates},\n                total_volume: {[stock.ticker]: 0, ...this.state.total_volume},\n                buy_volume: {[stock.ticker]: 0, ...this.state.buy_volume},\n                sell_volume: {[stock.ticker]: 0, ...this.state.sell_volume},\n              })\n            })\n          }\n          this.setState({is_loading: true})\n        });\n      })\n      \n  }\n\n  set_updates = () => {\n    socket.on('UPDATE', (data) => {\n      if(this.state.is_loading){\n        var exchange_input = this.state.stock_exchange[data.ticker]; //{[stock.ticker]: exchange.name, ...this.state.stock_exchange}})\n  \n        let stocks_updates = {...this.state.stock_data}\n        //console.log(data.ticker+ ' ' + stocks_updates[data.ticker])\n        var now = new Date();\n        stocks_updates[data.ticker].push({date: now.getHours() + ':0' + now.getMinutes() , value: data.value })\n        //console.log(stocks_updates[data.ticker])\n        this.setState({stock_data: stocks_updates})\n        //this.setState({stock_data: {[data.ticker]: this.state.stock_data[data.ticker].push({date: data.time, value: data.value }), ...this.state.stock_data}})\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n            exchange.stocks.map(stock => {\n              if(stock.ticker === data.ticker) {\n                stock.update.push({date: data.time, value: data.value }) //update.length - 1\n              }\n            })\n          }\n        });\n\n        this.state.last_updates[data.ticker] = data.value;\n        if(data.value > this.state.big_updates[data.ticker]) {\n          this.state.big_updates[data.ticker] = data.value;\n        } \n        if(data.value < this.state.small_updates[data.ticker]) {\n          this.state.small_updates[data.ticker] = data.value;\n        }\n  \n        //this.setState({prueba: [{date: data.time, value: data.value }, ...this.state.prueba] })\n      }\n    });\n\n  }\n\n  set_buy = () => {\n    socket.on('BUY', (data) => {\n      if(this.state.is_loading){\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        \n        if(isNaN(this.state.total_volume[data.ticker])){\n          this.state.total_volume[data.ticker] = 0;\n        }\n        this.state.total_volume[data.ticker] += data.volume;\n        this.state.buy_volume[data.ticker] += data.volume;\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n            if(exchange.name === exchange_input) {\n              exchange.buy_volume += data.volume\n            }\n          }\n        });\n        this.state.exchange_volume[exchange_input] += data.volume;\n        this.state.all_exchange_volume += data.volume;\n      }\n    });\n\n  }\n\n  set_sell = () => {\n    socket.on('SELL', (data) => {\n      if(this.state.is_loading){\n        var exchange_input = this.state.stock_exchange[data.ticker];\n      \n        if(isNaN(this.state.total_volume[data.ticker])){\n          this.state.total_volume[data.ticker] = 0;\n        }\n        this.state.total_volume[data.ticker] += data.volume;\n        this.state.sell_volume[data.ticker] += data.volume;\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n              exchange.sell_volume += data.volume\n            }\n        \n          }\n        );\n        this.state.exchange_volume[exchange_input] += data.volume;\n        this.state.all_exchange_volume += data.volume;\n      }\n    });\n  }\n  \n\n\n  componentDidMount() {\n      this.set_exchanges();\n      this.set_updates();\n      this.set_buy();\n      this.set_sell();   \n  }\n\n  control_socket = () => {\n    if(socket.connected){\n      socket.disconnect()\n      this.setState({button_text: 'Reconectar Socket'})\n    }\n    else {\n      socket.connect()\n      this.setState({button_text: 'Desconectar Socket'});\n    }\n  }\n  \n\n  \n  \n  render() {\n\n\n\n    return(\n      <div className=\"App\">\n          <div className=\"socket-control\">\n            <h2>Tarea 3 - Taller de Integración</h2>\n            <button className=\"button\" onClick={this.control_socket}>{this.state.button_text}</button>\n          </div>\n          {this.state.exchanges.map(exchange => {\n            return(\n              <div className=\"exchange\" key={exchange.name}>\n              <div className=\"exchange-map\">\n                <div className=\"row exchange-title-info\">\n                    <div className=\"col-md-6 border-right title-exchange\">\n                        <h1>{exchange.name}</h1>\n                    </div>\n                    <div className=\"exchange_info col-md-6 border-left\">\n                        <div>\n                            <table className=\"exchange-table\">\n                                <tr>\n                                    <th className=\"th-info-exchange\">Volumen de compra</th>\n                                    <th className=\"th-info-exchange\">Volumen de venta</th>\n                                    <th className=\"th-info-exchange\">Volumen total</th>\n                                    <th className=\"th-info-exchange\">Cantidad de acciones</th>\n                                    <th className=\"th-info-exchange\">Participación de mercado</th>\n            \n                                </tr>\n                                <tr>\n                                    <th className=\"th-info-exchange\">{exchange.buy_volume}</th>\n                                    <th className=\"th-info-exchange\">{exchange.sell_volume}</th>\n                                    <th className=\"th-info-exchange\">{this.state.exchange_volume[exchange.name]}</th>\n                                    <th className=\"th-info-exchange\">{exchange.stocks.length}</th>\n                                    <th className=\"th-info-exchange\">{Math.round(((this.state.exchange_volume[exchange.name])/this.state.all_exchange_volume)*10000)/100}</th>\n            \n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"table-ticker-div\">\n                    \n                        {exchange.stocks.map(company => {\n                            return(\n                              <div className=\"ticker\">\n                              <div className=\"col-md-12 border-right company\">\n                                  <table className=\"ticker-table\">\n                                      <tr>\n                                          <div className='title-table'>\n                                              <h3 className=\"title-ticker\">{company.company} <span className=\"ticker-company\">({company.ticker})</span></h3>\n                                              <h5 className=\"country\">{company.country}</h5>\n                                          </div>      \n                                      </tr>\n                                      <tr>\n                                          <div>\n                                           {console.log(this.state.stock_data[company.ticker])}\n                                           <div id=\"chart\" >\n                                            <LineChart width={820} height={300} data={[...this.state.stock_data[company.ticker]]}>\n                                                \n                                                <XAxis dataKey=\"date\" stroke=\"azure\"/>\n                                                <YAxis stroke=\"azure\" domain={[\"dataMin-10\", \"dataMax+10\"]}/>\n                                                <Tooltip \n                                                  formatter={\n                                                    function(value, name) {\n                                                      return company.money +': ' + value;\n                                                    }\n                                                    \n                                                  }\n                                                  labelFormatter={function(value) {\n                                                    return 'time: ' + value;\n                                                  }}\n                                                  \n                                                />\n                                                <Line type=\"monotone\" dataKey=\"value\" stroke=\"cornflowerblue\" fill=\"cornflowerblue\" strokeWidth={2} />\n                                            </LineChart>\n                                          </div>\n                                          </div>  \n                                          <tr>\n                                              <th>Volumen Total</th>\n                                              <th>Alto Histórico</th>\n                                              <th>Bajo Histórico</th>\n                                              <th>Último Precio</th>\n                                              <th>Variación (%)</th>\n                                          </tr>\n                                          <tr>\n                                              <th>{this.state.total_volume[company.ticker]}</th>\n                                              <th>{this.state.big_updates[company.ticker]}</th>\n                                              <th>{this.state.small_updates[company.ticker]}</th>\n                                              <th>{this.state.last_updates[company.ticker]}</th>\n                                              <th>0</th>\n                                          </tr>\n                                      </tr>\n                                      \n                                          \n                                  </table>\n                              </div>\n              \n                          </div>\n                                \n                            )\n                        })}\n                    \n                </div>\n            </div>\n              </div>\n            )\n          })}\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}