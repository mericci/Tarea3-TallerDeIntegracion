{"version":3,"sources":["components/Chart.jsx","components/TickerDetail.jsx","components/ExchangeDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["am4core","am4themes_dark","am4themes_animated","Chart","props","boxRef","React","createRef","state","chart","this","company","am4charts","data","dateAxis","xAxes","push","renderer","grid","template","location","valueAxis","yAxes","tooltip","disabled","minWidth","series","dataFields","dateX","valueY","tooltipText","ticker","money","cursor","xAxis","prevProps","prueba","id","style","width","height","Component","TickerDetail","volume","big","small","last","variation","setState","porc_var","Math","round","className","country","key","update","time","update_time","title","ExchangeDetail","buy_volume","sell_volume","total_volume","actions_count","participation","exchange","name","exchange_volume","stocks","length","map","bigs","smalls","lasts","App","wait","wait_funct","i","stock_exchange","exchanges","is_loading","big_updates","small_updates","last_updates","all_exchange_volume","socket","io","path","emit","on","stocks_info","Object","entries","listed_companies","comp","stock","company_name","value","exchange_ticker","tick","quote_base","buy","sell","Infinity","exchange_input","date","isNaN","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38618576.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts/lib/echarts';\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport am4themes_dark from \"@amcharts/amcharts4/themes/dark\";\n\nam4core.useTheme(am4themes_dark);\nam4core.useTheme(am4themes_animated);\n\n\nclass Chart extends Component {\n    constructor(props){\n        super(props);\n        this.boxRef = React.createRef();\n        this.state = {\n\n        };    \n    };\n\n    componentDidMount() {\n        let chart = am4core.create(this.props.company, am4charts.XYChart);\n        \n        chart.data = this.props.data;\n\n\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n        dateAxis.renderer.grid.template.location = 0;\n    \n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n        valueAxis.tooltip.disabled = true;\n        valueAxis.renderer.minWidth = 35;\n    \n        let series = chart.series.push(new am4charts.LineSeries());\n        series.dataFields.dateX = \"date\";\n        series.dataFields.valueY = \"value\";\n        series.tooltipText = \"{valueY} \" + this.props.ticker.money;\n\n        chart.cursor = new am4charts.XYCursor();\n        chart.cursor.xAxis = dateAxis;\n    \n        this.chart = chart;\n    };\n\n    componentDidUpdate(prevProps) {\n\n        if (this.props.prueba !== prevProps.prueba) {\n            this.chart.data = this.props.data\n\n        }\n    }\n\n        \n    render() {\n\n        return (\n            <div id={this.props.company} style={{ width: \"100%\", height: '300px' }}></div>\n        );\n    }\n\n};\n\nexport default Chart;","import React, {Component} from 'react';\n\nimport Chart from './Chart';\n\nclass TickerDetail extends Component {\n    constructor(props){\n        super(props);\n    \n        this.state = {\n            volume: 0,\n            big: 0,\n            small: 0,\n            last: 0,\n            variation: '0%'\n        };    \n      }\n    //Chart.setOption({series:[{data:props.ticker.update}]})\n\n    // componentDidMount(){\n    //     this.setState({\n    //         volume: this.props.volume,\n    //         big: this.props.big,\n    //         small: this.props.small,\n    //         last: this.props.last\n    //     })\n\n    // }\n\n    componentDidUpdate(prevProps){\n        //console.log(this.props.volume)\n        if (this.props.prueba !== prevProps.prueba) {\n            this.setState({\n                volume: this.props.volume,\n                big: this.props.big,\n                small: this.props.small,\n                last: this.props.last\n            })\n    \n        }\n        if (this.props.last !== prevProps.last) {\n            const porc_var = Math.round(((this.props.last - prevProps.last)/prevProps.last)*10000)/100\n            this.setState({\n                variation: porc_var + \"%\"\n            })\n    \n        }\n    }\n\n    render(){\n        return (\n            <div className=\"row ticker\">\n                <div className=\"col-md-12 border-right company\">\n        \n\n                    <table className=\"ticker-table\">\n                        <tr>\n                    \n                            \n                                <div className='title-table'>\n                                    <h3 className=\"title-ticker\">{this.props.ticker.company} <span className=\"ticker-company\">({this.props.ticker.ticker})</span></h3>\n                                    <h5 className=\"country\">{this.props.ticker.country}</h5>\n                                </div>\n                            \n                        </tr>\n                        <tr>\n                            <div>\n                                <Chart \n                                    key={this.props.ticker.company}\n                                    data = {this.props.ticker.update}\n                                    time = {this.props.ticker.update_time}\n                                    title = {this.props.ticker.company}\n                                    company = {this.props.ticker.company}\n                                    prueba = {this.props.prueba}\n                                    ticker = {this.props.ticker}\n                                />\n                            </div>\n                            <tr>\n                                <th>Volumen Total</th>\n                                <th>Alto Histórico</th>\n                                <th>Bajo Histórico</th>\n                                <th>Último Precio</th>\n                                <th>Variación (%)</th>\n                            </tr>\n                            <tr>\n                                <th>{this.props.volume}</th>\n                                {/* <th>{this.props.buy_volume + this.props.sell_volume}</th> */}\n                                <th>{this.state.big}</th>\n                                <th>{this.state.small}</th>\n                                <th>{this.state.last}</th>\n                                <th>{this.state.variation}</th>\n                            </tr>\n                        </tr>\n                        \n                            \n                    </table>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default TickerDetail;","import React, {Component} from 'react';\nimport TickerDetail from './TickerDetail';\n\n\nclass ExchangeDetail extends Component {\n    constructor(props){\n        super(props);\n    \n        this.state = {\n            buy_volume: 0,\n            sell_volume: 0,\n            total_volume: 0,\n            actions_count: 0,\n            participation: 0\n        };    \n    }\n    \n    // componentDidMount(){\n    //     this.setState({\n    //         buy_volume: this.props.exchange.buy_volume,\n    //         sell_volume: this.props.exchange.sell_volume,\n    //         total_volume: this.props.exchange.buy_volume + this.props.exchange.sell_volume,\n    //         actions_count: this.props.exchange.stocks.length,\n    //         participation: 0\n    //     })\n\n    // }\n\n    // componentDidUpdate(prevProps){\n    //     if (this.props.buy_sell) {\n           \n    //         console.log(this.props.exchange.buy_volume + this.props.exchange.sell_volume)\n    //     }\n\n    // }\n    \n    render(){\n        return (\n            <div className=\"exchange-map\">\n                <div className=\"row exchange-title-info\">\n                    <div className=\"col-md-6 border-right title-exchange\">\n                        <h1>{this.props.exchange.name}</h1>\n                    </div>\n                    <div className=\"exchange_info col-md-6 border-left\">\n                        <div>\n                            <table className=\"exchange-table\">\n                                <tr>\n                                    <th>Volumen de compra</th>\n                                    <th>Volumen de venta</th>\n                                    <th>Volumen total</th>\n                                    <th>Cantidad de acciones</th>\n                                    <th>Participación de mercado</th>\n            \n                                </tr>\n                                <tr>\n                                    <th>{this.props.exchange.buy_volume}</th>\n                                    <th>{this.props.exchange.sell_volume}</th>\n                                    <th>{this.props.exchange_volume}</th>\n                                    <th>{this.props.exchange.stocks.length}</th>\n                                    <th>{Math.round(((this.props.exchange_volume)/this.props.total_volume)*10000)/100}</th>\n            \n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"table-ticker-div row\">\n                    \n                        {this.props.exchange.stocks.map(company => {\n                            //console.log(company.ticker)\n                            return(\n                                <table className=\"table-tickers\">\n                                    <th>\n                                        <TickerDetail\n                                            key = {company.company}\n                                            ticker = {company}\n                                            prueba = {this.props.prueba}\n                                            big = {this.props.bigs[company.ticker]}\n                                            small = {this.props.smalls[company.ticker]}\n                                            last = {this.props.lasts[company.ticker]}\n                                            volume = {this.props.volume[company.ticker]}\n                                            buy_volume = {this.props.buy_volume[company.ticker]}\n                                            sell_volume = {this.props.sell_volume[company.ticker]}\n                                        /> \n                                    </th>\n                                </table>\n                                \n                            )\n                        })}\n                    \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ExchangeDetail;","import React, {Component} from 'react';\nimport './App.css';\nimport ExchangeDetail from './components/ExchangeDetail';\n\nimport io from 'socket.io-client'\n\n\nconst server = 'wss://le-18262636.bitzonte.com';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n\n    this.state = {\n      stock_exchange: {},\n      exchanges: [],\n      is_loading: false,\n      prueba: [],\n      big_updates: {},\n      small_updates: {},\n      last_updates: {},\n      total_volume: {},\n      all_exchange_volume: 0,\n      buy_volume: {},\n      sell_volume: {},\n      exchange_volume: {}\n\n    };    \n  }\n\n  wait = () => {\n\n  }\n\n  componentDidMount() {\n      const socket = io(server, {  \n        path: '/stocks'\n      });\n     \n      socket.emit('EXCHANGES')\n      socket.on('EXCHANGES', (data) => {\n        socket.emit('STOCKS');\n        socket.on('STOCKS', (stocks_info) => {\n          const exchange_info = Object.entries(data).map(([key,value])=>{return(value)});\n          exchange_info.map(exchange => {\n            this.setState({exchange_volume: {[exchange.name]: 0, ...this.state.exchange_volume}})\n            exchange.listed_companies.map(comp => {\n              stocks_info.map(stock => {\n                if(comp === stock.company_name) {\n                  this.setState({stock_exchange: {[stock.ticker]: exchange.name, ...this.state.stock_exchange}})\n                }\n              })\n            })\n          })\n\n          this.setState({exchanges: Object.entries(data).map(([key,value])=>{\n              \n              return({\n                name: value.name,\n                exchange_ticker: value.exchange_ticker,\n                stocks: \n                  value.listed_companies.map(company => {\n                    var tick = '';\n                    var money = '';\n                    var country = '';\n                    stocks_info.map(stock => {\n                      if (company === stock.company_name){\n                        tick = stock.ticker;\n                        money = stock.quote_base;\n                        country = stock.country\n                      }\n                    })\n                    return {\n                      company: company,\n                      update: [],\n                      update_time: [],\n                      buy: [],\n                      sell: [],\n                      ticker: tick,\n                      money: money,\n                      country: country\n          \n                    }\n                  }),\n                  buy_volume: 0,\n                  sell_volume: 0,\n              })\n            })\n          });\n        \n          stocks_info.map(stock => {\n            this.setState({\n              big_updates: {[stock.ticker]: 0, ...this.state.big_updates},\n              small_updates: {[stock.ticker]: Infinity, ...this.state.small_updates},\n              last_updates: {[stock.ticker]: 0, ...this.state.last_updates},\n              total_volume: {[stock.ticker]: 0, ...this.state.total_volume},\n              buy_volume: {[stock.ticker]: 0, ...this.state.buy_volume},\n              sell_volume: {[stock.ticker]: 0, ...this.state.sell_volume},\n            })\n          })\n          //console.log(this.state.total_volume)\n\n        \n          \n        \n        \n        });\n      });\n      \n      socket.on('UPDATE', (data) => {\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n            exchange.stocks.map(stock => {\n              if(stock.ticker === data.ticker) {\n                stock.update.push({date: data.time, value: data.value }) //update.length - 1\n              }\n            })\n          }\n        });\n\n        \n        this.state.last_updates[data.ticker] = data.value;\n        if(data.value > this.state.big_updates[data.ticker]) {\n          this.state.big_updates[data.ticker] = data.value;\n        } \n        if(data.value < this.state.small_updates[data.ticker]) {\n          this.state.small_updates[data.ticker] = data.value;\n        }\n\n        this.setState({prueba: [{date: data.time, value: data.value }, ...this.state.prueba] })\n\n        //console.log(this.state.prueba)\n\n        \n        \n\n        \n\n      });\n\n      socket.on('BUY', (data) => {\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        \n        if(isNaN(this.state.total_volume[data.ticker])){\n          this.state.total_volume[data.ticker] = 0;\n        }\n        this.state.total_volume[data.ticker] += data.volume;\n        this.state.buy_volume[data.ticker] += data.volume;\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n            if(exchange.name === exchange_input) {\n              exchange.buy_volume += data.volume\n            }\n          }\n        });\n        this.state.exchange_volume[exchange_input] += data.volume;\n        this.state.all_exchange_volume += data.volume;\n      \n      });\n\n      socket.on('SELL', (data) => {\n        var exchange_input = this.state.stock_exchange[data.ticker];\n      \n        if(isNaN(this.state.total_volume[data.ticker])){\n          this.state.total_volume[data.ticker] = 0;\n        }\n        this.state.total_volume[data.ticker] += data.volume;\n        this.state.sell_volume[data.ticker] += data.volume;\n        var exchange_input = this.state.stock_exchange[data.ticker];\n        this.state.exchanges.map(exchange => {\n          if(exchange.name === exchange_input) {\n              exchange.sell_volume += data.volume\n            }\n        \n          }\n        );\n        this.state.exchange_volume[exchange_input] += data.volume;\n        this.state.all_exchange_volume += data.volume;\n      });\n      \n  }\n\n  wait_funct = () => {\n    for(var i= 0; i< 1000; i++){\n    }\n  }\n\n\n  \n  render() {\n    return(\n      <div className=\"App\">\n          {this.state.exchanges.map(exchange => {\n            this.wait_funct()\n            return(\n              <div className=\"exchange\" key={exchange.name}>\n                <ExchangeDetail\n                  key={exchange.name} \n                  exchange = {exchange}\n                  prueba = {this.state.prueba}\n                  bigs = {this.state.big_updates}\n                  smalls = {this.state.small_updates}\n                  lasts = {this.state.last_updates}\n                  volume = {this.state.total_volume}\n                  total_volume = {this.state.all_exchange_volume}\n                  buy_volume = {this.state.buy_volume}\n                  sell_volume = {this.state.sell_volume}\n                  exchange_volume = {this.state.exchange_volume[exchange.name]}\n                />\n              </div>\n            )\n          })}\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}